<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Engine Room</title><link>http://engineroom.trackmaven.com/</link><description></description><atom:link href="http://engineroom.trackmaven.com/feeds/josh-finnie.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 03 Nov 2014 00:00:00 +0100</lastBuildDate><item><title>Using Bower</title><link>http://engineroom.trackmaven.com/blog/using-bower/</link><description>&lt;p&gt;Using &lt;a href="http://bower.io"&gt;Bower&lt;/a&gt; can save you a lot of time installing and keeping track of your third-party JavaScript libraries. It can be difficult to keep track of which version of what library you or your team uses, that's why we use it here at TrackMaven. Below I will go into how and why we use it.&lt;/p&gt;
&lt;h2&gt;What is Bower&lt;/h2&gt;
&lt;p&gt;So what is Bower? Bower is the "package manager for the web." It allows you to install and track third-party JavaScript libraries easily. At TrackMaven we use it to install and keep track of all the libraries we use. Below is just a small excerpt from our &lt;code&gt;bower.json&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;dependencies&amp;quot;: {
    &amp;quot;jquery&amp;quot;: &amp;quot;1.11.1&amp;quot;,
    &amp;quot;angular&amp;quot;: &amp;quot;1.2.26&amp;quot;,
    &amp;quot;angular-ui-router&amp;quot;: &amp;quot;0.2.11&amp;quot;,
    &amp;quot;d3&amp;quot;: &amp;quot;3.4.13&amp;quot;,
    ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bower allows for us to not only keep track of what third-party JavaScript libraries we are using, but it also allows us to pin these libraries to certain versions. The ability to pin the versions have become invaluable to us as we grow our engineering team; it allows us to keep our development environment consistent across all our engineers. Another great feature of Bower is that it allows us to install these libraries from many different sources:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Bower Install Examples from http://bower.io/" src="/images/bower-examples.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Initial Setup&lt;/h2&gt;
&lt;p&gt;Next we are going to talk about how to best set up Bower. Installing Bower is simple if you already have Node.js installed. (If you do not have Node.js installed, you can simply follow the directions &lt;a href="http://nodejs.org/download/"&gt;here&lt;/a&gt;.) Once Node.js is installed on your machine, the steps required to install Bower are as followed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm install -g bower
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! The above command installs Bower globally on your machine; this allows you to use Bower for all your projects. &lt;/p&gt;
&lt;p&gt;If you want to use Bower to install a JavaScript library, all you need to do is run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bower install angular
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install angular.js into your &lt;code&gt;bower_components&lt;/code&gt; folder. &lt;/p&gt;
&lt;h3&gt;Saving packages&lt;/h3&gt;
&lt;p&gt;This is great for a one-time installation of Angular, but if you want to create a repeatable workflow, it would be best to have a way to note this installation of Angular and it's version. You do this with your &lt;code&gt;bower.json&lt;/code&gt; file. The easiest way to create a &lt;code&gt;bower.json&lt;/code&gt; file is to run the command &lt;code&gt;bower init&lt;/code&gt;. This will prompt you with a few questions about your project and give you a way to save packages to your project.&lt;/p&gt;
&lt;p&gt;To save a library to your project, just append a &lt;code&gt;--save&lt;/code&gt; or &lt;code&gt;--save-dev&lt;/code&gt; when installing the library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Installs a package and add it to bower.json dependencies
$ bower install angular --save

# Install a package and add it to bower.json devDependencies
$ bower install jasmine --save-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Versioning packages&lt;/h3&gt;
&lt;p&gt;You can also determine what version of a package you want to install by preceding the package with a &lt;code&gt;#&lt;/code&gt; sign. For example, if we do not want Angular 1.2.26 but instead Angular 1.2.12, we could install that version with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bower install angularjs#1.2.12
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was very helpful for us at TrackMaven when starting off with Bower since we wanted to match our current setup as much as we could, and we were running some older versions of JavaScript libraries.&lt;/p&gt;
&lt;h3&gt;Customizations&lt;/h3&gt;
&lt;p&gt;The defaults that come with Bower are pretty sane, but I always feel like the default folder &lt;code&gt;bower_components&lt;/code&gt; is just a bit too clunky. Luckily Bower allows for an easy way to change some defaults. This is done via the &lt;code&gt;.bowerrc&lt;/code&gt; file. Here at TrackMaven, we have three lines to ease our time with Bower:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;directory&amp;quot;: &amp;quot;.bower-cache&amp;quot;,
    &amp;quot;json&amp;quot;: &amp;quot;bower.json&amp;quot;,
    &amp;quot;interactive&amp;quot;: false
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those three line do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;directory&lt;/strong&gt; - Changes the default directory in which Bower installs the libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;json&lt;/strong&gt; - Tells Bowser where your init file is. This allows you to rename it something other than &lt;code&gt;bower.json&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interactive&lt;/strong&gt; - Makes Bower interactive, prompting whenever necessary. We turn this off since we use &lt;a href="http://www.docker.com/"&gt;Docker&lt;/a&gt;, and interactions break our install. This defaults to &lt;code&gt;null&lt;/code&gt; which means &lt;code&gt;auto&lt;/code&gt;, and is likely what you'd want to keep unless you run into issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The entire &lt;code&gt;.bowerrc&lt;/code&gt; configuration options can be found &lt;a href="http://bower.io/docs/config/"&gt;here&lt;/a&gt;. There is a lot of configuration that can be done to Bower, so be sure to take a look.&lt;/p&gt;
&lt;h2&gt;Benefits&lt;/h2&gt;
&lt;p&gt;The benefits of Bower for TrackMaven were seen immediately. After setting up Bower we had a simple way to keep track of not only what third-party libraries we use for our application, but even what versions of those libraries. This has cut down the time it takes us to spin up our development environments and cut down on the bugs we see when using slightly different versions of third-party libraries. Bower also allowed us to easily integrate our third-party libraries into our build process which allowed us to concatenate and minify them all seamlessly.&lt;/p&gt;
&lt;h3&gt;Searching&lt;/h3&gt;
&lt;p&gt;Bower give you the ability to search for packages within its system. This is accomplished by using the &lt;code&gt;search&lt;/code&gt; parameter. Running this command, &lt;code&gt;bower search angularjs&lt;/code&gt; returns the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bower search angularjs
Search results:

angularjs-nvd3-directives git://github.com/cmaurer/angularjs-nvd3-directives.git
AngularJS-Toaster git://github.com/jirikavi/AngularJS-Toaster.git
angularjs git://github.com/angular/bower-angular.git
angular-facebook git://github.com/Ciul/Angularjs-Facebook.git
angularjs-file-upload git://github.com/danialfarid/angular-file-upload-bower.git
angularjs-rails-resource git://github.com/FineLinePrototyping/dist-angularjs-rails-resource
angularjs-geolocation git://github.com/arunisrael/angularjs-geolocation.git
angularjs-utilities git://github.com/realcrowd/angularjs-utilities.git
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These are all the packages that are available through Bower which contain the word "angularjs". The search ability is very useful especially when using third-party libraries like Angular.js which have a vast plugin ecosystem.&lt;/p&gt;
&lt;h2&gt;Drawbacks&lt;/h2&gt;
&lt;p&gt;The drawbacks of Bower are few and far between, but one of the major issues we had in using Bower was the lack of adoption with some third-party libraries. It takes a non-trivial effort to make your library compatible with Bower and some just haven't taken the time. Adding these libraries to our automated build process took quite the effort, but in the long run it was worth it.&lt;/p&gt;
&lt;h3&gt;Dealing with the drawbacks&lt;/h3&gt;
&lt;p&gt;One of the biggest headaches we ran into with using Bower was the lack of consistency within the bower packages themselves. This is okay if you are just using the third-party libraries directly in your HTML, but at TrackMaven we wanted to concatenate and minify our JavaScript libraries. At TrackMaven, we use &lt;a href="http://gulpjs.com/"&gt;Gulp.js&lt;/a&gt; as our build system, and after some research we found a Gulp package that allowed us to deal with our Bower packages. &lt;a href="https://www.npmjs.org/package/gulp-bower-files"&gt;Gulp-Bower-Files&lt;/a&gt; gives your Gulp process an ability to interact with your installed Bower packages. With a small addition to our &lt;code&gt;bower.json&lt;/code&gt; file we can tell Gulp-Bower-Files what file should be used for what Bower package. This removes a huge headache from using Bower. Below is an excerpt from our &lt;code&gt;bower.json&lt;/code&gt; file to show what I mean:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;overrides&amp;quot;: {
  &amp;quot;canvg&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;canvg.js&amp;quot;
  },
  &amp;quot;underscore&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;underscore.js&amp;quot;
  },
  &amp;quot;moment&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;moment.js&amp;quot;
  },
  &amp;quot;jspdf&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;dist/jspdf.debug.js&amp;quot;
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those who use the other JavaScript build system &lt;a href="http://gruntjs.com/"&gt;Grunt.js&lt;/a&gt;, it looks like the creator of Gulp-Bower-Files has deprecated it in favor of its updated version &lt;a href="https://www.npmjs.org/package/main-bower-files"&gt;Main-Bower-Files&lt;/a&gt;. This should have Grunt support in the future.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, if you have not looked into using Bower, I highly recommend it. Integration into our workflow took a little bit of time, but the benefits we are seeing from it are quite amazing!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Finnie</dc:creator><pubDate>Mon, 03 Nov 2014 00:00:00 +0100</pubDate><guid>tag:engineroom.trackmaven.com,2014-11-03:blog/using-bower/</guid><category>javascript</category><category>bower</category><category>how-to</category></item><item><title>Setting Up HTTPS Security</title><link>http://engineroom.trackmaven.com/blog/setting-up-https-security/</link><description>&lt;p&gt;Here at &lt;a href="http://trackmaven.com"&gt;TrackMaven&lt;/a&gt;, we have made it our goal to provide our customers with the most secure access to our application as possible. And in light of the recent news emerging in web security, most concerning &lt;a href="http://heartbleed.com/"&gt;Heartbleed&lt;/a&gt;, we rethought our best practices and now limit access to our application to only secured HTTPS and making sure that we have the full range of coverage based off of SSL Lab's standards for security. It is often thought that securing your site through TSL/SSL is hard, but hopefully this post will show you just how easy it can be.&lt;/p&gt;
&lt;h2&gt;What is HTTPS?&lt;/h2&gt;
&lt;p&gt;Hypertext Transfer Protocol Secure (HTTPS) is a way in which computers can securely communicate over the internet. The secure communication is done either the through the newer  Transport Layer Security (TLS) encryption protocol or its predecessor the SSL Secure Sockets Layer (SLS) encryption protocol. Each uses asymmetric cryptography involving private and public certificates to make sure the communication is secure; the creation of these certificates is commonly believed to be the difficult part of implementing HTTPS on your own servers.&lt;/p&gt;
&lt;h2&gt;Setting up HTTPS on your server&lt;/h2&gt;
&lt;p&gt;The first thing you will want to do is to secure your certificates. A certificate will consist of the owner's name, a identification number, expiration date, a public key for encryption and a private key for decryption. The certification creation process asks you for this information automatically, so don't worry about knowing how to input all the information.&lt;/p&gt;
&lt;p&gt;You could, of course, create a certificate yourself (self-sign) without the help of any &lt;a href="http://www.sslshopper.com/certificate-authority-reviews.html"&gt;Certificate Authorities (CA)&lt;/a&gt;, but you will lose the ability to be validated by them. For better or worse the CAs exist to make sure the public key given to you is true and unadulterated. Going through a CA will make sure that modern web browsers recognize your certificate as valid and trusted.&lt;/p&gt;
&lt;p&gt;There are a few different versions of certificates. It is best to read up on them and find which one best fits your needs. Here at TrackMaven, we went with a Wildcard SSL which allows us to use it on multiple subdomains (i.e. &lt;a href="https://app.trackmaven.com"&gt;app.trackmaven.com&lt;/a&gt; and &lt;a href="http://blog.trackmaven.com"&gt;blog.trackmaven.com&lt;/a&gt;). For example, &lt;a href="https://www.digicert.com/"&gt;DigiCert&lt;/a&gt; offers 5 different types of certificates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/wildcard-ssl-certificates.htm"&gt;WildCard SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/ssl-certificate.htm"&gt;Single Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/unified-communications-ssl-tls.htm"&gt;Unified Communications Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/ev-ssl-certification.htm"&gt;Extended Validation Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.digicert.com/ev-multi-domain-ssl.htm"&gt;DigiCert Extended Validation Multi-Domain Certificate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To continue with the process of securing your web application, you will need to purchase a SSL certificate from a reputable vendor. Shop around; prices do vary. Once you have purchased an SSL certificate you will need to create a Certificate Signing Request (CSR). The below command will generate both a server key and CSR:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;openssl req -new -newkey rsa:2048 -keyout your_server_name.key -out your_server_name.csr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You then take the newly created CSR file to the certificate provider of your choice and purchase a SSL Certificate. This process can take anywhere from a few minutes to a few weeks depending on the level of certification you purchased. Once your provider has generated the certificates you should receive them via the email address which you used to sign the CSR.&lt;/p&gt;
&lt;p&gt;I would recommend you follow the instructions of your certificate provider closely as all providers do things slightly differently. Once you have successfully received the email with your certificates all that is left to do is to put them on the server and tell your http server (either NGINX, Apache, etc.) to start hosting content through HTTPS.&lt;/p&gt;
&lt;p&gt;Setting up your server is the easier of these processes; you only need to save the key you created above and the output of the directions your CA provided you to your server. I'd recommend putting it under &lt;code&gt;/etc/{apache2,nginx}/ssl/&lt;/code&gt; for safe keeping.&lt;/p&gt;
&lt;h3&gt;Setting up Apache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You first want to enable the SSL module in Apache: &lt;code&gt;a2enmod ssl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Secondly, you'll need to turn on port 443 listening by editing the &lt;code&gt;/etc/apache2/ports.conf&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update your &lt;code&gt;VirtualHost&lt;/code&gt; file to listen on port 443 and have the following configurations:&lt;/p&gt;
&lt;p&gt;SSLEngine on
SSLCertificateFile /etc/apache2/ssl/your_server_name.crt
SSLCertificateKeyFile /etc/apache2/ssl/your_server_name.key
SSLCertificateChainFile /etc/apache2/ssl/DigiCertCA.crt&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should give you a working secure connection through TSL using Apache.&lt;/p&gt;
&lt;h3&gt;Setting up Nginx&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You first want to bundle your CRT with the CA's cert: &lt;code&gt;cat your_server_name.crt DigiCertCA.crt &amp;gt;&amp;gt; bundle.crt&lt;/code&gt; and move that to your &lt;code&gt;/etc/nginx/ssl/&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second edit your &lt;code&gt;server&lt;/code&gt; virtual host to include the following configurations:&lt;/p&gt;
&lt;p&gt;listen 443;
ssl on;
ssl_certificate /etc/nginx/ssl/bundle.crt
ssl_certificate_key /etc/ngin/ssl/your_server_name.key&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should give you a working secure connection through TSL using Nginx. At this point, I would suggest finding the best way for you to forward all traffic hitting HTTP to HTTPS. There is no real reason that, with HTTPS now set up, you should be serving insecure content.&lt;/p&gt;
&lt;h2&gt;Hardening your HTTPS connection&lt;/h2&gt;
&lt;p&gt;Now that we have set up a secure connection on your server of choice, it is important to make sure that you are using HTTPS to the best of its abilities. There are a few steps that one should take to make sure their server is hardened as best as possible when using HTTPS.&lt;/p&gt;
&lt;h3&gt;Hardening Apache&lt;/h3&gt;
&lt;p&gt;Adding the below lines to your &lt;code&gt;VirtualHost&lt;/code&gt; will give you all the benefits of the most up-to-date ciphers while disallowing some of the known-to-be-weaker ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SSLProtocol ALL -SSLv2
SSLHonorCipherOrder On
SSLCipherSuite ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
SSLCompression Off
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Hardening Nginx&lt;/h3&gt;
&lt;p&gt;Adding the below lines to your &lt;code&gt;server&lt;/code&gt; virtual host will give you all the benefits of the most up-to-date ciphers while disallowing some of the known-to-be-weaker ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_protocols&lt;/span&gt; &lt;span class="nt"&gt;SSLv3&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="nc"&gt;.1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="nc"&gt;.2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="nt"&gt;ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AESGCM&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AESGCM&lt;/span&gt;&lt;span class="nd"&gt;:ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES256&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES256&lt;/span&gt;&lt;span class="nd"&gt;:ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES128&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES&lt;/span&gt;&lt;span class="nd"&gt;:ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;3DES&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;3DES&lt;/span&gt;&lt;span class="nd"&gt;:RSA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AESGCM&lt;/span&gt;&lt;span class="nd"&gt;:RSA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES&lt;/span&gt;&lt;span class="nd"&gt;:RSA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;3DES&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;aNULL&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;MD5&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;DSS&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;AES256&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="nt"&gt;shared&lt;/span&gt;&lt;span class="nd"&gt;:SSL:10m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="nt"&gt;10m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_stapling&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With this article, I hope I cleared some of the air around setting up HTTPS on your server. Setting up HTTPS isn't too scary, for a small time investment you'll gain a huge security boost for your application and your users.&lt;/p&gt;
&lt;h2&gt;Further Reading and Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/HTTP_Secure"&gt;HTTPS&lt;/a&gt;
&lt;a href="http://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS/SSL&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Finnie</dc:creator><pubDate>Sat, 13 Sep 2014 00:00:00 +0200</pubDate><guid>tag:engineroom.trackmaven.com,2014-09-13:blog/setting-up-https-security/</guid><category>security</category><category>how-to</category></item></channel></rss>