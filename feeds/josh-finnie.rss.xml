<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Engine Room - TrackMaven</title><link>http://engineroom.trackmaven.com/</link><description></description><atom:link href="http://engineroom.trackmaven.com/feeds/josh-finnie.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 22 Jun 2015 00:00:00 +0200</lastBuildDate><item><title>Monthly Challenge: Functional Programming</title><link>http://engineroom.trackmaven.com/blog/monthly-challenge-functional-programming/</link><description>&lt;p&gt;Our topic for this month's &lt;a href="http://www.meetup.com/TrackMaven-Monthly-Challenge/"&gt;Monthly Challenge meetup&lt;/a&gt; is Functional Programming! In this post, we'll get you started with one of the many languages out there dedicated to functional programming: &lt;a href="https://www.haskell.org/"&gt;Haskell&lt;/a&gt;! Here at TrackMaven, we write most of our code in Python and JavaScript, which are both capable of writing functional programming in their own right, but with the true spirit of our Monthly Challenges, I am going to write about a language that I am not super familiar with and see what we can do with it.&lt;/p&gt;
&lt;h3&gt;What is Functional Programming&lt;/h3&gt;
&lt;p&gt;But first, what is functional programming and why are we dedicating an entire Monthly Challenge to the topic? Functional Programming is the practices of writing code using solely functions avoiding both changing state and mutable data. &lt;sup&gt;[&lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;1&lt;/a&gt;]&lt;/sup&gt; Having side-effect free functions being the building blocks of your code can ease the difficulty found in some complicated problems. However, using the functional programming paradigm is quite different from the standard paradigm of Object Orientated programming and hopefully this blog post will give you a nice primer for it.&lt;/p&gt;
&lt;p&gt;Within the world of functional programming, there are a few "heavy-hitters" to choose from. As I said above, in this blog post we are going to focus on Haskell, but there are many more; here is a list of a few I recommend you checking out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fsharp.org/"&gt;F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocaml.org/"&gt;OCaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.erlang.org/"&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://clojure.org/"&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;First Functional Program&lt;/h3&gt;
&lt;p&gt;Let's jump right in and get our feet wet with Haskell! The first thing we want to do in make sure Haskell is installed on our machine. To do this, simply go to &lt;a href="https://www.haskell.org/platform/"&gt;this website&lt;/a&gt; and download the Haskell Platform for your operating system. Once installed you should be able to run &lt;code&gt;ghci&lt;/code&gt; and get into the interactive Haskell compiler called "Glasgow Haskell Compiler."&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ghci
GHCi, version 7.10.1: http://www.haskell.org/ghc/  :? &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;help&lt;/span&gt;
Prelude&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once in the interactive compiler, we can start to use Haskell. Using the built-in function &lt;code&gt;putStrLn&lt;/code&gt;, we can print out "Hello World!" simply by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;
&lt;span class="kt"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have written your first Haskel program. Sure it wasn't that impressive, but I hope it portrayed the functional programming paradigm. &lt;code&gt;putStrLn&lt;/code&gt; in a function that takes an argument of type "String". To see a function's &lt;a href="https://wiki.haskell.org/Type_signature"&gt;signature&lt;/a&gt;, just run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt;  
&lt;span class="nf"&gt;putStrLn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The signature of the function shows its "name" (&lt;code&gt;putStrLn&lt;/code&gt;), its "argument(s) type" (&lt;code&gt;String&lt;/code&gt;) and its "output type" (&lt;code&gt;IO ()&lt;/code&gt;). Using this becomes helpful later on as you interact with and create custom functions. Next, let's get a little more in-depth (and away from "Hello World") and take a look at the factorial algorithm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="mi"&gt;3628800&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here you can see we have defined a simple function called &lt;code&gt;fac&lt;/code&gt; which will calculate the factorial of a given number. The awesome thing about this function is that we even recursively calls it to help with the calculation. Seeing the ease in which a factorial is calculated really starts to make you believe that the functional programming paradigm is something to look forward to.&lt;/p&gt;
&lt;h3&gt;Functional Programming IRL&lt;/h3&gt;
&lt;p&gt;Now that we have a few examples under our belt, let's take a look at where you might have seen the functional programming paradigm before. If you are familiar with the python web development ecosystem you are probably familiar with the argument between these two programming paradigms. &lt;/p&gt;
&lt;p&gt;In &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, there are two main ways to go about programming a &lt;code&gt;view&lt;/code&gt;, there are Class-Based &lt;code&gt;view&lt;/code&gt;s and there are functional &lt;code&gt;view&lt;/code&gt;s. Each of them has their benefits and drawbacks, but it does a great job at illustrating the differences between function programming and object oriented programming. When dealing with a individual viewpoint of a website, it is easy to thing of it as a singleton function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;It is now {}.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above example, you have a function that explicitly deals with a single response. Its job is to accept a request and respond with an HTML template with the current time. Class-Based views within the Django ecosystem came along as the complexity of web applications grew. As endpoints had to deal with different request methods, you started to see a lot of duplication in your code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# &amp;lt;view logic&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# &amp;lt;view logic&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And class-based inheritance, something you cannot get in pure functional programming, you were allowed to simplify your code through inheritance to something that looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# &amp;lt;view logic&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# &amp;lt;view logic&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, your logic is cleaner, but you are left with the programmatic black-box that is &lt;code&gt;View&lt;/code&gt;. This is a class that was provided to you through the Django framework and is now starting to add a lot of weight to your application where a functional programming paradigm works just as well. And to this day, the debate on whether or not CBVs are the proper way to write views in Django carries on.&lt;/p&gt;
&lt;h3&gt;More Haskell&lt;/h3&gt;
&lt;p&gt;Now let's have a little more fun with Haskell. We are going to write a simple command-line game where we are going to try and guess the number the computer is thinking of. To do this, let's create a file named &lt;code&gt;guess-the-number.hs&lt;/code&gt; and copy in the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Random&lt;/span&gt;  
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="nf"&gt;isValidNumber&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="nf"&gt;testGuessedNumber&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You&amp;#39;re correct!&amp;quot;&lt;/span&gt;
        &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sorry, the correct answer was &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;  
    &lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getStdGen&lt;/span&gt;  
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randomR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;StdGen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     
    &lt;span class="n"&gt;putStr&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Which number in the range from 1 to 10 am I thinking of? &amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;numberString&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getLine&lt;/span&gt;  
    &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="n"&gt;numberString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;  
        &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;numberString&lt;/span&gt;  
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isValidNumber&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
            &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;testGuessedNumber&lt;/span&gt; &lt;span class="n"&gt;randNumber&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
            &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Please select a number between 1 and 10!&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;newStdGen&lt;/span&gt;  
        &lt;span class="n"&gt;main&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now run this program through our Haskell interpreter by running the following command &lt;code&gt;runhaskell guess_the_number.hs&lt;/code&gt;. Doing so, we should be prompted to guess a number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We put in some basic validation, so give it a go and see what happens!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;runhaskell guess_the_number.hs
Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of? 2
You&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;re correct!
Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of? 1
Sorry, the correct answer was 6
Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of? 11
Please &lt;span class="k"&gt;select&lt;/span&gt; a number between &lt;span class="m"&gt;1&lt;/span&gt; and 10!
Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of? -1
Please &lt;span class="k"&gt;select&lt;/span&gt; a number between &lt;span class="m"&gt;1&lt;/span&gt; and 10!
Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of? a
guess_the_number.hs: Prelude.read: no parse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The validation does a pretty good job as long as we put in numbers, but we crashed the application when we inputed a letter. There are obvious improvements we could make to our validation, but I am going to leave that up to you.&lt;/p&gt;
&lt;h3&gt;Even More Haskell&lt;/h3&gt;
&lt;p&gt;I wanted to make the above program a little more "haskellonic" (like pythonic, but for Haskell...) So I took a lot of the functions we created above, gave them proper signatures and added a little recursion!&lt;/p&gt;
&lt;p&gt;Below is the finished program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Random&lt;/span&gt;  

&lt;span class="nf"&gt;randomNumber&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;-- chosen by fair dice roll.&lt;/span&gt;
                 &lt;span class="c1"&gt;-- guaranteed to be random.&lt;/span&gt;

&lt;span class="nf"&gt;isValidNumber&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;isValidNumber&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;       &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;

&lt;span class="nf"&gt;testGuessedNumber&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;testGuessedNumber&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;

&lt;span class="nf"&gt;getInt&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;getInt&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getLine&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;  
    &lt;span class="n"&gt;putStr&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Which number in the range from 1 to 10 am I thinking of? &amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getInt&lt;/span&gt; 
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isValidNumber&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
        &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;randomNumber&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
        &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;please select a number between 1 and 10.&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You Win!&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You guessed incorrectly, please try again.&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getInt&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;outcome&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testGuessedNumber&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As one can see, I had some issues with randomness in Haskell (among other things...), but above it at least a much more well-rounded example of Haskell code where you can start to see some of the benefits.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I have to say that I was impressed with the syntax and ease of (most parts of) Haskell, but I have to admit I am not jumping ship anytime soon. This could be because I didn't give it the true time it deserved, or it could be because I am so spoiled with Python. What are your thoughts about Functional Programming? &lt;/p&gt;
&lt;p&gt;Please &lt;a href="mailto:engineroom@trackmaven.com"&gt;let us know&lt;/a&gt; if you have tried out anything interesting using functional programming - bonus points if you include an open-source repo. You can see what we did for the TrackMaven Monthly Challenge here: &lt;a href="http://challenge.hackpad.com"&gt;challenge.hackpad.com&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Finnie</dc:creator><pubDate>Mon, 22 Jun 2015 00:00:00 +0200</pubDate><guid>tag:engineroom.trackmaven.com,2015-06-22:blog/monthly-challenge-functional-programming/</guid><category>programming</category></item><item><title>2014: Year in Review</title><link>http://engineroom.trackmaven.com/blog/2014-year-in-review/</link><description>&lt;p&gt;Since this is the first year that TrackMaven has our Engine Room blog, this will be our first year in review. But I am hoping that this is a trend that will continue as we grow! We want to highlight a lot of what we did during 2014, and show our incredible growth as a department. You can head over to see our company-wide &lt;a href="http://trackmaven.com/2014/"&gt;2014 in review&lt;/a&gt; to get a better understanding how TrackMaven as a whole grew, but below you will find some interesting facts about the Engineering team.&lt;/p&gt;
&lt;h3&gt;So here are the numbers:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;+4 Engineers. We started 2014 with four engineers and have doubled in size! There were definitely some growing pains, but check out Farhan's &lt;a href="/blog/onboarding-at-trackmaven/"&gt;onboarding post&lt;/a&gt; to see how far we've come!&lt;/li&gt;
&lt;li&gt;+8,965 code commits. Even as fast as our team has been expanding, so has the code base for TrackMaven. We are constantly trying to provide the best platform for digital marketers, and committing code helps us get there.&lt;/li&gt;
&lt;li&gt;+204 releases. Even though continuous deployment was something we added to our stack around June of 2014, we were still able to push 204 releases of the application to our customers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;We also released some amazing features &amp;amp; enhancements in 2014!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We migrated completely from Heroku to AWS to give the engineers finer control of the application.&lt;/li&gt;
&lt;li&gt;We secured our application with SSL to provide the utmost secure connection with our customers. (Read how to set up HTTPS &lt;a href="/blog/setting-up-https-security/"&gt;here&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;We released an amazing data visualization suite using D3. (You can read more on how to integrate D3 in AngularJS &lt;a href="/blog/building-a-testable-d3-charting-application-within-angularjs/"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We scaled everything! Just like the task of doubling our engineering staff, we were able to scale TrackMaven, more than doubling our infrastructure. (Read about scaling PostgreSQL &lt;a href="/blog/so-you-want-another-postgresql-database-part-1/"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We introduced Elasticsearch into our cluster to give our customers access to blazing fast search of our activity feed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other Nice Things&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We started becoming a pillar of the DC Tech scene, giving 15 talks ranging from lightning talks at local meetups, to one-off talks at other companies, to a few Python conferences. As we grow as a team, I hope to see the number of talks given to the tech communities also grow.&lt;/li&gt;
&lt;li&gt;We also started a &lt;a href="www.meetup.com/TrackMaven-Monthly-Challenge/"&gt;Monthly Challenge Meetup&lt;/a&gt; to encourage the DC tech community to continue to learn and improve.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have a lot more planned for 2015 and will be writing about it here on the Engine Room! Here's to an amazing 2015.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Finnie</dc:creator><pubDate>Tue, 10 Feb 2015 00:00:00 +0100</pubDate><guid>tag:engineroom.trackmaven.com,2015-02-10:blog/2014-year-in-review/</guid><category>engineering</category><category>review</category></item><item><title>Using Bower</title><link>http://engineroom.trackmaven.com/blog/using-bower/</link><description>&lt;p&gt;Using &lt;a href="http://bower.io"&gt;Bower&lt;/a&gt; can save you a lot of time installing and keeping track of your third-party JavaScript libraries. It can be difficult to keep track of which version of what library you or your team uses, that's why we use it here at TrackMaven. Below I will go into how and why we use it.&lt;/p&gt;
&lt;h2&gt;What is Bower&lt;/h2&gt;
&lt;p&gt;So what is Bower? Bower is the "package manager for the web." It allows you to install and track third-party JavaScript libraries easily. At TrackMaven we use it to install and keep track of all the libraries we use. Below is just a small excerpt from our &lt;code&gt;bower.json&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;dependencies&amp;quot;: {
    &amp;quot;jquery&amp;quot;: &amp;quot;1.11.1&amp;quot;,
    &amp;quot;angular&amp;quot;: &amp;quot;1.2.26&amp;quot;,
    &amp;quot;angular-ui-router&amp;quot;: &amp;quot;0.2.11&amp;quot;,
    &amp;quot;d3&amp;quot;: &amp;quot;3.4.13&amp;quot;,
    ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bower allows for us to not only keep track of what third-party JavaScript libraries we are using, but it also allows us to pin these libraries to certain versions. The ability to pin the versions have become invaluable to us as we grow our engineering team; it allows us to keep our development environment consistent across all our engineers. Another great feature of Bower is that it allows us to install these libraries from many different sources:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Bower Install Examples from http://bower.io/" src="/images/bower-examples.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Initial Setup&lt;/h2&gt;
&lt;p&gt;Next we are going to talk about how to best set up Bower. Installing Bower is simple if you already have Node.js installed. (If you do not have Node.js installed, you can simply follow the directions &lt;a href="http://nodejs.org/download/"&gt;here&lt;/a&gt;.) Once Node.js is installed on your machine, the steps required to install Bower are as followed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm install -g bower
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! The above command installs Bower globally on your machine; this allows you to use Bower for all your projects. &lt;/p&gt;
&lt;p&gt;If you want to use Bower to install a JavaScript library, all you need to do is run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bower install angular
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install angular.js into your &lt;code&gt;bower_components&lt;/code&gt; folder. &lt;/p&gt;
&lt;h3&gt;Saving packages&lt;/h3&gt;
&lt;p&gt;This is great for a one-time installation of Angular, but if you want to create a repeatable workflow, it would be best to have a way to note this installation of Angular and it's version. You do this with your &lt;code&gt;bower.json&lt;/code&gt; file. The easiest way to create a &lt;code&gt;bower.json&lt;/code&gt; file is to run the command &lt;code&gt;bower init&lt;/code&gt;. This will prompt you with a few questions about your project and give you a way to save packages to your project.&lt;/p&gt;
&lt;p&gt;To save a library to your project, just append a &lt;code&gt;--save&lt;/code&gt; or &lt;code&gt;--save-dev&lt;/code&gt; when installing the library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Installs a package and add it to bower.json dependencies
$ bower install angular --save

# Install a package and add it to bower.json devDependencies
$ bower install jasmine --save-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Versioning packages&lt;/h3&gt;
&lt;p&gt;You can also determine what version of a package you want to install by preceding the package with a &lt;code&gt;#&lt;/code&gt; sign. For example, if we do not want Angular 1.2.26 but instead Angular 1.2.12, we could install that version with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bower install angularjs#1.2.12
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was very helpful for us at TrackMaven when starting off with Bower since we wanted to match our current setup as much as we could, and we were running some older versions of JavaScript libraries.&lt;/p&gt;
&lt;h3&gt;Customizations&lt;/h3&gt;
&lt;p&gt;The defaults that come with Bower are pretty sane, but I always feel like the default folder &lt;code&gt;bower_components&lt;/code&gt; is just a bit too clunky. Luckily Bower allows for an easy way to change some defaults. This is done via the &lt;code&gt;.bowerrc&lt;/code&gt; file. Here at TrackMaven, we have three lines to ease our time with Bower:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;directory&amp;quot;: &amp;quot;.bower-cache&amp;quot;,
    &amp;quot;json&amp;quot;: &amp;quot;bower.json&amp;quot;,
    &amp;quot;interactive&amp;quot;: false
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those three line do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;directory&lt;/strong&gt; - Changes the default directory in which Bower installs the libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;json&lt;/strong&gt; - Tells Bowser where your init file is. This allows you to rename it something other than &lt;code&gt;bower.json&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interactive&lt;/strong&gt; - Makes Bower interactive, prompting whenever necessary. We turn this off since we use &lt;a href="http://www.docker.com/"&gt;Docker&lt;/a&gt;, and interactions break our install. This defaults to &lt;code&gt;null&lt;/code&gt; which means &lt;code&gt;auto&lt;/code&gt;, and is likely what you'd want to keep unless you run into issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The entire &lt;code&gt;.bowerrc&lt;/code&gt; configuration options can be found &lt;a href="http://bower.io/docs/config/"&gt;here&lt;/a&gt;. There is a lot of configuration that can be done to Bower, so be sure to take a look.&lt;/p&gt;
&lt;h2&gt;Benefits&lt;/h2&gt;
&lt;p&gt;The benefits of Bower for TrackMaven were seen immediately. After setting up Bower we had a simple way to keep track of not only what third-party libraries we use for our application, but even what versions of those libraries. This has cut down the time it takes us to spin up our development environments and cut down on the bugs we see when using slightly different versions of third-party libraries. Bower also allowed us to easily integrate our third-party libraries into our build process which allowed us to concatenate and minify them all seamlessly.&lt;/p&gt;
&lt;h3&gt;Searching&lt;/h3&gt;
&lt;p&gt;Bower give you the ability to search for packages within its system. This is accomplished by using the &lt;code&gt;search&lt;/code&gt; parameter. Running this command, &lt;code&gt;bower search angularjs&lt;/code&gt; returns the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bower search angularjs
Search results:

angularjs-nvd3-directives git://github.com/cmaurer/angularjs-nvd3-directives.git
AngularJS-Toaster git://github.com/jirikavi/AngularJS-Toaster.git
angularjs git://github.com/angular/bower-angular.git
angular-facebook git://github.com/Ciul/Angularjs-Facebook.git
angularjs-file-upload git://github.com/danialfarid/angular-file-upload-bower.git
angularjs-rails-resource git://github.com/FineLinePrototyping/dist-angularjs-rails-resource
angularjs-geolocation git://github.com/arunisrael/angularjs-geolocation.git
angularjs-utilities git://github.com/realcrowd/angularjs-utilities.git
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These are all the packages that are available through Bower which contain the word "angularjs". The search ability is very useful especially when using third-party libraries like Angular.js which have a vast plugin ecosystem.&lt;/p&gt;
&lt;h2&gt;Drawbacks&lt;/h2&gt;
&lt;p&gt;The drawbacks of Bower are few and far between, but one of the major issues we had in using Bower was the lack of adoption with some third-party libraries. It takes a non-trivial effort to make your library compatible with Bower and some just haven't taken the time. Adding these libraries to our automated build process took quite the effort, but in the long run it was worth it.&lt;/p&gt;
&lt;h3&gt;Dealing with the drawbacks&lt;/h3&gt;
&lt;p&gt;One of the biggest headaches we ran into with using Bower was the lack of consistency within the bower packages themselves. This is okay if you are just using the third-party libraries directly in your HTML, but at TrackMaven we wanted to concatenate and minify our JavaScript libraries. At TrackMaven, we use &lt;a href="http://gulpjs.com/"&gt;Gulp.js&lt;/a&gt; as our build system, and after some research we found a Gulp package that allowed us to deal with our Bower packages. &lt;a href="https://www.npmjs.org/package/gulp-bower-files"&gt;Gulp-Bower-Files&lt;/a&gt; gives your Gulp process an ability to interact with your installed Bower packages. With a small addition to our &lt;code&gt;bower.json&lt;/code&gt; file we can tell Gulp-Bower-Files what file should be used for what Bower package. This removes a huge headache from using Bower. Below is an excerpt from our &lt;code&gt;bower.json&lt;/code&gt; file to show what I mean:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;overrides&amp;quot;: {
  &amp;quot;canvg&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;canvg.js&amp;quot;
  },
  &amp;quot;underscore&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;underscore.js&amp;quot;
  },
  &amp;quot;moment&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;moment.js&amp;quot;
  },
  &amp;quot;jspdf&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;dist/jspdf.debug.js&amp;quot;
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those who use the other JavaScript build system &lt;a href="http://gruntjs.com/"&gt;Grunt.js&lt;/a&gt;, it looks like the creator of Gulp-Bower-Files has deprecated it in favor of its updated version &lt;a href="https://www.npmjs.org/package/main-bower-files"&gt;Main-Bower-Files&lt;/a&gt;. This should have Grunt support in the future.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, if you have not looked into using Bower, I highly recommend it. Integration into our workflow took a little bit of time, but the benefits we are seeing from it are quite amazing!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Finnie</dc:creator><pubDate>Mon, 03 Nov 2014 00:00:00 +0100</pubDate><guid>tag:engineroom.trackmaven.com,2014-11-03:blog/using-bower/</guid><category>javascript</category><category>bower</category><category>how-to</category></item><item><title>Setting Up HTTPS Security</title><link>http://engineroom.trackmaven.com/blog/setting-up-https-security/</link><description>&lt;p&gt;Here at &lt;a href="http://trackmaven.com"&gt;TrackMaven&lt;/a&gt;, we have made it our goal to provide our customers with the most secure access to our application as possible. And in light of the recent news emerging in web security, most concerning &lt;a href="http://heartbleed.com/"&gt;Heartbleed&lt;/a&gt;, we rethought our best practices and now limit access to our application to only secured HTTPS and making sure that we have the full range of coverage based off of SSL Lab's standards for security. It is often thought that securing your site through TSL/SSL is hard, but hopefully this post will show you just how easy it can be.&lt;/p&gt;
&lt;h2&gt;What is HTTPS?&lt;/h2&gt;
&lt;p&gt;Hypertext Transfer Protocol Secure (HTTPS) is a way in which computers can securely communicate over the internet. The secure communication is done either the through the newer  Transport Layer Security (TLS) encryption protocol or its predecessor the SSL Secure Sockets Layer (SLS) encryption protocol. Each uses asymmetric cryptography involving private and public certificates to make sure the communication is secure; the creation of these certificates is commonly believed to be the difficult part of implementing HTTPS on your own servers.&lt;/p&gt;
&lt;h2&gt;Setting up HTTPS on your server&lt;/h2&gt;
&lt;p&gt;The first thing you will want to do is to secure your certificates. A certificate will consist of the owner's name, a identification number, expiration date, a public key for encryption and a private key for decryption. The certification creation process asks you for this information automatically, so don't worry about knowing how to input all the information.&lt;/p&gt;
&lt;p&gt;You could, of course, create a certificate yourself (self-sign) without the help of any &lt;a href="http://www.sslshopper.com/certificate-authority-reviews.html"&gt;Certificate Authorities (CA)&lt;/a&gt;, but you will lose the ability to be validated by them. For better or worse the CAs exist to make sure the public key given to you is true and unadulterated. Going through a CA will make sure that modern web browsers recognize your certificate as valid and trusted.&lt;/p&gt;
&lt;p&gt;There are a few different versions of certificates. It is best to read up on them and find which one best fits your needs. Here at TrackMaven, we went with a Wildcard SSL which allows us to use it on multiple subdomains (i.e. &lt;a href="https://app.trackmaven.com"&gt;app.trackmaven.com&lt;/a&gt; and &lt;a href="http://blog.trackmaven.com"&gt;blog.trackmaven.com&lt;/a&gt;). For example, &lt;a href="https://www.digicert.com/"&gt;DigiCert&lt;/a&gt; offers 5 different types of certificates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/wildcard-ssl-certificates.htm"&gt;WildCard SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/ssl-certificate.htm"&gt;Single Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/unified-communications-ssl-tls.htm"&gt;Unified Communications Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/ev-ssl-certification.htm"&gt;Extended Validation Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.digicert.com/ev-multi-domain-ssl.htm"&gt;DigiCert Extended Validation Multi-Domain Certificate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To continue with the process of securing your web application, you will need to purchase a SSL certificate from a reputable vendor. Shop around; prices do vary. Once you have purchased an SSL certificate you will need to create a Certificate Signing Request (CSR). The below command will generate both a server key and CSR:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;openssl req -new -newkey rsa:2048 -keyout your_server_name.key -out your_server_name.csr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You then take the newly created CSR file to the certificate provider of your choice and purchase a SSL Certificate. This process can take anywhere from a few minutes to a few weeks depending on the level of certification you purchased. Once your provider has generated the certificates you should receive them via the email address which you used to sign the CSR.&lt;/p&gt;
&lt;p&gt;I would recommend you follow the instructions of your certificate provider closely as all providers do things slightly differently. Once you have successfully received the email with your certificates all that is left to do is to put them on the server and tell your http server (either NGINX, Apache, etc.) to start hosting content through HTTPS.&lt;/p&gt;
&lt;p&gt;Setting up your server is the easier of these processes; you only need to save the key you created above and the output of the directions your CA provided you to your server. I'd recommend putting it under &lt;code&gt;/etc/{apache2,nginx}/ssl/&lt;/code&gt; for safe keeping.&lt;/p&gt;
&lt;h3&gt;Setting up Apache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You first want to enable the SSL module in Apache: &lt;code&gt;a2enmod ssl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Secondly, you'll need to turn on port 443 listening by editing the &lt;code&gt;/etc/apache2/ports.conf&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update your &lt;code&gt;VirtualHost&lt;/code&gt; file to listen on port 443 and have the following configurations:&lt;/p&gt;
&lt;p&gt;SSLEngine on
SSLCertificateFile /etc/apache2/ssl/your_server_name.crt
SSLCertificateKeyFile /etc/apache2/ssl/your_server_name.key
SSLCertificateChainFile /etc/apache2/ssl/DigiCertCA.crt&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should give you a working secure connection through TSL using Apache.&lt;/p&gt;
&lt;h3&gt;Setting up Nginx&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You first want to bundle your CRT with the CA's cert: &lt;code&gt;cat your_server_name.crt DigiCertCA.crt &amp;gt;&amp;gt; bundle.crt&lt;/code&gt; and move that to your &lt;code&gt;/etc/nginx/ssl/&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second edit your &lt;code&gt;server&lt;/code&gt; virtual host to include the following configurations:&lt;/p&gt;
&lt;p&gt;listen 443;
ssl on;
ssl_certificate /etc/nginx/ssl/bundle.crt
ssl_certificate_key /etc/ngin/ssl/your_server_name.key&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should give you a working secure connection through TSL using Nginx. At this point, I would suggest finding the best way for you to forward all traffic hitting HTTP to HTTPS. There is no real reason that, with HTTPS now set up, you should be serving insecure content.&lt;/p&gt;
&lt;h2&gt;Hardening your HTTPS connection&lt;/h2&gt;
&lt;p&gt;Now that we have set up a secure connection on your server of choice, it is important to make sure that you are using HTTPS to the best of its abilities. There are a few steps that one should take to make sure their server is hardened as best as possible when using HTTPS.&lt;/p&gt;
&lt;h3&gt;Hardening Apache&lt;/h3&gt;
&lt;p&gt;Adding the below lines to your &lt;code&gt;VirtualHost&lt;/code&gt; will give you all the benefits of the most up-to-date ciphers while disallowing some of the known-to-be-weaker ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SSLProtocol ALL -SSLv2
SSLHonorCipherOrder On
SSLCipherSuite ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
SSLCompression Off
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Hardening Nginx&lt;/h3&gt;
&lt;p&gt;Adding the below lines to your &lt;code&gt;server&lt;/code&gt; virtual host will give you all the benefits of the most up-to-date ciphers while disallowing some of the known-to-be-weaker ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_protocols&lt;/span&gt; &lt;span class="nt"&gt;SSLv3&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="nc"&gt;.1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="nc"&gt;.2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="nt"&gt;ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AESGCM&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AESGCM&lt;/span&gt;&lt;span class="nd"&gt;:ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES256&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES256&lt;/span&gt;&lt;span class="nd"&gt;:ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES128&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES&lt;/span&gt;&lt;span class="nd"&gt;:ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;3DES&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;3DES&lt;/span&gt;&lt;span class="nd"&gt;:RSA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AESGCM&lt;/span&gt;&lt;span class="nd"&gt;:RSA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES&lt;/span&gt;&lt;span class="nd"&gt;:RSA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;3DES&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;aNULL&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;MD5&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;DSS&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;AES256&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="nt"&gt;shared&lt;/span&gt;&lt;span class="nd"&gt;:SSL:10m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="nt"&gt;10m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_stapling&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With this article, I hope I cleared some of the air around setting up HTTPS on your server. Setting up HTTPS isn't too scary, for a small time investment you'll gain a huge security boost for your application and your users.&lt;/p&gt;
&lt;h2&gt;Further Reading and Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/HTTP_Secure"&gt;HTTPS&lt;/a&gt;
&lt;a href="http://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS/SSL&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Finnie</dc:creator><pubDate>Sat, 13 Sep 2014 00:00:00 +0200</pubDate><guid>tag:engineroom.trackmaven.com,2014-09-13:blog/setting-up-https-security/</guid><category>security</category><category>how-to</category></item></channel></rss>