<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Engine Room - TrackMaven</title><link href="http://engineroom.trackmaven.com/" rel="alternate"></link><link href="http://engineroom.trackmaven.com/feeds/atom.xml" rel="self"></link><id>http://engineroom.trackmaven.com/</id><updated>2016-03-29T00:00:00+02:00</updated><entry><title>Upgrade Elasticsearch Cluster Software and Hardware Seamlessly</title><link href="http://engineroom.trackmaven.com/blog/upgrade-es-seamlessly/" rel="alternate"></link><updated>2016-03-29T00:00:00+02:00</updated><author><name>John Young</name></author><id>tag:engineroom.trackmaven.com,2016-03-29:blog/upgrade-es-seamlessly/</id><summary type="html">&lt;h2&gt;Cluster Upgrades&lt;/h2&gt;
&lt;p&gt;Our decision to begin using Elasticsearch came from a fairly typical use case for the popular distributed data store. We had hundreds of millions of pieces of content, and we wanted to support text search across them. As we set out to migrate our architecture from a relatively simple Postgres setup to include indexing all of our documents into Elasticsearch, we did what everyone does: we played around with Elasticsearch and made some educated guesses about the hardware we would need to support our needs. And, as so often happens, we underestimated.&lt;/p&gt;
&lt;p&gt;Our biggest problem was with disk space usage. Indexing our dataset took up far more space than we had anticipated, and we needed to increase the size of the attached AWS EBS volumes on our instances. Somewhat less pressing than our disk usage was our heap usage, which made us want to increase the memory of each node so that we could allocate more heap space (friendly reminder that it's &lt;a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/heap-sizing.html#compressed_oops"&gt;very important&lt;/a&gt; to keep your heap size below 30.5gb). All the while, we were several versions behind: running 1.3.2 at the time of 1.7.0's release. We figured the best course of action was to tackle all three of these problems at the same time, without any cluster downtime.&lt;/p&gt;
&lt;p&gt;Some caveats before we begin:
 - This only applies to minor version upgrades, like 1.x to 1.x, or 2.x to 2.x. Major version upgrades, like 1.x to 2.x, are more complicated and require a full cluster restart.
 - If you only have one master-eligible node, then taking it down will make your cluster very sad. If you're using the more commonly recommended number of 3 master-eligible nodes, a new one will be elected seamlessly as you take each down individually for upgrades
 - Our infrastructure is hosted on AWS, but the underlying principles are the same across any hardware cluster
 - If you don't already have backups of your production data, do that before thinking about any of this&lt;/p&gt;
&lt;h2&gt;Out with the old, in with the new&lt;/h2&gt;
&lt;p&gt;From a high level, our process looks like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Launch a new, larger EC2 instance based off our current node AMIs, with larger EBS volumes attached&lt;/li&gt;
&lt;li&gt;Upgrade this instance's version of Elasticsearch&lt;/li&gt;
&lt;li&gt;Create a new AMI for our upgraded instance&lt;/li&gt;
&lt;li&gt;Join this new node to our production cluster&lt;/li&gt;
&lt;li&gt;Re-allocate all shards off an older, non-upgraded node&lt;/li&gt;
&lt;li&gt;Allow the cluster to rebalance itself&lt;/li&gt;
&lt;li&gt;Once all nodes have been shipped off the old node, shut it down&lt;/li&gt;
&lt;li&gt;Repeat this process of spawning new instances based off the upgraded AMI until all nodes have been upgraded&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Creating AMIs, launching instances based off of them, and changing instance/volume sizes are steps specific to AWS, and outside the scope of this post. There is a ton of great documentation around these things already available, so I will be skipping over anything detailed on them. Let's get started.&lt;/p&gt;
&lt;p&gt;First, launch a new instance with the specs you want. It makes things easier if you base this instance off an image of a working Elasticsearch node, so that your config settings are retained and you do not forget to install any required dependencies. You don't want this node to join your cluster yet, as you still need to upgrade it. We prevented this by simply not giving it access to our Elasticsearch AWS security groups. Now, let's upgrade our version.&lt;/p&gt;
&lt;p&gt;Elasticsearch has good &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rolling-upgrades.html"&gt;documentation&lt;/a&gt; around how to perform a rolling version upgrade. It's best to follow their steps closely. However, since the node we're upgrading isn't a part of our cluster yet, it's much simpler. We have Elasticsearch installed from their tar packages, so we download the latest version, and place it in a directory next to our current version. We also manage our Elasticsearch processes with &lt;code&gt;supervisor&lt;/code&gt;, so we shut it down as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stop supervisor:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo service supervisor stop&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download and extract the new version:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wget https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.0.tar.gz &amp;amp;&amp;amp; tar xvzf elasticsearch-1.7.0.tar.gz &amp;amp;&amp;amp; rm -f elasticsearch-1.7.0.tar.gz &amp;amp;&amp;amp; sudo mv elasticsearch-1.7.0 /opt/elasticsearch-1.7&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete the new version's config, and copy over your previous config settings:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm /opt/elasticsearch-1.7/config/elasticsearch.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo mv /opt/elasticsearch/config/elasticsearch.yml /opt/elasticsearch-1.7/config/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete the previous version and put the new version in its place:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm -rf /opt/elasticsearch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo mv /opt/elasticsearch-1.7 /opt/elasticsearch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart supervisor:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo service supervisor start&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this newly upgraded node, we create an AMI of this instance so that we don't need to keep performing this manual upgrade process. All new instances going forward should be based off this upgraded image.&lt;/p&gt;
&lt;p&gt;Now, it's time to join this node to the cluster. We add the necessary security groups and watch our cluster health (&lt;code&gt;localhost:9200/_cluster/health?pretty&lt;/code&gt;) show us what's happening. We should see a new data node join the cluster, and our cluster health change from &lt;code&gt;green&lt;/code&gt; to &lt;code&gt;yellow&lt;/code&gt;. The &lt;code&gt;yellow&lt;/code&gt; state happens because of our mismatched version numbers in the cluster. &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rolling-upgrades.html#_step_6_wait_for_the_node_to_recover"&gt;Primary shards assigned to the newer version will not allocate their replica shards to older versioned nodes&lt;/a&gt;. With only one upgraded node, we will have unassigned replica shards. This is remedied once we have two upgraded nodes in the cluster, and health will again return to &lt;code&gt;green&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once our new node has joined the cluster successfully, it's time to shut down one of our old nodes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Re-allocate all shards off the node&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl -XPUT localhost:9200/_cluster/settings -d &amp;#39;{
    &amp;quot;transient&amp;quot; :{
        &amp;quot;cluster.routing.allocation.exclude._ip&amp;quot; : &amp;quot;&amp;lt;IP Address&amp;gt;&amp;quot;
    }
}&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Wait for the cluster to re-balance itself by watching your cluster health (&lt;code&gt;curl localhost:9200/_cluster/health?pretty&lt;/code&gt;) waiting for &lt;code&gt;relocating_shards&lt;/code&gt; to go to 0&lt;/li&gt;
&lt;li&gt;Shut down the node&lt;/li&gt;
&lt;li&gt;Stop and/or terminate the instance, kill the Elasticsearch process, whatever you want to do to decommision this node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it. From here, you can spawn an additional instance based off the already upgraded image, and repeat the process of disabling allocation on an older node and decommissioning them one by one. The same process applies to all nodes, whether master or client or data.&lt;/p&gt;
&lt;p&gt;Enjoy your new cluster!&lt;/p&gt;</summary><category term="elasticsearch"></category><category term="how-to"></category></entry><entry><title>Getting Started with Django REST Framework (DRF) and AngularJS (Part 2)</title><link href="http://engineroom.trackmaven.com/blog/getting-started-drf-angularjs-part-2/" rel="alternate"></link><updated>2016-01-11T00:00:00+01:00</updated><author><name>Tim Butler</name></author><id>tag:engineroom.trackmaven.com,2016-01-11:blog/getting-started-drf-angularjs-part-2/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Read: &lt;a href="/blog/getting-started-drf-angularjs-part-1/"&gt;Part 1 - Initial Project Setup&lt;/a&gt;&lt;/strong&gt;
&lt;strong&gt;Write: &lt;a href="https://github.com/TrackMaven/getting-started-with-drf-angular/tree/part-2"&gt;Part 2 Supplementary Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the second post in a multi-part series geared toward getting started with Django Rest Framework (DRF) and AngularJS.  The goal of this series is to create an extensive, RESTful web application that uses DRF in the server and AngularJS in the client.&lt;/p&gt;
&lt;p&gt;This post focuses on Django, with topics covering&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#project-description"&gt;A Description of Our Series Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#module-creation"&gt;Adding a new Project Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#model-definition"&gt;Defining Database Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrations"&gt;Migrating Database Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#object-creation"&gt;Creating Model Data via the Django ORM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be using Django &lt;code&gt;1.8.5&lt;/code&gt; and Django Rest Framework &lt;code&gt;3.3.0&lt;/code&gt;.  The base directory for our project is named &lt;code&gt;drf-sample&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="project-description"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;A Description of Our Series Project&lt;/h2&gt;
&lt;p&gt;This post begins to outline code that we will be contributing to throughout this series.  You are welcome to create your own project following the ideas and strategies talked about here, but for the purpose of consistency within the series we will be making a single project and adding to it over time.&lt;/p&gt;
&lt;p&gt;Our project is an employee management system for retail chains.  We will need to keep track of multiple retail chains (their name, slogan, website, etc.), each store location within the chain (store number, opening date, address, etc.) and the employees within each store (employee number, name, starting date, etc.).  Each store location may be associated with only a single chain and each employee may work at only a single store at a time.&lt;/p&gt;
&lt;p&gt;Throughout the series, we will create an underlying database for our project, an API to access our data securely from external sources, and single-page app interface that reads and modifies the data.  Of course, these are very high-level requirements and the scope of this project will grow as the series continues!create&lt;/p&gt;
&lt;p&gt;&lt;a name="module-creation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Adding a New Project Module&lt;/h2&gt;
&lt;p&gt;Before we begin coding, we need to create a new module within our project.  Since our project is geared toward retail management, we will name the module &lt;code&gt;retail&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To create a new module within our Django project, we need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new directory within the project structure&lt;/li&gt;
&lt;li&gt;Add the new directory to the list of Djangos installed applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, add the &lt;code&gt;server/retail/&lt;/code&gt; directory to the project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;drf_sample/
├── client
└── server
    ├── retail
    │   └── __init__.py
    ├── config
    ├── __init__.py
    ├── manage.py
    └── urls.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note: Do not forget to create a &lt;code&gt;__init__.py&lt;/code&gt; file inside the new directory.  It will not be recognized as a module without this file.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next, we need to ensure that our project knows that the new directory is meant to be an application module.  The &lt;code&gt;server/config/settings.py&lt;/code&gt; file contains an &lt;code&gt;INSTALLED_APPS&lt;/code&gt; setting which lists of all modules recognized by the project.  A module will only be recognized by the project if it has been included in this setting.  Add the &lt;code&gt;retail&lt;/code&gt; module to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; by including the directory name in the list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;retail&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django will now use the &lt;code&gt;retail&lt;/code&gt; directory to associate code with the &lt;code&gt;retail&lt;/code&gt; application module.&lt;/p&gt;
&lt;p&gt;Let's start coding the module!&lt;/p&gt;
&lt;p&gt;&lt;a name="model-definition"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Defining Database Models&lt;/h2&gt;
&lt;p&gt;Generally, the first step in coding a new module is to create a database schema for the module data using Django &lt;code&gt;Models&lt;/code&gt;.  &lt;code&gt;Models&lt;/code&gt; are classes that Django translates into an underlying relational database tables.  Have no fear; developers very rarely need to worry using SQL to interact with the database.  Instead, interactions with the tables are handled through the Django ORM (more on this later).&lt;/p&gt;
&lt;p&gt;For our module, we want to define three models:  &lt;code&gt;Chain&lt;/code&gt; and &lt;code&gt;Store&lt;/code&gt;, and &lt;code&gt;Employee&lt;/code&gt;.  These models are fairly straight forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Chain&lt;/code&gt; represents a retail chain at a very high level (Target, for example).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Store&lt;/code&gt; represents a single store location of a &lt;code&gt;Chain&lt;/code&gt; (a single Target location).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Employee&lt;/code&gt; represents an individual person working at a &lt;code&gt;Store&lt;/code&gt; (John Doe, the cashier).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To add &lt;code&gt;models&lt;/code&gt; to the new module, create a &lt;code&gt;server/retail/models.py&lt;/code&gt; file and add the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.validators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MaxValueValidator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MinValueValidator&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; High-level retail chain model&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;slogan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;founded_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URLField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Store location model.  Foreign key to Chain.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;opening_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Business hours in a 24 hour clock.  Default 8am-5pm.&lt;/span&gt;
    &lt;span class="n"&gt;business_hours_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;MinValueValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;MaxValueValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;business_hours_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;MinValueValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;MaxValueValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Location employee model.  Foreign key to Store.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hired_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code may seem a bit complicated at first, so let's go through what it all means.&lt;/p&gt;
&lt;p&gt;Each &lt;code&gt;Model&lt;/code&gt; class defines what will become a table in the underlying database and class attributes define columns within the associated table.  Each class attribute is as a &lt;a href="https://docs.djangoproject.com/en/1.8/ref/models/fields/#field-types"&gt;Django Model field type&lt;/a&gt; specifying the column data type along with optional type-specific parameters (such as the maximum length of a character field).  Field types correspond to common SQL column data types, including characters, integers, boolean fields, and date/times.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ForeignKey&lt;/code&gt; field type creates a one-to-many relationship between two models.  In the code above, the &lt;code&gt;Store&lt;/code&gt; model contains a &lt;code&gt;ForeignKey&lt;/code&gt; to the &lt;code&gt;Chain&lt;/code&gt; model.  This means an instance of &lt;code&gt;Store&lt;/code&gt; can be associated with a single &lt;code&gt;Chain&lt;/code&gt; object, but a &lt;code&gt;Chain&lt;/code&gt; can be associated with many &lt;code&gt;Stores&lt;/code&gt;.  Likewise, an instance of &lt;code&gt;Employee&lt;/code&gt; can be associated with a single &lt;code&gt;Store&lt;/code&gt; object, but a &lt;code&gt;Store&lt;/code&gt; may be associated with several &lt;code&gt;Employees&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is best to keep table and column names relevant to the data they store, so make sure that your models and fields follow that same rule.&lt;/p&gt;
&lt;p&gt;&lt;a name="migrations"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Migrating Database Models&lt;/h2&gt;
&lt;p&gt;We have defined our Django &lt;code&gt;Models&lt;/code&gt; to represent the database we want, but we have not used them to create the underlying database schema.  To create our database we will use Django &lt;a href="https://docs.djangoproject.com/en/1.8/topics/migrations/"&gt;Migrations&lt;/a&gt;.  Migrations are a way of synchronizing the database schema with the state of your project &lt;code&gt;Models&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To run the first project migration, run the following two commands from the project root directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python server/manage.py makemigrations retail&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python server/manage.py migrate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
drf-sample$ python server/manage.py makemigrations retail
Migrations for 'retail':
  &lt;strong&gt;0001_initial.py:
    - Create model Chain
    - Create model Employee
    - Create model Store&lt;/strong&gt;
    - Add field store to employee
&lt;/pre&gt;

&lt;pre&gt;
drf-sample$ python server/manage.py migrate
Operations to perform:
  Synchronize unmigrated apps: staticfiles, messages
  Apply all migrations: admin, contenttypes, retail, auth, sessions
Synchronizing apps without migrations:
  Creating tables...
    Running deferred SQL...
  Installing custom SQL...
Running migrations:
  Rendering model states... DONE
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  &lt;strong&gt;Applying retail.0001_initial... OK&lt;/strong&gt;
  Applying sessions.0001_initial... OK
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: For the purpose of this guide, do not worry about manually creating a database.  By default, Django creates a &lt;code&gt;db.sqlite3&lt;/code&gt; file containing a local SQL DB to be used by the project.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Excellent, let's go over the output from the commands.  During the first command, we can see that a migration file is created, &lt;code&gt;retail.0001_initial&lt;/code&gt;, and three &lt;code&gt;models&lt;/code&gt; were created in the file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Create model Chain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Create model Employee&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Create model Store&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During the second command, the migration file is applied.  This means our tables have been created in the database!&lt;/p&gt;
&lt;p&gt;The output also shows a lot of other migrations.  Django requires a few models to run correctly.  Do not worry about these other migrations for now.  Just know that they are used internally by Django and for user permissions.&lt;/p&gt;
&lt;p&gt;That is all we need to do with our models for now!  Whenever a &lt;code&gt;retail&lt;/code&gt; model changes, such as when a new field is added to a model, the above migration commands must be executed again to ensure that the underlying database is kept up to date with the updated model definition.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The &lt;code&gt;makemigrations&lt;/code&gt; command creates a &lt;code&gt;migrations&lt;/code&gt; directory in the &lt;code&gt;retail&lt;/code&gt; module.  This new directory holds versioned migration files keeping track of all model changes over time.  The &lt;code&gt;migrate&lt;/code&gt; command executes all migrations within the directory &lt;strong&gt;in order&lt;/strong&gt; to ensure consistent results.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="object-creation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Creating Model Data via the Django ORM&lt;/h2&gt;
&lt;p&gt;Tables without data are not very interesting.  Let's take a moment to go over the Django ORM and add objects to our models.&lt;/p&gt;
&lt;p&gt;To interact with the Django ORM, we can use the Django shell.  The Django shell opens a Python interactive shell that sets the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; environment variable allowing use of our &lt;code&gt;server/config/settings.py&lt;/code&gt; file configurations.  Otherwise, the Django shell is everything you'd expect from a normal python shell.&lt;/p&gt;
&lt;p&gt;To open the Django shell, run the &lt;code&gt;python server/manage.py shell&lt;/code&gt; command from the project root folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python server/manage.py shell
Python 2.7.6 &lt;span class="o"&gt;(&lt;/span&gt;default, Jun &lt;span class="m"&gt;22&lt;/span&gt; 2015, 17:58:13&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GCC 4.8.2&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&lt;span class="o"&gt;(&lt;/span&gt;InteractiveConsole&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, interact with the &lt;code&gt;Chain&lt;/code&gt; model.  Import &lt;code&gt;Chain&lt;/code&gt; and create an instance of the &lt;code&gt;Chain&lt;/code&gt; model with all column values filled in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;retail.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cafe Amazing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Founded to serve the best sandwiches.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slogan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The best cafe in the USA!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;founded_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2014-12-04T20:55:17Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.thecafeamazing.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instantiating an object does not automatically save the object to the database.  A Django model must be explicitly saved before its data is committed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; chain.save()
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great!  Now we have created a &lt;code&gt;Chain&lt;/code&gt; object and stored it in the database!  It's as easy as that.  We check that the object was created as expected by querying from the database using the Django database API.  From the Django shell, model objects can be queried using the format &lt;code&gt;&amp;lt;model_class&amp;gt;.objects.&amp;lt;query_type&amp;gt;&lt;/code&gt;.  For example, to query for all &lt;code&gt;Chain&lt;/code&gt; objects, we can use &lt;code&gt;Chain.objects.all()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result of &lt;code&gt;.all()&lt;/code&gt; returns a list of all objects of the specified model type.  From the output, it looks likes we have a list of one object!  Let's make sure that object is what we previously saved.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# store the first object in the list of Chains&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;Cafe Amazing&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;Founded to serve the best sandwiches.&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slogan&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;The best cafe in the USA!&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;founded_date&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;2014-12-04T20:55:17Z&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;http://www.thecafeamazing.com&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note: By default, Django applies an &lt;code&gt;ID&lt;/code&gt; to the model object when saved to the database.  This becomes the primary key of the object within the model type.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;More on querying objects through the Django shell can be found in the &lt;a href="https://docs.djangoproject.com/en/1.8/topics/db/queries/"&gt;Making Queries documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, let's make a &lt;code&gt;Store&lt;/code&gt; object that is a member of the &lt;code&gt;Chain&lt;/code&gt; we previously created.  Remember that the &lt;code&gt;Store&lt;/code&gt; model object needs a reference to a &lt;code&gt;Chain&lt;/code&gt;, so we must pass it a saved &lt;code&gt;Chain&lt;/code&gt; object.  We can use a &lt;code&gt;.get(name='Cafe Amazing')&lt;/code&gt; query to retrieve the desired &lt;code&gt;Chain&lt;/code&gt; object based on chain name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Cafe Amazing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;retail.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Store&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AB019&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1234 French Quarter Terrace Columbia MD&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opening_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2015-12-04T22:55:17Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="s"&gt;u&amp;#39;AB019&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, let's make an Employee object.  Remember that we must provide it a saved &lt;code&gt;Store&lt;/code&gt; reference and we can use a &lt;code&gt;.get(number='AB019')&lt;/code&gt; query to retrieve the desired &lt;code&gt;Store&lt;/code&gt; object based on store number.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;AB019&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;retail.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;026546&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hired_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2015-12-04T00:00:00Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="s"&gt;u&amp;#39;026546&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look great!  We have now created three objects within our database.&lt;/p&gt;
&lt;h2&gt;Looking Forward&lt;/h2&gt;
&lt;p&gt;A lot was covered in this post so this is a great point to end on.  Look for the next post soon, covering API endpoint creation, including views, serializers, and URL routing for the &lt;code&gt;Retail&lt;/code&gt; application.&lt;/p&gt;</summary><category term="django"></category><category term="django rest framework"></category><category term="angularjs"></category></entry><entry><title>Using pytest with Django</title><link href="http://engineroom.trackmaven.com/blog/using-pytest-with-django/" rel="alternate"></link><updated>2015-12-08T00:00:00+01:00</updated><author><name>Cameron Maske</name></author><id>tag:engineroom.trackmaven.com,2015-12-08:blog/using-pytest-with-django/</id><summary type="html">&lt;p&gt;When it comes to testing in python &lt;a href="http://pytest.org/latest/"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; is my favorite testing tool. &lt;code&gt;pytest&lt;/code&gt; is a testing framework that strips out boilerplate and adds a whole bunch of sensible utilities to make your tests more pythonic. In this post we'll cover how to add that awesomeness to a Django project.&lt;/p&gt;
&lt;h3&gt;Comparing &lt;code&gt;unitest&lt;/code&gt; to &lt;code&gt;pytest&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def test_hello_world():
    assert &amp;quot;hello_world&amp;quot; == &amp;quot;hello_world&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our newer Django projects we've been using &lt;code&gt;pytest&lt;/code&gt; instead of the default test runner. Django's prefer testing is built on top of &lt;a href="https://github.com/django/django/blob/2ab244ff3a799b1a49550a7e7582c4b46e402197/django/test/testcases.py#L155"&gt;unittest&lt;/a&gt;. Luckily for any &lt;code&gt;pytest&lt;/code&gt; fans, this makes it easy to have &lt;code&gt;pytest&lt;/code&gt; be a drop in &lt;a href="https://pytest.org/latest/unittest.html"&gt;replacement&lt;/a&gt; without having to change a single test.&lt;/p&gt;
&lt;h1&gt;How?&lt;/h1&gt;
&lt;p&gt;Let's dive into how you can setup &lt;code&gt;pytest&lt;/code&gt; on your Django projects. For this post, I've created an repo with a dummy Django 1.8 &lt;a href="https://github.com/TrackMaven/using-pytest-with-django"&gt;project&lt;/a&gt;.  It's local development environment is managed by &lt;a href="http://engineroom.trackmaven.com/blog/a-better-development-environment-with-docker-and-fig/"&gt;Docker + Docker Compose.&lt;/a&gt;. All code examples are pulled from there.&lt;/p&gt;
&lt;p&gt;We'll need one more library in addition to &lt;code&gt;pytest&lt;/code&gt;  to get everything working smoothly with Django. &lt;a href="https://pytest-django.readthedocs.org"&gt;&lt;code&gt;pytest-django&lt;/code&gt;&lt;/a&gt; takes care of replicating &lt;a href="https://docs.djangoproject.com/en/1.8/topics/testing/tools/#transactiontestcase"&gt;Django's existing testing functionality&lt;/a&gt; into &lt;code&gt;pytest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our &lt;a href="https://github.com/TrackMaven/using-pytest-with-django/blob/master/requirements-dev.txt"&gt;&lt;code&gt;requirements-dev.txt&lt;/code&gt;&lt;/a&gt; we've can add in the two packages to be installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pytest==2.7.2
pytest-django==2.8.0
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;These were the latest versions when this post was written, be sure to check pypi if either &lt;a href="https://pypi.python.org/pypi/pytest"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://pypi.python.org/pypi/pytest-django"&gt;&lt;code&gt;pytest-django&lt;/code&gt;&lt;/a&gt; have been updated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We need to bootstrap &lt;code&gt;pytest&lt;/code&gt; with our Django project &lt;a href="https://docs.djangoproject.com/en/1.8/topics/settings/"&gt;settings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pytest-django&lt;/code&gt;'s documentation &lt;a href="https://pytest-django.readthedocs.org/en/latest/configuring_django.html"&gt;recommends&lt;/a&gt; a few different ways to achieve this. I'd advocate loading them in through a global &lt;code&gt;conftest.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;pytest&lt;/code&gt; any &lt;code&gt;conftest.py&lt;/code&gt; files are invoked before any tests are run. They provide a convenient method to setup hooks or configure any settings for our tests.
Where the &lt;code&gt;conftest.py&lt;/code&gt; lives dictates the scope of where it applies. If present in the root test folder, hooks declared will apply to all tests. If present in a specific module, hooks will only apply to tests in that module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;tests/
├── conftest.py # Applies to all tests
└── example/
    ├── conftest.py # Applies only to tests in this module/folder.
    ├── test_foo.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our case, we want the &lt;a href="https://github.com/TrackMaven/using-pytest-with-django/blob/master/tests/conftest.py"&gt;&lt;code&gt;conftest.py&lt;/code&gt;&lt;/a&gt; to apply to all tests therefore we place it in our tests root directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="c"&gt;# We manually designate which settings we will be using in an environment variable&lt;/span&gt;
&lt;span class="c"&gt;# This is similar to what occurs in the `manage.py`&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;app.config.settings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c"&gt;# `pytest` automatically calls this function once when tests are run.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pytest_configure&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="c"&gt;# If you have any test specific settings, you can declare them here,&lt;/span&gt;
    &lt;span class="c"&gt;# e.g.&lt;/span&gt;
    &lt;span class="c"&gt;# settings.PASSWORD_HASHERS = (&lt;/span&gt;
    &lt;span class="c"&gt;#     &amp;#39;django.contrib.auth.hashers.MD5PasswordHasher&amp;#39;,&lt;/span&gt;
    &lt;span class="c"&gt;# )&lt;/span&gt;
    &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;# Note: In Django =&amp;lt; 1.6 you&amp;#39;ll need to run this instead&lt;/span&gt;
    &lt;span class="c"&gt;# settings.configure()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If setup correctly, you should now be able to run the test suite. Instead of running tests through &lt;code&gt;manage.py&lt;/code&gt; you run them through the &lt;code&gt;py.test&lt;/code&gt; command directly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose run web py.test
&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
platform linux -- Python 3.3.6 -- py-1.4.30 -- pytest-2.7.2
rootdir: /code, inifile:
plugins: django
collected &lt;span class="m"&gt;3&lt;/span&gt; items

tests/integration_tests/example/test_models.py ..
tests/unit_tests/example/test_helpers.py .

&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; passed in 2.95 &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To run a specific test in a module/file, you just include the path after the command, like so &lt;code&gt;py.test &amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;docker-compose run web py.test tests/integration_tests/example/test_models.py
=== test session starts ===
platform linux -- Python 3.3.6 -- py-1.4.30 -- pytest-2.7.2
rootdir: /code/tests/integration_tests/example, inifile:
plugins: django
collected 2 items

tests/integration_tests/example/test_models.py ..

=== 2 passed in 2.92 seconds ===
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To run a specific test, point &lt;code&gt;py.test&lt;/code&gt; to a specific file and test name, like so &lt;code&gt;py.test &amp;lt;path_to_file&amp;gt;::&amp;lt;name_of_test&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose run web py.test tests/integration_tests/example/test_models.py::test_save
&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
platform linux -- Python 3.3.6 -- py-1.4.30 -- pytest-2.7.2
rootdir: /code/tests/integration_tests/example, inifile:
plugins: django
collected &lt;span class="m"&gt;2&lt;/span&gt; items

tests/integration_tests/example/test_models.py .

&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; passed in 2.94 &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Existing tests.&lt;/h3&gt;
&lt;p&gt;As mentioned previously, any existing Django &lt;code&gt;unittest&lt;/code&gt; style tests will work out of the box. Here is an &lt;a href="https://github.com/TrackMaven/using-pytest-with-django/blob/master/tests/integration_tests/example/test_models.py"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Any existing `unittest` style tests still work without any changes needed.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Maven&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;corgi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Maven&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# You can mix in pytest&amp;#39;s `assert` approach!&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breed&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;corgi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Database testing&lt;/h4&gt;
&lt;p&gt;One key difference to watch out for is running &lt;code&gt;pytest&lt;/code&gt; style tests against the database.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;pytest-django&lt;/code&gt; takes a conservative approach to enabling database access in tests.  Any &lt;code&gt;pytest&lt;/code&gt; style tests will fail if they try to access the database.
In order to allow database access to a test, you need add a &lt;a href="http://pytest.org/latest/mark.html"&gt;&lt;code&gt;py.test mark&lt;/code&gt;&lt;/a&gt; decorator like so...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;example.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;


&lt;span class="c"&gt;# If your tests need to use the database and want to use pytest&lt;/span&gt;
&lt;span class="c"&gt;# function test approach, you need to `mark` it.&lt;/span&gt;
&lt;span class="nd"&gt;@pytest.mark.django_db&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_save&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;maven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Maven&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;corgi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Maven&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breed&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;corgi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! You can now take full advantage of &lt;code&gt;pytest&lt;/code&gt; in your Django project.&lt;/p&gt;</summary><category term="django"></category><category term="pytest"></category></entry><entry><title>Mocking Mistakes</title><link href="http://engineroom.trackmaven.com/blog/mocking-mistakes/" rel="alternate"></link><updated>2015-12-01T00:00:00+01:00</updated><author><name>Jon Evans</name></author><id>tag:engineroom.trackmaven.com,2015-12-01:blog/mocking-mistakes/</id><summary type="html">&lt;p&gt;I've discussed the value of using Python's &lt;code&gt;mock&lt;/code&gt; library for testing in a couple of previous articles &lt;a href="http://engineroom.trackmaven.com/blog/making-a-mockery-of-python/"&gt;Making a Mockery of Python&lt;/a&gt; and &lt;a href="http://engineroom.trackmaven.com/blog/real-life-mocking/"&gt;Real Life Mocking&lt;/a&gt;. Recently, however, a &lt;a href="http://engineroom.trackmaven.com/blog/real-life-mocking/#comment-2310097361"&gt;kind commenter&lt;/a&gt; brought to my attention an insidious error in my example code. Having looked into this sneaky mistake, I wanted to briefly discuss it - hopefully I can prevent other developers encountering similar pitfalls!&lt;/p&gt;
&lt;h2&gt;Mock mocks everything&lt;/h2&gt;
&lt;p&gt;The best way to explain the mistake is to look closely at an intended property of mock objects: whatever method or property we request from them, they will happily oblige us, regardless of whether that method/property exists on the object we are mocking. If we have explicitly set a &lt;code&gt;return_value&lt;/code&gt; for a method, or set a property, we will get back what we set. If we haven't, however, we'll just get a &lt;code&gt;mock.Mock&lt;/code&gt; object back:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mock.foo&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;139896826878440&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mock.bar()&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;139896827174864&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason this is useful is because when we are replacing a complex object with a mock object, we don't have to define all of the methods and properties on it - only the ones we care about in our test. The rest of the calls to the object will just respond silently with new mock objects.&lt;/p&gt;
&lt;h2&gt;Mocking the unexpected&lt;/h2&gt;
&lt;p&gt;The problem occurs when we mix in the fact that mock objects also have their own, built-in methods used for verification: for example, the &lt;code&gt;assert_called_once_with&lt;/code&gt; method is used to check that a mock was called exactly once with a specific set of arguments. This is all well and good, until we accidentally use a verification method that doesn't actually exist...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;assert_called_once_with&lt;/code&gt; is a special verification method, so naturally &lt;code&gt;assert_called_once&lt;/code&gt; is a verification method too, right? Wrong. &lt;code&gt;assert_called_once&lt;/code&gt; is nowhere to be found in the &lt;a href="https://docs.python.org/3/library/unittest.mock.html"&gt;mock documentation&lt;/a&gt;. However, if we call it in our test, when we're expecting a mocked method to be called once, the test will pass. What we think is happening is that the method was called once, and everything is fine. What is actually happening is that the method could have been called 100 times, or not called at all. The test is passing because &lt;code&gt;assert_called_once()&lt;/code&gt; silently returns a mock object, just like &lt;code&gt;m.bar()&lt;/code&gt; in our example above. It's not actually checking anything.&lt;/p&gt;
&lt;p&gt;This mistake has completely blindsided me in the past. In fact, looking over some of my old code, I found several examples of having used &lt;code&gt;assert_called_once&lt;/code&gt;, as well as the equally innocuous-looking &lt;code&gt;assert_not_called&lt;/code&gt; - another non-existent verification method.&lt;/p&gt;
&lt;h2&gt;Mitigating mistaken mocks&lt;/h2&gt;
&lt;p&gt;Having learned about this mistake, how do we mitigate it? Fortunately, it's easy to replace &lt;code&gt;mock.assert_called_once()&lt;/code&gt; with &lt;code&gt;assert mock.call_count == 1&lt;/code&gt; - a statement that will only return true if the mock has actually been called once. Similarly, &lt;code&gt;mock.assert_not_called()&lt;/code&gt; can be replaced with &lt;code&gt;assert mock.call_count == 0&lt;/code&gt;. This solution was highlighted in &lt;a href="http://engineeringblog.yelp.com/2015/02/assert_called_once-threat-or-menace.html"&gt;this post&lt;/a&gt; on the Yelp engineering blog. Since learning about it, I've started incorporating this style of assertion into all cases where I want to check how often something was called, but don't care about what arguments it was called with.&lt;/p&gt;
&lt;p&gt;An alternative is to use the &lt;a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing"&gt;&lt;code&gt;autospec&lt;/code&gt; property&lt;/a&gt; of the mock object. From the &lt;code&gt;mock&lt;/code&gt; documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Auto-speccing creates mock objects that have the same attributes and methods as the objects they are replacing, and any functions and methods (including constructors) have the same call signature as the real object. This ensures that your mocks will fail in the same way as your production code if they are used incorrectly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we use the &lt;code&gt;autospec=True&lt;/code&gt; argument in our &lt;code&gt;@mock.patch&lt;/code&gt; decorator, our mock object will only exhibit the methods that actually exist on the original object we are replacing. Actual methods and properties specific to mock objects, like &lt;code&gt;assert_called_once_with&lt;/code&gt; and &lt;code&gt;call_count&lt;/code&gt;, are still accessible as well. However, methods that don't exist natively on the &lt;code&gt;mock.Mock&lt;/code&gt; object &lt;em&gt;or&lt;/em&gt; on the object being replaced will throw errors if they are called. Let's look at an example in a test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClientTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;client.MyAPIClient._create_headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autospec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_client_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mock_create_headers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyAPIClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://engineroom.trackmaven.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;mock_create_headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This means that &lt;code&gt;assert_called_once&lt;/code&gt; and &lt;code&gt;assert_not_called&lt;/code&gt; are exposed as the deceptive fake methods that they were all along. The test above will fail as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python tests.py
...E
&lt;span class="o"&gt;======================================================================&lt;/span&gt;
ERROR: test_client_get &lt;span class="o"&gt;(&lt;/span&gt;__main__.ClientTestCase&lt;span class="o"&gt;)&lt;/span&gt;
----------------------------------------------------------------------
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;/home/jonathan/.virtualenvs/blog_posts/local/lib/python2.7/site-packages/mock.py&amp;quot;&lt;/span&gt;, line 1201, in patched
    &lt;span class="k"&gt;return&lt;/span&gt; func&lt;span class="o"&gt;(&lt;/span&gt;*args, **keywargs&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;tests.py&amp;quot;&lt;/span&gt;, line 47, in test_client_get
    mock_create_handlers.assert_called_once&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/home/jonathan/.virtualenvs/blog_posts/local/lib/python2.7/site-packages/mock.py&amp;quot;&lt;/span&gt;, line 658, in __getattr__
    raise AttributeError&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mock object has no attribute %r&amp;quot;&lt;/span&gt; % name&lt;span class="o"&gt;)&lt;/span&gt;
AttributeError: Mock object has no attribute &lt;span class="s1"&gt;&amp;#39;assert_called_once&amp;#39;&lt;/span&gt;

----------------------------------------------------------------------
Ran &lt;span class="m"&gt;4&lt;/span&gt; tests in 0.004s

FAILED &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Autospeccing is useful for more things than preventing cheeky errors, so definitely take a look at it.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Have you been bitten by non-existent mock methods? Let me know in the comments!&lt;/p&gt;</summary><category term="testing"></category><category term="mock"></category></entry><entry><title>Getting Started with Django REST Framework (DRF) and AngularJS (Part 1)</title><link href="http://engineroom.trackmaven.com/blog/getting-started-drf-angularjs-part-1/" rel="alternate"></link><updated>2015-11-10T00:00:00+01:00</updated><author><name>Tim Butler</name></author><id>tag:engineroom.trackmaven.com,2015-11-10:blog/getting-started-drf-angularjs-part-1/</id><summary type="html">&lt;p&gt;This is the first section in a series about getting started with &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, &lt;a href="http://www.django-rest-framework.org/"&gt;Django REST Framework (DRF)&lt;/a&gt; and &lt;a href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt;.  The goal of this series to to create an extensive, RESTful web application that uses Django and Django REST Framework as the server application and AngularJS for the client application.  We will not be using Django templates here; our front- and back-end applications will be separate entities.&lt;/p&gt;
&lt;p&gt;For this project, we will be using Django &lt;code&gt;1.8.5&lt;/code&gt; and Django REST Framework &lt;code&gt;3.3.0&lt;/code&gt;.  Further, this guide assumes you have installed standard python development tools and &lt;a href="https://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Goals of this Section&lt;/h2&gt;
&lt;p&gt;This section focuses on Django, covering the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Brief introduction to Django, Django REST Framework, and AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project-creation"&gt;Initial project setup and creation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#folder-structure"&gt;Folder structure modification to support both front- and back-end development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="introduction"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;A Brief Introduction: Django, DRF and AngularJS&lt;/h2&gt;
&lt;p&gt;RESTful APIs have become increasingly popular among modern web applications since they provide a standard means to interact with resources across applications.  Conforming to RESTful constraints can create web applications that are both high-performing and maintainable.  The Django and DRF frameworks provide developers with fast and secure ways to create RESTful web applications packed full of useful features, such as an extensive ORM, serialization, custom authentication and permissions classes, and browsable APIs among others.&lt;/p&gt;
&lt;p&gt;Think of Django as the database manager for your server.  The Django ORM provides powerful ways to locally setup and manage database tables and the data within them.  DRF is the external window into your database.  DRF provides the means to create powerful APIs to access application data while allowing developers to customize permissions, authentication, filtering, and more.  AngularJS if a front-end framework that provides two-way data binding between HTML and Javascript to dynamically display data.&lt;/p&gt;
&lt;p&gt;At TrackMaven, we use Django and DRF as the main backend frameworks for our web application development and AngularJS for front-end development.  Through these, we find that web application development is both straight-forward and extensible enough to fit into our growing demands while maintaining RESTful principles.&lt;/p&gt;
&lt;p&gt;&lt;a name="project-creation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Setting up a New Project&lt;/h2&gt;
&lt;h3&gt;Creating an Initial Project&lt;/h3&gt;
&lt;p&gt;Getting started with Django and DRF is quite easy.  Django provides a startup script that builds a starter project with default configurations, an initial &lt;code&gt;/admin/&lt;/code&gt; API endpoint, and a management command file for running the application.&lt;/p&gt;
&lt;p&gt;To start, let's create a virtual environment for our sample project and download our required packages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkvirtualenv drf-sample
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install &lt;span class="nv"&gt;django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.8.5
&lt;span class="nv"&gt;$ &lt;/span&gt;pip install &lt;span class="nv"&gt;djangorestframework&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;3.3.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within the virtual environment, we can run the Django start-up script to create a new project named &lt;code&gt;drf_sample&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject drf_sample
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now have a new project folder named &lt;code&gt;drf_sample&lt;/code&gt; with the following structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;drf_sample/
├── drf_sample
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── manage.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool, but what do these files actually do?&lt;/p&gt;
&lt;dl&gt;
  &lt;dt&gt;settings.py&lt;/dt&gt;
  &lt;dd style="padding: 0 0 10px 25px;"&gt;Contains Django/DRF settings and specifies where various project modules are located.  Additional information on the file can be found in the &lt;a href="https://docs.djangoproject.com/en/1.8/topics/settings/"&gt;Django Settings documentation&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;urls.py&lt;/dt&gt;
  &lt;dd style="padding: 0 0 10px 25px;"&gt;The URL dispatcher for the project API.  Pre-loaded with an &lt;em&gt;/admin/&lt;/em&gt; endpoint for project administration.&lt;/dd&gt;
  &lt;dt&gt;wsgi.py&lt;/dt&gt;
  &lt;dd style="padding: 0 0 10px 25px;"&gt;Uses &lt;a href="http://wsgi.readthedocs.org/en/latest/"&gt;WSGI&lt;/a&gt; to define the runnable application server.&lt;/dd&gt;
  &lt;dt&gt;manage.py&lt;/dt&gt;
  &lt;dd style="padding: 0 0 10px 25px;"&gt;Provides command-line options for administrators to setup/run the application server and sync the database with our Django model definitions.  More information on this file can be found in the &lt;a href="https://docs.djangoproject.com/en/1.8/ref/django-admin/"&gt;Django Admin documentation&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;a name="folder-structure"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Fitting the Directory Structure to our Needs&lt;/h2&gt;
&lt;p&gt;The default Django project folder structure is quite minimal and doesn't give us an easy way to organize server code vs client code within the same project.  Remember, our goal is to create a web application that supports both server and client as two separate applications within the same project, so a differentiation between server and client code is preferred.&lt;/p&gt;
&lt;p&gt;Why use separate applications?  Simple answer: cleaniless, decoupling and consistency.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keeping the server and client code separate makes for a cleaner development environment.&lt;/li&gt;
&lt;li&gt;Other than the API contract ensured by the server, the code for the front- and back-end contains little-to-no dependencies between each other.  If the server goes down, the client can still function and report an outtage if necessary.&lt;/li&gt;
&lt;li&gt;Our server application provides a specific contract as to how data within the server can be accessed.  The client will use that contract to access the data it needs to display on the front-end.  All other applications accessing server data will use the same contract.  Server data access remains consistent irregardless of the application accessing the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Update the Directory Structure&lt;/h4&gt;
&lt;p&gt;Let's modify the default project folder structure to support our separate applications.  The modified folder structure should look like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;drf_sample/
├── client
└── server
    ├── config
    │   ├── __init__.py
    │   ├── settings.py
    │   └── wsgi.py
    ├── __init__.py
    ├── manage.py
    └── urls.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note: At this point, our &lt;code&gt;__init__.py&lt;/code&gt; files are blank, so create them where necessary.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The updated structure separates our newly created Django server project from our future development space for the AngularJS client.  All Django and DRF development is done in the &lt;code&gt;server&lt;/code&gt; directory while all front-end AngularJS development is done in the &lt;code&gt;client&lt;/code&gt; directory.&lt;/p&gt;
&lt;h4&gt;Fix the Default Module Links&lt;/h4&gt;
&lt;p&gt;Various parts of a Django application need to link to other modules within the project.  The default project setup used default links based on the original project structure.  Modifying the structure has caused those links to break.  Moving forward, we will ensure that all new module links conform to the new directory structure, but the current broken links must be fixed before we move on.  The following line changes will fix our issues:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In server/config/settings.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ROOT_URLCONF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;urls&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
&lt;span class="n"&gt;ROOT_URLCONF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;server.urls&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wsgi.application&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
&lt;span class="n"&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;config.wsgi.application&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;In server/config/wsgi.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;drf_sample.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;In server/manage.py:&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;drf_sample.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;config.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can test that our new links work by using &lt;code&gt;manage.py&lt;/code&gt; from the terminal to run the project server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python server/manage.py runserver

Performing system checks...

System check identified no issues &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; silenced&lt;span class="o"&gt;)&lt;/span&gt;.

You have unapplied migrations&lt;span class="p"&gt;;&lt;/span&gt; your app may not work properly &lt;span class="k"&gt;until&lt;/span&gt; they are applied.
Run &lt;span class="s1"&gt;&amp;#39;python manage.py migrate&amp;#39;&lt;/span&gt; to apply them.

November 02, &lt;span class="m"&gt;2015&lt;/span&gt; - 20:36:56
Django version 1.8, using settings &lt;span class="s1"&gt;&amp;#39;config.settings&amp;#39;&lt;/span&gt;
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perfect!  Our project is now ready to support both server and client code.&lt;/p&gt;
&lt;h2&gt;Looking Forward&lt;/h2&gt;
&lt;p&gt;Our project is in a good spot to begin development!  Look for to the next post soon, covering database model definition, model migration to the underlying SQL backend and model object creation through the python Django ORM.&lt;/p&gt;</summary><category term="django"></category><category term="django rest framework"></category><category term="angularjs"></category></entry><entry><title>Monthly Challenge: Functional Programming</title><link href="http://engineroom.trackmaven.com/blog/monthly-challenge-functional-programming/" rel="alternate"></link><updated>2015-08-05T00:00:00+02:00</updated><author><name>Josh Finnie</name></author><id>tag:engineroom.trackmaven.com,2015-08-05:blog/monthly-challenge-functional-programming/</id><summary type="html">&lt;p&gt;Our topic for this month's &lt;a href="http://www.meetup.com/TrackMaven-Monthly-Challenge/"&gt;Monthly Challenge meetup&lt;/a&gt; is Functional Programming! In this post, we'll get you started with one of the many languages out there dedicated to functional programming: &lt;a href="https://www.haskell.org/"&gt;Haskell&lt;/a&gt;! Here at TrackMaven, we write most of our code in Python and JavaScript, which are both capable of writing functional programming in their own right, but with the true spirit of our Monthly Challenges, I am going to write about a language that I am not super familiar with and see what we can do with it.&lt;/p&gt;
&lt;h3&gt;What is Functional Programming&lt;/h3&gt;
&lt;p&gt;But first, what is functional programming and why are we dedicating an entire Monthly Challenge to the topic? Functional Programming is the practices of writing code using solely functions avoiding both changing state and mutable data. &lt;sup&gt;[&lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;1&lt;/a&gt;]&lt;/sup&gt; Having side-effect free functions being the building blocks of your code can ease the difficulty found in some complicated problems. However, using the functional programming paradigm is quite different from the standard paradigm of Object Orientated programming and hopefully this blog post will give you a nice primer for it.&lt;/p&gt;
&lt;p&gt;Within the world of functional programming, there are a few "heavy-hitters" to choose from. As I said above, in this blog post we are going to focus on Haskell, but there are many more; here is a list of a few I recommend you checking out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://fsharp.org/"&gt;F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocaml.org/"&gt;OCaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.erlang.org/"&gt;Erlang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://clojure.org/"&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;First Functional Program&lt;/h3&gt;
&lt;p&gt;Let's jump right in and get our feet wet with Haskell! The first thing we want to do in make sure Haskell is installed on our machine. To do this, simply go to &lt;a href="https://www.haskell.org/platform/"&gt;this website&lt;/a&gt; and download the Haskell Platform for your operating system. Once installed you should be able to run &lt;code&gt;ghci&lt;/code&gt; and get into the interactive Haskell compiler called "Glasgow Haskell Compiler."&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ghci
GHCi, version 7.10.1: http://www.haskell.org/ghc/  :? &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;help&lt;/span&gt;
Prelude&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once in the interactive compiler, we can start to use Haskell. Using the built-in function &lt;code&gt;putStrLn&lt;/code&gt;, we can print out "Hello World!" simply by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;
&lt;span class="kt"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have written your first Haskel program. Sure it wasn't that impressive, but I hope it portrayed the functional programming paradigm. &lt;code&gt;putStrLn&lt;/code&gt; in a function that takes an argument of type "String". To see a function's &lt;a href="https://wiki.haskell.org/Type_signature"&gt;signature&lt;/a&gt;, just run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt;  
&lt;span class="nf"&gt;putStrLn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The signature of the function shows its "name" (&lt;code&gt;putStrLn&lt;/code&gt;), its "argument(s) type" (&lt;code&gt;String&lt;/code&gt;) and its "output type" (&lt;code&gt;IO ()&lt;/code&gt;). Using this becomes helpful later on as you interact with and create custom functions. Next, let's get a little more in-depth (and away from "Hello World") and take a look at the factorial algorithm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="mi"&gt;3628800&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here you can see we have defined a simple function called &lt;code&gt;fac&lt;/code&gt; which will calculate the factorial of a given number. The awesome thing about this function is that we even recursively calls it to help with the calculation. Seeing the ease in which a factorial is calculated really starts to make you believe that the functional programming paradigm is something to look forward to.&lt;/p&gt;
&lt;h3&gt;Functional Programming IRL&lt;/h3&gt;
&lt;p&gt;Now that we have a few examples under our belt, let's take a look at where you might have seen the functional programming paradigm before. If you are familiar with the python web development ecosystem you are probably familiar with the argument between these two programming paradigms. &lt;/p&gt;
&lt;p&gt;In &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, there are two main ways to go about programming a &lt;code&gt;view&lt;/code&gt;, there are Class-Based &lt;code&gt;view&lt;/code&gt;s and there are functional &lt;code&gt;view&lt;/code&gt;s. Each of them has their benefits and drawbacks, but it does a great job at illustrating the differences between function programming and object oriented programming. When dealing with a individual viewpoint of a website, it is easy to thing of it as a singleton function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;It is now {}.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above example, you have a function that explicitly deals with a single response. Its job is to accept a request and respond with an HTML template with the current time. Class-Based views within the Django ecosystem came along as the complexity of web applications grew. As endpoints had to deal with different request methods, you started to see a lot of duplication in your code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# &amp;lt;view logic&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# &amp;lt;view logic&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And class-based inheritance, something you cannot get in pure functional programming, you were allowed to simplify your code through inheritance to something that looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# &amp;lt;view logic&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# &amp;lt;view logic&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, your logic is cleaner, but you are left with the programmatic black-box that is &lt;code&gt;View&lt;/code&gt;. This is a class that was provided to you through the Django framework and is now starting to add a lot of weight to your application where a functional programming paradigm works just as well. And to this day, the debate on whether or not CBVs are the proper way to write views in Django carries on.&lt;/p&gt;
&lt;h3&gt;More Haskell&lt;/h3&gt;
&lt;p&gt;Now let's have a little more fun with Haskell. We are going to write a simple command-line game where we are going to try and guess the number the computer is thinking of. To do this, let's create a file named &lt;code&gt;guess-the-number.hs&lt;/code&gt; and copy in the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Random&lt;/span&gt;  
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="nf"&gt;isValidNumber&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="nf"&gt;testGuessedNumber&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You&amp;#39;re correct!&amp;quot;&lt;/span&gt;
        &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sorry, the correct answer was &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;  
    &lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getStdGen&lt;/span&gt;  
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randomR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;StdGen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     
    &lt;span class="n"&gt;putStr&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Which number in the range from 1 to 10 am I thinking of? &amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;numberString&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getLine&lt;/span&gt;  
    &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="n"&gt;numberString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;  
        &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;numberString&lt;/span&gt;  
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isValidNumber&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
            &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;testGuessedNumber&lt;/span&gt; &lt;span class="n"&gt;randNumber&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
            &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Please select a number between 1 and 10!&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;newStdGen&lt;/span&gt;  
        &lt;span class="n"&gt;main&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now run this program through our Haskell interpreter by running the following command &lt;code&gt;runhaskell guess_the_number.hs&lt;/code&gt;. Doing so, we should be prompted to guess a number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We put in some basic validation, so give it a go and see what happens!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;runhaskell guess_the_number.hs
Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of? 2
You&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;re correct!
Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of? 1
Sorry, the correct answer was 6
Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of? 11
Please &lt;span class="k"&gt;select&lt;/span&gt; a number between &lt;span class="m"&gt;1&lt;/span&gt; and 10!
Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of? -1
Please &lt;span class="k"&gt;select&lt;/span&gt; a number between &lt;span class="m"&gt;1&lt;/span&gt; and 10!
Which number in the range from &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="m"&gt;10&lt;/span&gt; am I thinking of? a
guess_the_number.hs: Prelude.read: no parse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The validation does a pretty good job as long as we put in numbers, but we crashed the application when we inputed a letter. There are obvious improvements we could make to our validation, but I am going to leave that up to you.&lt;/p&gt;
&lt;h3&gt;Even More Haskell&lt;/h3&gt;
&lt;p&gt;I wanted to make the above program a little more "haskellonic" (like pythonic, but for Haskell...) So I took a lot of the functions we created above, gave them proper signatures and added a little recursion!&lt;/p&gt;
&lt;p&gt;Below is the finished program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Random&lt;/span&gt;  

&lt;span class="nf"&gt;randomNumber&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;-- chosen by fair dice roll.&lt;/span&gt;
                 &lt;span class="c1"&gt;-- guaranteed to be random.&lt;/span&gt;

&lt;span class="nf"&gt;isValidNumber&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;isValidNumber&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;       &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;

&lt;span class="nf"&gt;testGuessedNumber&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;testGuessedNumber&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;

&lt;span class="nf"&gt;getInt&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;getInt&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getLine&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;  
    &lt;span class="n"&gt;putStr&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Which number in the range from 1 to 10 am I thinking of? &amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getInt&lt;/span&gt; 
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isValidNumber&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
        &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;randomNumber&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
        &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;please select a number between 1 and 10.&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You Win!&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You guessed incorrectly, please try again.&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getInt&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;outcome&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testGuessedNumber&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As one can see, I had some issues with randomness in Haskell (among other things...), but above it at least a much more well-rounded example of Haskell code where you can start to see some of the benefits.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I have to say that I was impressed with the syntax and ease of (most parts of) Haskell, but I have to admit I am not jumping ship anytime soon. This could be because I didn't give it the true time it deserved, or it could be because I am so spoiled with Python. What are your thoughts about Functional Programming? &lt;/p&gt;
&lt;p&gt;Please &lt;a href="mailto:engineroom@trackmaven.com"&gt;let us know&lt;/a&gt; if you have tried out anything interesting using functional programming - bonus points if you include an open-source repo. You can see what we did for the TrackMaven Monthly Challenge here: &lt;a href="http://challenge.hackpad.com"&gt;challenge.hackpad.com&lt;/a&gt;&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>Real Life Mocking</title><link href="http://engineroom.trackmaven.com/blog/real-life-mocking/" rel="alternate"></link><updated>2015-02-24T00:00:00+01:00</updated><author><name>Jon Evans</name></author><id>tag:engineroom.trackmaven.com,2015-02-24:blog/real-life-mocking/</id><summary type="html">&lt;p&gt;In a &lt;a href="http://engineroom.trackmaven.com/blog/making-a-mockery-of-python/"&gt;previous post&lt;/a&gt; we discussed a basic use case for Python's fantastic &lt;code&gt;mock&lt;/code&gt; library, showing how mock objects are useful for isolating components of an application and creating clean unit tests. By testing against the fake interface provided by a mock object, we can check how our functions are called, provide idealised outputs, and make sure that our unit tests are testing what we think they're testing.&lt;/p&gt;
&lt;p&gt;That said, it's unlikely that in real life, the height of complexity of our unit tests will be checking if two numbers multiply correctly. This post will cover some ways that we use &lt;code&gt;mock&lt;/code&gt; in our test suite at TrackMaven, examining a common case where &lt;code&gt;mock&lt;/code&gt; really shines by replacing a slow, complex, or variable component - the HTTP request.&lt;/p&gt;
&lt;h2&gt;What are we testing?&lt;/h2&gt;
&lt;p&gt;Building a web application that gathers data from an external source invariably involves interfacing with third-party APIs. Fortunately, making HTTP requests is a piece of cake in Python thanks to the &lt;a href="http://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt; library. However, when the time comes to test functionality that talks to an external service, the last thing we want is to actually talk to it. We care about testing how &lt;em&gt;our&lt;/em&gt; code handles different, specific responses. Tying these tests to real requests means that we have no control over what type of response is returned: a test of code that handles a 200 OK response will not pass if the API endpoint is down, changes its structure, or returns a different response. While it may be important for us to know the state of an API, it is outside the scope of testing our own code's handling of responses.&lt;/p&gt;
&lt;p&gt;For this reason, we can use &lt;code&gt;mock&lt;/code&gt; to replace the result of an API call. There are many ways to do this, so let's look at an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# client.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyAPIClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A simple API client for querying corgi data&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://api.corgidata.com&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;v1&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_make_uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Construct the URL for a resource based on the API class&amp;#39;s parameters&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Make a GET request to an endpoint defined by &amp;#39;url&amp;#39;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_breed_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return information about a specific breed of corgi&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;breeds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_make_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above is a simple API client class for querying an (unfortuately fictional) API of corgi data. We are interested in testing the flow of our &lt;code&gt;_get&lt;/code&gt; function to make sure that it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calls the correct URL&lt;/li&gt;
&lt;li&gt;Attempts to deserialize the response JSON into Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently our function is pretty simple. We could test it by just pointing it at the URL, calling it and checking that the response looks like we expect. However, this will be slow, and put our test at the mercy of a fickle third-party service. Instead, we will use &lt;code&gt;mock&lt;/code&gt; to patch &lt;code&gt;requests.get&lt;/code&gt; and replace it with our own, fake response object.&lt;/p&gt;
&lt;p&gt;N.B. if you are following along at home, you want a directory structure like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── client.py
├── __init__.py
└── tests.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Testing a successful call&lt;/h2&gt;
&lt;p&gt;Here is the contents of our &lt;code&gt;tests.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# tests.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MyAPIClient&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClientTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyAPIClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;client.requests.get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Test getting a 200 OK response from the _get method of MyAPIClient.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c"&gt;# Construct our mock response object, giving it relevant expected&lt;/span&gt;
        &lt;span class="c"&gt;# behaviours&lt;/span&gt;
        &lt;span class="n"&gt;mock_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;expected_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;breeds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;pembroke&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;cardigan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expected_dict&lt;/span&gt;

        &lt;span class="c"&gt;# Assign our mock response as the result of our patched function&lt;/span&gt;
        &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_response&lt;/span&gt;

        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://api.corgidata.com/breeds/&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;response_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Check that our function made the expected internal calls&lt;/span&gt;
        &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# If we want, we can check the contents of the response&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What is going on in this test?&lt;/p&gt;
&lt;p&gt;First of all, we see the hopefully familiar &lt;code&gt;mock.patch&lt;/code&gt; decorator - however, the argument to the decorator looks slightly different to the example in the &lt;a href="http://engineroom.trackmaven.com/blog/making-a-mockery-of-python/"&gt;previous post&lt;/a&gt;. This is because we are patching a function in a different file from the test case: the &lt;code&gt;client.requests.get&lt;/code&gt; represents the path to the method we want to replace - in this case in &lt;code&gt;client.py&lt;/code&gt;. But hang on! &lt;code&gt;requests.get&lt;/code&gt; is defined in a third party package, not in our &lt;code&gt;client&lt;/code&gt; module! This is true, but the &lt;code&gt;requests&lt;/code&gt; module is being imported into &lt;code&gt;client.py&lt;/code&gt; and called from that location. We always patch our functions, classes and methods in the place that they are &lt;em&gt;used&lt;/em&gt;, rather than where they are defined. This can be a confusing distinction, but it is actually fairly well explained in the &lt;a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch"&gt;mock documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once we get inside our test, we have to set up our fake response object. To do this, we use mock in a different way: as an object. &lt;code&gt;mock.Mock()&lt;/code&gt; gives us an object, similar to that dropped in by the &lt;code&gt;patch&lt;/code&gt; decorator, to which we can attach arbitrary methods and variables. In our HTTP test, we use this mock object to recreate the requisite behaviors we want from our idealised response. Unlike making a real HTTP call, we now have complete control of the structure and behavior of the response, which is perfect for testing the logic of our &lt;code&gt;_get&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;In order to make sure that it's working properly, we need to make sure that the mock response from our patched &lt;code&gt;requests.get&lt;/code&gt; has a &lt;code&gt;.json&lt;/code&gt; method. The following lines let us define an ideal response, and assign it as the return value of our mock response's &lt;code&gt;json&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;expected_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;breeds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;pembroke&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;cardigan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expected_dict&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can be extremely useful if we need to define a deserialized response that looks like real data, for example if we want to check how it is manipulated later in the function.&lt;/p&gt;
&lt;p&gt;After calling the &lt;code&gt;_get&lt;/code&gt; method in our test, we check that it called the &lt;code&gt;requests.get&lt;/code&gt; method, as well as making sure it called our &lt;code&gt;.json&lt;/code&gt; method on our mock response.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how we can make sure that any mock methods are called with the correct arguments, in this case making sure we requested the correct &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The final piece of the puzzle is to check that the result of &lt;code&gt;_get&lt;/code&gt; is the same as our dummy deserialized data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since our &lt;code&gt;_get&lt;/code&gt; method doesn't modify the data in any way, this is currently a guaranteed result. However, it is still useful as a regression test. If we change the method in any way, we want to make sure that we still end up with our deserialized data being passed out. Checking outputs gives us the confidence to change the method, knowing that our test will tell us if we make a breaking change.&lt;/p&gt;
&lt;h2&gt;Testing an exception&lt;/h2&gt;
&lt;p&gt;This seems like an awful lot of time and effort to test a two-line function. Our test is considerably longer than our &lt;code&gt;_get&lt;/code&gt; method - what's the point of that?&lt;/p&gt;
&lt;p&gt;The value of testing code in this way is that it allows us to easily iterate on both the code, as well as the tests, while being confident that our code still works. As soon as our code gets more complicated, we can make sure that it is still working in a way that we expect, and it's easy to specify new conditions that we want our test to meet.&lt;/p&gt;
&lt;p&gt;Let's illustrate this with an example. What if we want to add some error handling to our &lt;code&gt;_get&lt;/code&gt; method, to make sure that we can recover from an HTTP error like a 404 or a 500? Here's our new, expanded method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Make a GET request to an endpoint defined by &amp;#39;url&amp;#39;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raise_for_status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_http_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also define a HTTP error handler method on &lt;code&gt;MyAPIClient&lt;/code&gt;. For the purposes of this demonstration, it doesn't matter what this does since we will be mocking it out - in practice, this could raise a custom exception or perform cleanup logic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_http_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Handle a HTTP error&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How can we test that this new error handling works? First, let's rerun our success test and make sure that our changes haven't broken successful HTTP request handling. Once we've confirmed that this works, we can write a second test to prove that errors are handled correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomHTTPException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClientTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;client.MyAPIClient._handle_http_error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;client.requests.get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_http_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_http_error_handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Test getting a HTTP error in the _get method of MyAPIClient.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c"&gt;# Construct our mock response object, giving it relevant expected&lt;/span&gt;
        &lt;span class="c"&gt;# behaviours&lt;/span&gt;
        &lt;span class="n"&gt;mock_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;http_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raise_for_status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http_error&lt;/span&gt;

        &lt;span class="c"&gt;# Assign our mock response as the result of our patched function&lt;/span&gt;
        &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_response&lt;/span&gt;

        &lt;span class="c"&gt;# Make our patched error handler raise a custom exception&lt;/span&gt;
        &lt;span class="n"&gt;mock_http_error_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CustomHTTPException&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://api.corgidata.com/breeds/&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomHTTPException&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Check that our function made the expected internal calls&lt;/span&gt;
        &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raise_for_status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Make sure we did not attempt to deserialize the response&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Make sure our HTTP error handler is called&lt;/span&gt;
        &lt;span class="n"&gt;mock_http_error_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our second test looks a lot like the test for a successful call. We are still making a mock response and giving it behaviours, and then making sure our method calls the correct internal functions. However, this test introduces a couple of new mocking tactics. Firstly, we are stacking &lt;code&gt;mock.patch&lt;/code&gt; decorators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;client.MyAPIClient._handle_http_error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;client.requests.get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_http_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_http_error_handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks to the power of decorators, we can mock an arbitrary number of functions with the &lt;code&gt;patch&lt;/code&gt; method. In this case, we want to make sure that our client's &lt;code&gt;_handle_http_error&lt;/code&gt; is called if an error is caught, as well as continuing to mock &lt;code&gt;requests.get&lt;/code&gt;. We can just stack another decorator above our original one, and add a new argument to our test - the second mocked function. It is pretty crucial to note the &lt;strong&gt;order&lt;/strong&gt; of the decorators and arguments to the test. The &lt;strong&gt;top-most&lt;/strong&gt; mocked function corresponds to the &lt;strong&gt;right-most&lt;/strong&gt; test argument. When mocking multiple functions, make sure that the decoratos and arguments are correctly lined up, or you might see some confusing and unexpected behaviour!&lt;/p&gt;
&lt;p&gt;Secondly, let's take a closer look at the mock response's &lt;code&gt;raise_for_status&lt;/code&gt; definition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;http_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raise_for_status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http_error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are no longer using &lt;code&gt;return_value&lt;/code&gt;; instead, the method has a &lt;code&gt;side_effect&lt;/code&gt;. &lt;code&gt;side_effect&lt;/code&gt; is a very cool mocking trick that allows us to assign an exception to a method - when the method is called, the exception will be raised. In our test, this gives us the power to enter the &lt;code&gt;except&lt;/code&gt; case of our &lt;code&gt;_get&lt;/code&gt; method, and make sure that our handling of &lt;code&gt;HTTPError&lt;/code&gt; is correct. &lt;code&gt;side_effect&lt;/code&gt; has other powers, which we will take a look at in our third and final example.&lt;/p&gt;
&lt;p&gt;Finally, we are making our patched &lt;code&gt;_handle_http_error&lt;/code&gt; function throw a custom exception as its side effect. We can check that this exception was raised using a context manager:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomHTTPException&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes sure that the &lt;code&gt;_get&lt;/code&gt; function exits with our custom exception when we introduce an &lt;code&gt;HTTPError&lt;/code&gt;. Not only does this provide additional checking that our mock handler was called: it also allows us to make sure that further changes to the function won't break the error handling effects we expect.&lt;/p&gt;
&lt;h2&gt;Testing a loop&lt;/h2&gt;
&lt;p&gt;Our &lt;code&gt;_get&lt;/code&gt; method is looking more robust to exceptions, and we've tested it for both successful and erroneous HTTP responses. However, connections are tricky beasts - they could disappear temporarily due to the vagaries of the internets, or take a very long time to return a response due to server or network slowness. We want our &lt;code&gt;_get&lt;/code&gt; method to deal with these facts, and retry a call if it fails with a connection error or timeout. Here's the final version of the method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Make a GET request to an endpoint defined by &amp;#39;url&amp;#39;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;retries&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raise_for_status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_http_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;retries&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_connection_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And let's not forget to add a &lt;code&gt;_handle_connection_error&lt;/code&gt; method to &lt;code&gt;MyAPIClient&lt;/code&gt;, to deal with the situation where we've used up all of our retries. Once again, this will just be a stub for the purposes of this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_connection_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Handle a persistent connection error or timeout&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we're going to need to test to make sure our &lt;code&gt;_get&lt;/code&gt; method handles &lt;code&gt;ConnectionError&lt;/code&gt; or &lt;code&gt;Timeout&lt;/code&gt; correctly. Our first two tests should still pass to cover the success and &lt;code&gt;HTTPError&lt;/code&gt; cases. Can't we just add a third test that throws one of the two errors we are trying to handle? Unfortunately, no we can't. There is more than one new logical pathway specified by our retry loop:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;ConnectionError&lt;/code&gt; or &lt;code&gt;Timeout&lt;/code&gt; is raised 3 times and then &lt;code&gt;_handle_connection_error&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;ConnectionError&lt;/code&gt; or &lt;code&gt;Timeout&lt;/code&gt; is raised 1 or 2 times and then a request is successful.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;ConnectionError&lt;/code&gt; or &lt;code&gt;Timeout&lt;/code&gt; is raised 1 or 2 times and then a request returns a &lt;code&gt;HTTPError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these imply us needing our mock &lt;code&gt;requests.get&lt;/code&gt; to be called multiple times in a test, and sometimes to return or raise different things! What madness is this?!&lt;/p&gt;
&lt;p&gt;First let's consider the test for a persistent connection failure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomConnException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClientTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;client.MyAPIClient._handle_connection_error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;client.requests.get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_connection_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_conn_error_handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Test getting a persistent connection error in the _get method of&lt;/span&gt;
&lt;span class="sd"&gt;    MyAPIClient.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# Make our patched `requests.get` raise a connection error&lt;/span&gt;
    &lt;span class="n"&gt;conn_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn_error&lt;/span&gt;

    &lt;span class="c"&gt;# Make our patched error handler raise a custom exception&lt;/span&gt;
    &lt;span class="n"&gt;mock_conn_error_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CustomConnException&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://api.corgidata.com/breeds/&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomConnException&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Check that our function made the expected internal calls&lt;/span&gt;
    &lt;span class="n"&gt;expected_calls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_calls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Make sure our connection error handler is called&lt;/span&gt;
    &lt;span class="n"&gt;mock_conn_error_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We've now made our patched &lt;code&gt;requests.get&lt;/code&gt; raise a &lt;code&gt;ConnectionError&lt;/code&gt; every time it is called. In this version of the test, we want to end up by calling our error handler &lt;strong&gt;after&lt;/strong&gt; having called &lt;code&gt;requests.get&lt;/code&gt; not once, but three times. How can we check that the patched function was called the correct number of times, with the correct arguments each time? We need to use mock's &lt;code&gt;call&lt;/code&gt; object. This allows us to create an arbitary representation of a call to a mocked function. If we make a list of these &lt;code&gt;call&lt;/code&gt; objects, we can compare the list to the &lt;code&gt;call_args_list&lt;/code&gt; property of our patched function to see if it was called how we expected, in the order we expected.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;expected_calls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_calls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While in this case we are only checking three of the same call, in practice we could check any combination of calls with different arguments.&lt;/p&gt;
&lt;p&gt;Now we're on the home stretch. We just need to cover the case of a &lt;code&gt;ConnectionError&lt;/code&gt; occurring, followed by a successful call. This means we're going to have to manipulate our patched &lt;code&gt;requests.get&lt;/code&gt; into first raising an error, and then returning a mock result when called again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;client.requests.get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_connection_error_then_success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Test getting a connection error, then a successful response,&lt;/span&gt;
&lt;span class="sd"&gt;        in the _get method of MyAPIClient.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c"&gt;# Construct our mock response object for the success case&lt;/span&gt;
        &lt;span class="n"&gt;mock_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;expected_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;breeds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;pembroke&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;cardigan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expected_dict&lt;/span&gt;

        &lt;span class="c"&gt;# Make an instance of ConnectionError for our failure case&lt;/span&gt;
        &lt;span class="n"&gt;conn_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;# Give our patched get a list of behaviours to display&lt;/span&gt;
        &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;conn_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://api.corgidata.com/breeds/&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;response_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Check that our function made the expected internal calls&lt;/span&gt;
        &lt;span class="n"&gt;expected_calls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_calls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Check the result&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we've combined the mock behaviours from our success example and our connection error example, and used &lt;code&gt;side_effect&lt;/code&gt; to get the patched &lt;code&gt;requests.get&lt;/code&gt; to exhibit different behaviours on consecutive calls. On the first two calls to the function in the test, it will raise a &lt;code&gt;ConnectionError&lt;/code&gt;. On the final call, it will return a good response.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mock_get&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;conn_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_response&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wow. Now we have a test suite that covers successful responses, intermittent connections, and HTTP error responses, without having to make a single real HTTP call. These tests will &lt;strong&gt;always&lt;/strong&gt; behave the same, and should allow us to make whatever changes we want to our &lt;code&gt;_get&lt;/code&gt; method while being sure that the core functionality stays solid. If you want to practice what we've learned, try defining the final test case: a &lt;code&gt;ConnectionError&lt;/code&gt; followed by a &lt;code&gt;HTTPError&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Wait, what did we test?&lt;/h2&gt;
&lt;p&gt;We've covered a whole load of things in this post, using a constructed example to illustrate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mock.Mock()&lt;/code&gt; as an object&lt;/li&gt;
&lt;li&gt;stacking &lt;code&gt;mock.patch&lt;/code&gt; decorators&lt;/li&gt;
&lt;li&gt;using &lt;code&gt;side_effect&lt;/code&gt; to raise an exception from a patched function&lt;/li&gt;
&lt;li&gt;using &lt;code&gt;mock.call()&lt;/code&gt; to test calling a function multiple times&lt;/li&gt;
&lt;li&gt;using &lt;code&gt;side_effect&lt;/code&gt; (again) to return different behaviours from the same function when it is called multiple times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phew! That's a lot to take in. In real life, you may not want to unit test each of your functions with this level of rigour. However, in some cases, you might. Imagine that &lt;code&gt;MyAPIClient&lt;/code&gt; is not just for looking up corgi data. Instead, it's an abstract class that powers all of your requests to many different APIs. With a comprehensive test suite of its core behaviours, we can be extremely confident that anything build on top of it will be stable and fail gracefully in a variety of failure modes. All this, thanks to the power and flexibility of the mock library! It's no wonder they included it in Python 3!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;How do you use mock to make awesome unit tests? Did I miss a particularly powerful feature you'd like me to talk about? Just want to make 'mock' puns? Visit the comments section!&lt;/p&gt;</summary><category term="testing"></category><category term="mock"></category></entry><entry><title>Monthly Challenge: Mobile Development</title><link href="http://engineroom.trackmaven.com/blog/monthly-challenge-mobile-development/" rel="alternate"></link><updated>2015-02-17T00:00:00+01:00</updated><author><name>Fletcher Heisler</name></author><id>tag:engineroom.trackmaven.com,2015-02-17:blog/monthly-challenge-mobile-development/</id><summary type="html">&lt;p&gt;TrackMaven's next &lt;a href="www.meetup.com/TrackMaven-Monthly-Challenge/"&gt;Monthly Challenge&lt;/a&gt; meetup will cover &lt;a href="http://www.meetup.com/TrackMaven-Monthly-Challenge/events/219945053/"&gt;mobile development&lt;/a&gt;. To help kickstart some projects, in this post I'll cover the basics of one way to get started creating a cross-platform mobile app.&lt;/p&gt;
&lt;p&gt;We'll be using &lt;a href="http://ionicframework.com/"&gt;Ionic&lt;/a&gt;, a framework for making beautiful, responsive mobile apps using HTML5 and AngularJS. Ionic sits on top of &lt;a href="http://cordova.apache.org/"&gt;Cordova&lt;/a&gt; and has a &lt;a href="http://ionicframework.com/blog/what-is-cordova-phonegap/"&gt;complicated relationship&lt;/a&gt; with &lt;a href="http://phonegap.com/"&gt;PhoneGap&lt;/a&gt;, both of which can also be used individually for writing cross-platform mobile applications. A few other possible options for getting started in mobile development:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jlongster.com/First-Impressions-using-React-Native"&gt;React Native&lt;/a&gt; is (as of this post) not yet publicly released but shows tremendous promise&lt;/li&gt;
&lt;li&gt;Go native with the &lt;a href="http://developer.android.com/sdk/index.html"&gt;Android SDK&lt;/a&gt; and start &lt;a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOS/index.html"&gt;jumping through hoops&lt;/a&gt; to develop on Apple's iOS&lt;/li&gt;
&lt;li&gt;Try out &lt;a href="http://kivy.org/"&gt;Kivy&lt;/a&gt; for writing mobile (and non-mobile) apps in Python! I personally haven't had great luck getting Kivy apps to compile on multiple devices, but it's definitely an appealing concept&lt;/li&gt;
&lt;li&gt;Appcelerator's &lt;a href="http://www.appcelerator.com/titanium/"&gt;Titanium&lt;/a&gt; uses a JavaScript-based SDK and covers iOS, Android, Windows, BlackBerry and HTML5; I haven't tried it out, but have heard that in some cases (especially on older devices) it may be more performant than Ionic, being a step or two closer to native code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this Ionic example, we're going to cover the following:
- Push a sample app to iOS and Android emulators + devices (without forking over $99 to Apple)
- Set up custom styles using Sass
- Convert the sample JS to CoffeeScript with automatic gulp compilation
- Add custom icons and a splash screen&lt;/p&gt;
&lt;p&gt;Let's get to it!&lt;/p&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;First off, you'll need to have &lt;a href="http://nodejs.org/"&gt;Node.js&lt;/a&gt; installed, then install the &lt;code&gt;ionic&lt;/code&gt; NPM package:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo npm install -g cordova ionic&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can now create a new Ionic project using one of three templates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blank&lt;/code&gt; - you guessed it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabs&lt;/code&gt; - includes a title header bar and "home", "star", and "settings" buttons on a footer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sidemenu&lt;/code&gt; - includes a collapsible lefthand sidebar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ionic start myprojectname sidemenu
cd myprojectname/
ionic serve&lt;/p&gt;
&lt;p&gt;After changing into the &lt;code&gt;myprojectname&lt;/code&gt; directory (or whatever you want to name it), running &lt;code&gt;ionic serve&lt;/code&gt; will start up the sample project on localhost and automatically open the running app in your browser. Ship it!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One important note: when testing your app locally, because of &lt;a href="http://enable-cors.org/"&gt;CORS&lt;/a&gt; rules, you won't be able to access any external data. For instance, calling an API or even loading in a picture from the web will be blocked by default on most browsers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a few ways around this; for instance, you &lt;em&gt;could&lt;/em&gt; use JSONP instead of &lt;code&gt;$http&lt;/code&gt; calls, mess with request headers, load up a separate brower without CORS protection... &lt;strong&gt;or&lt;/strong&gt; my preferred method: just use a &lt;a href="https://chrome.google.com/webstore/detail/cors-toggle/omcncfnpmcabckcddookmnajignpffnh?hl=en"&gt;Chrome plugin&lt;/a&gt; to toggle CORS on and off. This isn't the most secure, idea, so make sure you're only purposefully allowing cross domain requests while testing your app, not browsing the web.&lt;/p&gt;
&lt;h2&gt;Run it on iOS&lt;/h2&gt;
&lt;p&gt;Before diving into the code, let's make sure we can get the app on all our devices. For loading the project onto an iOS device, the first steps is to &lt;a href="https://developer.apple.com/xcode/downloads/"&gt;have XCode&lt;/a&gt;. Next you'll need to add iOS as a platform for the Ionic project and build the project for iOS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ionic platform add ios
ionic build ios
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a &lt;code&gt;.xcodeproj&lt;/code&gt; file in &lt;code&gt;/platform/ios&lt;/code&gt;. Optionally, you can install and run the iOS simulator to run the app within an on-screen iDevice of choice:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;npm install -g ios-sim
ionic emulate ios
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get the project running on a physical iDevice, previously you would have had to sign up for a $99 developer license, then build/load the project onto the device from within XCode. However, Ionic has recently released a wonderful workaround in their &lt;a href="http://ionicframework.com/blog/view-app-is-alive/"&gt;Ionic View for iOS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the Ionic View app, you can first sign up for an account with Ionic &lt;a href="https://apps.ionic.io/signup"&gt;here&lt;/a&gt;, then &lt;a href="https://itunes.apple.com/us/app/ionic-view/id849930087"&gt;download the free app&lt;/a&gt; from the iTunes store onto your device of choice. Finally, just run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ionic upload&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You'll need to authenticate your Ionic account, then the project will be uploaded &lt;a href="http://apps.ionic.io/projects"&gt;here&lt;/a&gt; and available for viewing/testing from within Ionic View on the iOS device!&lt;/p&gt;
&lt;h2&gt;Run it on Android&lt;/h2&gt;
&lt;p&gt;First, let's get dependencies set up. We'll need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ant.apache.org/bindownload.cgi"&gt;ant&lt;/a&gt;; run &lt;code&gt;ant -version&lt;/code&gt; to check if you have it already&lt;/li&gt;
&lt;li&gt;the &lt;a href="http://developer.android.com/sdk/index.html"&gt;Android SDK&lt;/a&gt;; if you're using brew, run &lt;code&gt;brew install android-sdk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;all default selected packages from Android's package manager. Run &lt;code&gt;android&lt;/code&gt; to enter the manager; you may need to run this command multiple times to re-enter the package manager and get all the defaults installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we can add &lt;code&gt;android&lt;/code&gt; as a platform to the Ionic project:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ionic platform add android&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you get the error: 
&lt;code&gt;Error: ANDROID_HOME is not set and "android" command not in your PATH.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You'll need to add the path to &lt;code&gt;android&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;. To find the right location, run &lt;code&gt;android&lt;/code&gt; and note the root folder of the SDK, then find the full path to the specific tool; for me, having installed through &lt;code&gt;brew&lt;/code&gt;, the path to add was &lt;code&gt;/usr/local/Cellar/android-sdk/r21.1/tools&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we can build the project for Android:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ionic build android&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Optionally, if you want to use an Android emulator to test on various devices, we can set up an "AVD" - an Android Virtual Device. Full details are available &lt;a href="http://developer.android.com/tools/devices/managing-avds-cmdline.html"&gt;here&lt;/a&gt;, but the short version is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;android list targets&lt;/code&gt; to get a list of possible images along with IDs&lt;/li&gt;
&lt;li&gt;Choose an image and run &lt;code&gt;android create avd -n {name} -t {ID}&lt;/code&gt;, where {name} is for instance "myandroid" and {ID} is the target ID number.&lt;/li&gt;
&lt;li&gt;Some platforms have multiple ABIs (like choosing an API, but at the machine code level), in which case you'll need to specify one using the &lt;code&gt;-b&lt;/code&gt; flag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an example, I used:
&lt;code&gt;android create avd -n andefault1 -t 2 -b default/armeabi-v7a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finally, spin up the emulator:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ionic emulate android&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To get the app running on a physical Android device, plug the device into USB and run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ionic run android&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If nothing happens, you might need to swipe the device's top menu down and select an option like "charge only" mode. You can use the Android debugger to list all available devices and check if the phone is being recognized:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb devices -l&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Roll your own Sass&lt;/h2&gt;
&lt;p&gt;We've still got a default template! We can customize the styling of the app using &lt;a href="http://sass-lang.com/guide"&gt;Sass&lt;/a&gt;. To get set up, first run this intuitive command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ionic setup sass&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;All of our Sass will be loaded in the file &lt;code&gt;./scss/ionic.app.scss&lt;/code&gt; - this will point to &lt;code&gt;www/lib/ionic/scss&lt;/code&gt; for &lt;em&gt;many&lt;/em&gt; separate SCSS files that can all be customized in style. Take a look at the color definitions at the top of &lt;code&gt;www/lib/ionic/scss/_variables.scss&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$light&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                           &lt;span class="mh"&gt;#fff&lt;/span&gt; &lt;span class="nv"&gt;!default&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$stable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                          &lt;span class="mh"&gt;#f8f8f8&lt;/span&gt; &lt;span class="nv"&gt;!default&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$positive&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                        &lt;span class="mh"&gt;#4a87ee&lt;/span&gt; &lt;span class="nv"&gt;!default&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$calm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                            &lt;span class="mh"&gt;#43cee6&lt;/span&gt; &lt;span class="nv"&gt;!default&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$balanced&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                        &lt;span class="mh"&gt;#66cc33&lt;/span&gt; &lt;span class="nv"&gt;!default&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$energized&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                       &lt;span class="mh"&gt;#f0b840&lt;/span&gt; &lt;span class="nv"&gt;!default&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$assertive&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                       &lt;span class="mh"&gt;#ef4e3a&lt;/span&gt; &lt;span class="nv"&gt;!default&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$royal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                           &lt;span class="mh"&gt;#8a6de9&lt;/span&gt; &lt;span class="nv"&gt;!default&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$dark&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                            &lt;span class="mh"&gt;#444&lt;/span&gt; &lt;span class="nv"&gt;!default&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a quick and highly visible win, we can change around the hex codes in this file to modify the app's main color palette.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;ionic serve&lt;/code&gt; will use &lt;a href="http://gulpjs.com/"&gt;gulp&lt;/a&gt; to check for and automatically recompile any Sass changes.&lt;/p&gt;
&lt;h2&gt;Set up CoffeeScript&lt;/h2&gt;
&lt;p&gt;At TrackMaven, we write a lot of &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; instead of raw JavaScript; this tends to save a lot of time/eyesore/etc if you know what you're doing, especially coming from a Python background. So, let's set up this Ionic project to compile &lt;code&gt;coffee&lt;/code&gt; files into JS!&lt;/p&gt;
&lt;p&gt;First, some minor updates to the main page, &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;css/ionic.app.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lib/ionic/js/ionic.bundle.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cordova.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/app.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;ng-app=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ion-nav-view&amp;gt;&amp;lt;/ion-nav-view&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we just renamed &lt;code&gt;ng-app&lt;/code&gt; from "starter" and point to a (future) compiled &lt;code&gt;app.js&lt;/code&gt; file rather than individual JS files.&lt;/p&gt;
&lt;p&gt;Now, move the current &lt;code&gt;app.js&lt;/code&gt; and &lt;code&gt;controllers.js&lt;/code&gt; files to a new folder &lt;code&gt;/www/coffee&lt;/code&gt; and rename then to have &lt;code&gt;.coffee&lt;/code&gt; extensions. We could leave them as-is, since JavaScript is valid CoffeeScript, but let's convert them to actual CoffeeScript so that we can more easily make modifications later.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app.coffee&lt;/code&gt; ends up looking something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ionic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;app.controllers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;($ionicPlatform) -&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;$ionicPlatform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;# Hide the accessory bar by default (remove this to show the accessory bar above the keyboard&lt;/span&gt;
    &lt;span class="c1"&gt;# for form inputs)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cordova&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cordova&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Keyboard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;cordova&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Keyboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hideKeyboardAccessoryBar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusBar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# org.apache.cordova.statusbar required&lt;/span&gt;
      &lt;span class="nx"&gt;StatusBar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;styleDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;($stateProvider, $urlRouterProvider) -&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;$stateProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;url: &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;abstract: &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;templateUrl: &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;templates/menu.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;controller: &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;AppCtrl&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;app.search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;url: &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/search&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;views: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;#39;menuContent&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;templateUrl: &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;templates/search.html&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;app.browse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;url: &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/browse&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;views: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;#39;menuContent&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;templateUrl: &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;templates/browse.html&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;app.playlists&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;url: &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/playlists&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;views: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;#39;menuContent&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;templateUrl: &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;templates/playlists.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;controller: &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PlaylistsCtrl&amp;#39;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;app.single&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;url: &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/playlists/:playlistId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;views: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;#39;menuContent&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;templateUrl: &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;templates/playlist.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;controller: &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PlaylistCtrl&amp;#39;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="c1"&gt;# if none of the above states are matched, use this as the fallback&lt;/span&gt;
  &lt;span class="nx"&gt;$urlRouterProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;otherwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/app/playlists&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While our &lt;code&gt;controllers.coffee&lt;/code&gt; file is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;app.controllers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;AppCtrl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;($scope, $ionicModal, $timeout) -&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;# Form data for the login modal&lt;/span&gt;
  &lt;span class="nv"&gt;$scope.loginData = &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="c1"&gt;# Create the login modal that we will use later&lt;/span&gt;
  &lt;span class="nx"&gt;$ionicModal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromTemplateUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;templates/login.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;scope: &lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;(modal) -&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;$scope.modal = &lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# Triggered in the login modal to close it&lt;/span&gt;
  &lt;span class="nv"&gt;$scope.closeLogin = &lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;# Open the login modal&lt;/span&gt;
  &lt;span class="nv"&gt;$scope.login = &lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;# Perform the login action when the user submits the login form&lt;/span&gt;
  &lt;span class="nv"&gt;$scope.doLogin = &lt;/span&gt;&lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Doing login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeLogin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PlaylistsCtrl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;($scope) -&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;$scope.playlists = &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;title: &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Reggae&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;title: &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Chill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;title: &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Dubstep&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PlaylistCtrl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;($scope, $stateParams) -&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to set up CoffeeScript auto-compilation to get our &lt;code&gt;.coffee&lt;/code&gt; files loaded into &lt;code&gt;app.js&lt;/code&gt; whenever a change is made. In &lt;code&gt;/gulpfile.js&lt;/code&gt;, add the following:&lt;/p&gt;
&lt;p&gt;At the top with the other global variable declarations:
&lt;code&gt;var coffee = require('gulp-coffee');&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add a folder to the compilation paths:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var paths = {
  sass: [&amp;#39;./scss/**/*.scss&amp;#39;],
  coffee: [&amp;#39;./www/**/*.coffee&amp;#39;]
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add &lt;code&gt;coffee&lt;/code&gt; to the &lt;code&gt;watch&lt;/code&gt; task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;coffee&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then add the full &lt;code&gt;coffee&lt;/code&gt; task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;coffee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;bare&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;app.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./www/js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, you'll need to add &lt;code&gt;gulp-coffee&lt;/code&gt;:
&lt;code&gt;npm install gulp-coffee --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then make sure that &lt;code&gt;gulp-coffee&lt;/code&gt; has been added to &lt;code&gt;package.json&lt;/code&gt; as a dependency. Now run &lt;code&gt;ionic serve&lt;/code&gt; and make changes to the &lt;code&gt;.coffee&lt;/code&gt; files to automatically recompile &lt;code&gt;app.js&lt;/code&gt; and reload the app!&lt;/p&gt;
&lt;h2&gt;Add custom icons and splash screen&lt;/h2&gt;
&lt;p&gt;This step used to be a hassle to manage, but Ionic has &lt;a href="http://ionicframework.com/blog/automating-icons-and-splash-screens/"&gt;recently automated&lt;/a&gt; nearly the entire process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a root &lt;code&gt;resources&lt;/code&gt; directory to the project&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;resources&lt;/code&gt;, add a 192x192px or larger &lt;code&gt;icon.png&lt;/code&gt; file (or &lt;code&gt;.psd&lt;/code&gt;, &lt;code&gt;.ai&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;resources&lt;/code&gt;, add a 2208x2208px or larger &lt;code&gt;splash.png&lt;/code&gt; file (or &lt;code&gt;.psd&lt;/code&gt;, &lt;code&gt;.ai&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;ionic resources&lt;/code&gt; to automatically generate all the appropriate files&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;--icon&lt;/code&gt; or &lt;code&gt;--splash&lt;/code&gt; options to update only one set of resource&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This &lt;a href="http://ionicframework.com/blog/automating-icons-and-splash-screens/"&gt;post&lt;/a&gt; from Ionic has more details around the particular design aspects, but that's about it!&lt;/p&gt;
&lt;h3&gt;Some possible next steps...&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Set up an actual login page with authentication with &lt;a href="http://jamesbrewer.io/2014/09/22/json-web-token-authentication-part-one/"&gt;JSON Web Tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Angular &lt;a href="https://docs.angularjs.org/api/ng/service/$http"&gt;$http&lt;/a&gt; requests to load in some external data&lt;/li&gt;
&lt;li&gt;Add in &lt;a href="http://ionicframework.com/docs/api/directive/ionInfiniteScroll/"&gt;infinite scroll&lt;/a&gt; to query endless paginated data (what else are smartphones for?)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ionicframework.com/docs/guide/publishing.html"&gt;Publish your app&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;????&lt;/li&gt;
&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ul&gt;</summary><category term="mobile"></category><category term="ionic"></category><category term=""></category></entry><entry><title>2014: Year in Review</title><link href="http://engineroom.trackmaven.com/blog/2014-year-in-review/" rel="alternate"></link><updated>2015-02-10T00:00:00+01:00</updated><author><name>Josh Finnie</name></author><id>tag:engineroom.trackmaven.com,2015-02-10:blog/2014-year-in-review/</id><summary type="html">&lt;p&gt;Since this is the first year that TrackMaven has our Engine Room blog, this will be our first year in review. But I am hoping that this is a trend that will continue as we grow! We want to highlight a lot of what we did during 2014, and show our incredible growth as a department. You can head over to see our company-wide &lt;a href="http://trackmaven.com/2014/"&gt;2014 in review&lt;/a&gt; to get a better understanding how TrackMaven as a whole grew, but below you will find some interesting facts about the Engineering team.&lt;/p&gt;
&lt;h3&gt;So here are the numbers:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;+4 Engineers. We started 2014 with four engineers and have doubled in size! There were definitely some growing pains, but check out Farhan's &lt;a href="/blog/onboarding-at-trackmaven/"&gt;onboarding post&lt;/a&gt; to see how far we've come!&lt;/li&gt;
&lt;li&gt;+8,965 code commits. Even as fast as our team has been expanding, so has the code base for TrackMaven. We are constantly trying to provide the best platform for digital marketers, and committing code helps us get there.&lt;/li&gt;
&lt;li&gt;+204 releases. Even though continuous deployment was something we added to our stack around June of 2014, we were still able to push 204 releases of the application to our customers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;We also released some amazing features &amp;amp; enhancements in 2014!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We migrated completely from Heroku to AWS to give the engineers finer control of the application.&lt;/li&gt;
&lt;li&gt;We secured our application with SSL to provide the utmost secure connection with our customers. (Read how to set up HTTPS &lt;a href="/blog/setting-up-https-security/"&gt;here&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;We released an amazing data visualization suite using D3. (You can read more on how to integrate D3 in AngularJS &lt;a href="/blog/building-a-testable-d3-charting-application-within-angularjs/"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We scaled everything! Just like the task of doubling our engineering staff, we were able to scale TrackMaven, more than doubling our infrastructure. (Read about scaling PostgreSQL &lt;a href="/blog/so-you-want-another-postgresql-database-part-1/"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We introduced Elasticsearch into our cluster to give our customers access to blazing fast search of our activity feed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other Nice Things&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We started becoming a pillar of the DC Tech scene, giving 15 talks ranging from lightning talks at local meetups, to one-off talks at other companies, to a few Python conferences. As we grow as a team, I hope to see the number of talks given to the tech communities also grow.&lt;/li&gt;
&lt;li&gt;We also started a &lt;a href="www.meetup.com/TrackMaven-Monthly-Challenge/"&gt;Monthly Challenge Meetup&lt;/a&gt; to encourage the DC tech community to continue to learn and improve.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have a lot more planned for 2015 and will be writing about it here on the Engine Room! Here's to an amazing 2015.&lt;/p&gt;</summary><category term="engineering"></category><category term="review"></category></entry><entry><title>Announcing Celery Once</title><link href="http://engineroom.trackmaven.com/blog/announcing-celery-once/" rel="alternate"></link><updated>2015-02-03T00:00:00+01:00</updated><author><name>Cameron Maske</name></author><id>tag:engineroom.trackmaven.com,2015-02-03:blog/announcing-celery-once/</id><summary type="html">&lt;p&gt;At TrackMaven we are big users of &lt;a href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt;, an asynchronous task queue written in Python. Today we're happy to release a useful package we have been using internally called &lt;a href="https://pypi.python.org/pypi/celery_once/"&gt;Celery Once!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Celery Once allows you to specify and run unique tasks across your distributed Celery cluster. It can be used to prevent workers performing the same task when scheduled multiple times.&lt;/p&gt;
&lt;h2&gt;Example usage&lt;/h2&gt;
&lt;p&gt;Imagine the scenario of generating and send a PDF report to a user.
On our web app, a user could kick off this task by submitting a form to a web server, which then triggers our Celery task.&lt;/p&gt;
&lt;p&gt;If generating the report is slow and our user hits submit multiple times, we don't want to queue up additional repeated tasks that end up spamming the user's inbox.&lt;/p&gt;
&lt;p&gt;Here is how we could solve the scenario using Celery Once!
After &lt;a href="https://github.com/TrackMaven/celery-once#usage"&gt;setting up&lt;/a&gt; &lt;code&gt;celery&lt;/code&gt; with &lt;code&gt;celery_once&lt;/code&gt; installed, we can write a mutually exclusive task, like so...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# tasks.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;reports&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generate_report&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery_once&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QueueOnce&lt;/span&gt;

&lt;span class="nd"&gt;@celery.task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;QueueOnce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_pdf_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_report&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Behind the scenes, &lt;code&gt;QueueOnce&lt;/code&gt; uses &lt;a href="http://redis.io"&gt;Redis&lt;/a&gt; to &lt;a href="https://github.com/TrackMaven/celery-once/blob/c7b8902a52ee727e4e68392887d905f1e436f7ef/celery_once/tasks.py#L98"&gt;check against or set a lock&lt;/a&gt; based on the task's name and its arguments.&lt;/p&gt;
&lt;p&gt;If we try to run the same task, while it's already queued, an &lt;code&gt;AlreadyQueued&lt;/code&gt; exception is raised.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Run the initial task, not yet queued up...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send_pdf_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alice@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Duplicate task run before previous one completes..&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;send_pdf_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alice@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="n"&gt;AlreadyQueued&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# Running for a different user has its own lock&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;send_pdf_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bob@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's Celery Once in a nutshell! More documentation on how to install, set up and tweak it to your needs can be found &lt;a href="https://github.com/TrackMaven/celery-once"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="celery"></category><category term="redis"></category><category term="open source"></category></entry><entry><title>Monthly Challenge: Visualization</title><link href="http://engineroom.trackmaven.com/blog/using-cartodb-and-threejs-for-mapping/" rel="alternate"></link><updated>2015-01-08T00:00:00+01:00</updated><author><name>Fletcher Heisler</name></author><id>tag:engineroom.trackmaven.com,2015-01-08:blog/using-cartodb-and-threejs-for-mapping/</id><summary type="html">&lt;h2&gt;Using CartoDB and Three.js for mapping&lt;/h2&gt;
&lt;p&gt;Our next monthly challenge is &lt;strong&gt;visualization&lt;/strong&gt;! Although you could visualize data on just about anything in just about any way, for this post we're going to focus on &lt;strong&gt;mapping&lt;/strong&gt; data geographically using two different tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CartoDB: a great drag-and-drop solution for super quick and simple map creation - also a paid product that limits its free plan to 50MB of data!&lt;/li&gt;
&lt;li&gt;Three.js and WebGL Globe: for fancy 3D visualizations and an interactive globe onto which we can plot geographic data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few other possible frameworks for mapping that we &lt;em&gt;won't&lt;/em&gt; be covering in this post include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.highcharts.com/"&gt;Highcharts&lt;/a&gt; is a library for creating quick interactive charts and has a separate product specifically for &lt;a href="http://www.highcharts.com/products/highmaps"&gt;creating maps&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At TrackMaven, we use &lt;a href="http://d3js.org/"&gt;D3.js&lt;/a&gt; to create interactive visualizations. Although we won't be covering D3 in this post, Square has a great &lt;a href="http://square.github.io/intro-to-d3/"&gt;intro to D3&lt;/a&gt;, which you should follow up with a tutorial on &lt;a href="http://bost.ocks.org/mike/map/"&gt;mapping in D3&lt;/a&gt; written by the creator of D3 himself!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://leafletjs.com/"&gt;Leaflet&lt;/a&gt; is a great JS library specifically for creating maps and works well with &lt;a href="https://www.mapbox.com/"&gt;Mapbox&lt;/a&gt; for some very pretty built-in styling. Check out Chris Given's &lt;a href="https://github.com/cmgiven/bikeshare-odds"&gt;Bikeshare Odds&lt;/a&gt; project for a great demo of creating an interactive map viewable over time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mapping airport data&lt;/h3&gt;
&lt;p&gt;We're going to analyze flight data, eventually creating a 3D rendering of flight patterns by volume projected onto an interactive globe. To get started, though, let's set up the quickest and simplest map possible using &lt;a href="https://cartodb.com"&gt;CartoDB&lt;/a&gt; to get an idea of our available data.&lt;/p&gt;
&lt;p&gt;Make an account at &lt;a href="https://cartodb.com/signup"&gt;CartoDB&lt;/a&gt; and browse around the platform. You'll discover that CartoDB actually already has all the &lt;a href="https://fheisler.cartodb.com/dashboard/common_data/Cultural%20datasets"&gt;US airports&lt;/a&gt; as well as some other common datasets available for immediate use.&lt;/p&gt;
&lt;p&gt;We'll eventually want international data, however, so from &lt;a href="http://openflights.org/data.html"&gt;openflights.org&lt;/a&gt;, download the CSV file &lt;a href="https://sourceforge.net/p/openflights/code/HEAD/tree/openflights/data/airports.dat?format=raw"&gt;airports.dat&lt;/a&gt; to get the locations, names and codes of airports around the world.&lt;/p&gt;
&lt;p&gt;Rename the extension to a proper .CSV, then upload this &lt;code&gt;airports.csv&lt;/code&gt; file as a new table in CartoDB.&lt;/p&gt;
&lt;p&gt;Take a look at the table in CartoDB; you can double-click and rename &lt;code&gt;field_7&lt;/code&gt; to &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;field_8&lt;/code&gt; to &lt;code&gt;lon&lt;/code&gt;. Click on the orange "GEO" button next to the column named &lt;code&gt;the_geom&lt;/code&gt;, then specify your longitude and latitude. Rename &lt;code&gt;field_5&lt;/code&gt; to &lt;code&gt;code&lt;/code&gt;; we'll be merging in data based on the airport code later.&lt;/p&gt;
&lt;p&gt;And... voilà! You can already toggle over to &lt;code&gt;MAP VIEW&lt;/code&gt; at the top and see a map of all your airport data. Click on the wizard button on the right side and switch to a choropleth map to get a quick idea of the density of airports around the world:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="map1" src="/images/map1.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Now let's add some actual flight data, available from BTS.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=120&amp;amp;DB_Short_Name=On-Time&amp;amp;DB_Name=Airline%20On-Time%20Performance%20Data&amp;amp;Link=0&amp;amp;DB_URL=Subject_ID=3&amp;amp;Subject_Desc=Passenger%20Travel&amp;amp;Mode_ID2=0"&gt;description&lt;/a&gt; doesn't really make it clear &lt;em&gt;which&lt;/em&gt; 1%+ of non-stop domestic flights were covered, but we'll assume the file &lt;a href="http://www.transtats.bts.gov/DL_SelectFields.asp?Table_ID=236&amp;amp;DB_Short_Name=On-Time"&gt;available here&lt;/a&gt; is a representative sample of US air carrier flights. We'll need the &lt;code&gt;Origin&lt;/code&gt;, &lt;code&gt;Destination&lt;/code&gt;, and (number of total) &lt;code&gt;Flights&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You now have a couple options; you &lt;em&gt;could&lt;/em&gt; load this dataset in as a new CartoDB table and collapse + export it using their SQL editor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;flights&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, this will take you over your allotted 50MB, so you wouldn't be able to export this created set without signing up for a paid plan. Plus, it's SQL, so in this case I collapsed the file with a quick Python script instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="n"&gt;flight_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flights.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;csvreader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;csvreader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# skip header row&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csvreader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;orig_dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;flight_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orig_dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flight_counts.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;csvwriter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;csvwriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;flight_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;csvwriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can load this CSV file of total flight counts by airport code into CartoDB, then choose "options" in the top right and merge the airports table onto the &lt;code&gt;code&lt;/code&gt; in the flight data.&lt;/p&gt;
&lt;p&gt;Click on the "infowindow" button on the right (below the wizard) and enable the airport code as a mouse hover interaction, then take a look:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="map2" src="/images/map2.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;We can see that we're missing a &lt;em&gt;lot&lt;/em&gt; of smaller airports, but we do have coverage and counts that are roughly as expected for the major US airports.&lt;/p&gt;
&lt;p&gt;This dataset includes some other interesting data points that could be interesting and simple enough to analyze; for instance, you could look at weather delays over geographic location and time using a &lt;a href="http://docs.cartodb.com/tutorials/introduction_torque.html"&gt;torque map&lt;/a&gt;!&lt;/p&gt;
&lt;h3&gt;Visualizing airline data on a globe&lt;/h3&gt;
&lt;p&gt;Let's turn this up a notch with &lt;a href="http://threejs.org/"&gt;Three.js&lt;/a&gt; and the &lt;a href="http://www.chromeexperiments.com/globe"&gt;WebGL Globe&lt;/a&gt; to visualize flight data on a 3D globe.&lt;/p&gt;
&lt;p&gt;We're going to create a page &lt;code&gt;map.html&lt;/code&gt; available &lt;a href="/demos/globe/map.html"&gt;here&lt;/a&gt;, based on the WebGL Globe &lt;a href="https://github.com/dataarts/webgl-globe/#basic-usage"&gt;basic example&lt;/a&gt; (with a few tweaks and a bugfix for how options are actually passed):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Flight data visualization&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;helpers/three.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;globe/globe.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;container&amp;#39;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// Where to put the globe?&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;container&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// Make the globe&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;globe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DAT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Globe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// We&amp;#39;re going to ask a file for the JSON data.&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="c1"&gt;// Where do we get the data?&lt;/span&gt;
      &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flight_data.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// What do we do when we have it?&lt;/span&gt;
      &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// If we&amp;#39;ve received the data&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

          &lt;span class="c1"&gt;// Parse the JSON&lt;/span&gt;
          &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="c1"&gt;// Tell the globe about your JSON data&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Incorrect version in current example:&lt;/span&gt;
            &lt;span class="c1"&gt;// globe.addData( data[i][1], &amp;#39;magnitude&amp;#39;, data[i][0] );&lt;/span&gt;

            &lt;span class="nx"&gt;globe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;magnitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="c1"&gt;// Create the geometry&lt;/span&gt;
          &lt;span class="nx"&gt;globe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPoints&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

          &lt;span class="c1"&gt;// Begin animation&lt;/span&gt;
          &lt;span class="nx"&gt;globe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="c1"&gt;// Begin request&lt;/span&gt;
      &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We'll need to prepare some JSON data to be loaded in from the file &lt;code&gt;flight_data.json&lt;/code&gt;. For &lt;code&gt;globe.js&lt;/code&gt; to read properly, this should be of the format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lat1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lon1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mag1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lat2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lon2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mag2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;]]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Above, the &lt;code&gt;mag&lt;/code&gt; values are just each total count normalized by the maximum count in the data. We can prepare this file from the previous dataset using a slightly modified preprocessing script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="n"&gt;data_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flight_pos_counts.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rU&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;csvreader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;csvreader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# skip header row&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csvreader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;data_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;max_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;lat_lon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;lat_lon&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;lat_lon&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;max_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;flight_data.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[[&amp;quot;counts&amp;quot;,[{}]]]&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can download this prepared dataset directly &lt;a href="/demos/globe/flight_data.json"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we'll need to be able to point to &lt;a href="https://github.com/dataarts/webgl-globe/blob/master/globe/globe.js"&gt;globe.js&lt;/a&gt; and, from within that script, a &lt;a href="https://github.com/dataarts/webgl-globe/blob/master/globe/world.jpg"&gt;world map&lt;/a&gt; to overlay on the globe.&lt;/p&gt;
&lt;p&gt;Cross origin requests will(/should) be disabled by your browser, meaning that you won't be able to load static files from disk into the page, so you'll need to run everything from a local host; just &lt;code&gt;cd&lt;/code&gt; into your project directory and run a server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m SimpleHTTPServer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With everything properly connected, you should now be able to visit the fully functional page with an interactive globe at:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http://localhost:8000/map.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;&lt;img alt="map3" src="/images/map3.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Visualizing flight paths in 3D&lt;/h3&gt;
&lt;p&gt;As a warning, this section is still a work in progress! We're going to visualize flights &lt;em&gt;between&lt;/em&gt; airports (specifically non-stop flights with at least one airport in the US) using the BTS dataset &lt;a href="http://www.transtats.bts.gov/DL_SelectFields.asp?Table_ID=261"&gt;T-100 International Segment (All Carriers)&lt;/a&gt;, which they describe as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;This table contains international non-stop segment data reported by both U.S. and foreign air carriers, including carrier, origin, destination, aircraft type and service class for transported passengers, freight and mail, available capacity, scheduled departures, departures performed, aircraft hours, and load factor when at least one point of service is in the United States or one of its territories. International flight data is released 3 months after domestic data. Flights with both origin and destination in a foreign country are not included.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We'll grab &lt;code&gt;DepPerformed&lt;/code&gt;, &lt;code&gt;Origin&lt;/code&gt; and &lt;code&gt;Destination&lt;/code&gt; from this table, join with the &lt;code&gt;airports.dat&lt;/code&gt; file from above, and (again, after some preprocessing) prepare a file &lt;code&gt;flight_traffic.json&lt;/code&gt; along the following format, where the magnitude &lt;code&gt;mag1&lt;/code&gt; of each lat/lon origin and destination pair is the count of flights divided by the maximum count for any pair:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;orig_lat1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orig_lon1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest_lat1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest_lon1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mag1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orig_lat2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orig_lon2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest_lat2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest_lon2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mag2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This final table is available &lt;a href="/demos/globe/flight_traffic.json"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now for the tricky part: displaying arcs between airports as "flight" patterns... I created a modified &lt;code&gt;globe2.js&lt;/code&gt; available &lt;a href="/demos/globe/globe2.js"&gt;here&lt;/a&gt;, which in addition to an &lt;code&gt;addPoint()&lt;/code&gt; function includes an &lt;code&gt;addPath()&lt;/code&gt; function to draw 3D splines connection two points on the globe.&lt;/p&gt;
&lt;p&gt;My trigonometry is a little rusty, so I'm still working out the details of how to interpolate spherical coordinates properly. For now, I used a &lt;em&gt;very&lt;/em&gt; hacky system of finding a "midpoint" between the two points, which mostly only works for flights around the US depending on the signs of the coordinate pairs; you'll notice for instance that all the flights to Europe currently dip into the earth before reaching their destinations! I then generate a smooth spline using those three points.&lt;/p&gt;
&lt;p&gt;You can see the results, which I limit to only the busiest airport pairs to cut down somewhat on clutter, &lt;a href="/demos/globe/map2.html"&gt;here as a live demo&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="map4" src="/images/map4.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;I will update this post when/if I properly rework the flight paths; for now, all of the paths calculated in spherical coordinates seem to stray &lt;em&gt;slightly&lt;/em&gt; off course... One day, it might even look half as cool as this &lt;a href="http://nisatapps.prio.org/armsglobe/"&gt;absolutely crazy visualization&lt;/a&gt; of global firearms trade built on work from the crazy Google Ideas. Something to aspire to, but maybe a bit complex for a monthly challenge!&lt;/p&gt;</summary><category term="charting"></category><category term="d3"></category></entry><entry><title>So you want another PostgreSQL database? (part 3)</title><link href="http://engineroom.trackmaven.com/blog/so-you-want-another-postgresql-database-part-3/" rel="alternate"></link><updated>2014-12-29T00:00:00+01:00</updated><author><name>John Young</name></author><id>tag:engineroom.trackmaven.com,2014-12-29:blog/so-you-want-another-postgresql-database-part-3/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Read &lt;a href="/blog/so-you-want-another-postgresql-database-part-1/"&gt;Part 1&lt;/a&gt; or &lt;a href="/blog/so-you-want-another-postgresql-database-part-2/"&gt;Part 2&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Tuning your PostgreSQL servers on Amazon EC2&lt;/h2&gt;
&lt;p&gt;It will probably come as no surprise that the settings that are best for your PostgreSQL cluster are heavily dependent on your data and how you're using it. No one can say what will work best for you in every single use case, and it's up to you to profile your database to determine what does and does not work for you. With that being said, a great starting point for general use cases can be found in Christophe Pettus' talk &lt;a href="http://thebuild.com/presentations/not-your-job.pdf"&gt;PostgreSQL when it's not your job&lt;/a&gt;. If you're completely new to tuning your Postgres instances, I highly recommend using these settings as an initial profile point.&lt;/p&gt;
&lt;p&gt;Here's a quick summary of his suggestions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Memory settings
* shared_buffers: Set to 25% of total system RAM (or 8GB if RAM &amp;gt; 32GB)
* work_mem: Start at 32-64MB.
  * Look for `temporary file` lines in logs then set it to 2-3x the size of the largest temp file you see
* maintenance_work_mem: 10% of RAM, up to 1GB
* effective_cache_size: 50-75% of total RAM

Checkpoint settings
* wal_buffers: 16MB
* checkpoint_completion_target: 0.9
* checkpoint_timeout: 10min
* checkpoint_segments: 32
  * Check logs for checkpoint entries. Adjust checkpoint_segments so that checkpoints happen due to timeouts rather than filling segments

Planner settings
* random_page_cost: 1.1 for Amazon EBS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some of these settings will naturally be somewhat confusing, and even a bit intimidating to change. My advice? Don't afraid to experiment, even if you're going outside of the 'norm' of what others say your settings should be.&lt;/p&gt;
&lt;h2&gt;A real-world example&lt;/h2&gt;
&lt;p&gt;When we saw huge performance slowdowns on our database, we knew we needed more aggressive caching of our data, but how would we accomplish that? The &lt;code&gt;shared_buffers&lt;/code&gt; paramater controls how much memory is dedicated to caching data in Postgres, but every online resource we found said that 8GB was as large as was feasible. Nonsense, I say!&lt;/p&gt;
&lt;p&gt;The first step to solving any problem is determining where the problem is. We needed to be able to cache several entire tables of our database for certain heavily-used, customer facing read operations. When our data was smaller, the settings above were just fine. But as we've grown, it quickly became apparent that an 8GB cache for a 20GB table is woefully insufficient. How did we discover this? I'm glad you asked. Here is a handy SQL script to show you what is actually sitting in your shared_buffers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SELECT
c.relname,
pg_size_pretty(count(*) * 8192) as buffered,
round(100.0 * count(*) /
(SELECT setting FROM pg_settings
WHERE name=&amp;#39;shared_buffers&amp;#39;)::integer,1)
AS buffers_percent,
round(100.0 * count(*) * 8192 /
pg_relation_size(c.oid),1)
AS percent_of_relation
FROM pg_class c
INNER JOIN pg_buffercache b
ON b.relfilenode = c.relfilenode
INNER JOIN pg_database d
ON (b.reldatabase = d.oid AND d.datname = current_database())
GROUP BY c.oid,c.relname
ORDER BY 3 DESC
LIMIT 10;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script will tell show us the top 10 tables being stored in our cache, ranked from highest memory usage to lowest. Especially important is the &lt;code&gt;percent_of_relation&lt;/code&gt; column. Is your most heavily read table only 65% cached? That can be a pretty big problem. For us, the additional second or two it took for customers to load a page was troublesome, but not our largest problem. This lack of caching caused our tasks to run about 300-500 milliseconds slower on average. A few hundred milliseconds added to a few million tasks quickly caused us to be overrun by tasks that ran too slowly to clear in time for the next set of tasks to be scheduled. The result? We had a task queue that would grow forever and never clear, all thanks to bad caching strategy.&lt;/p&gt;
&lt;p&gt;We decided to increase the power of our database by bumping our EC2 instance to an &lt;code&gt;r3.4xlarge&lt;/code&gt;, giving us 16 cores and 122GB of memory. To fully utilize this much more powerful machine, we needed to tweak our settings far beyond the 'recommended' levels.&lt;/p&gt;
&lt;p&gt;Here is what we settled on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;### MEMORY SETTINGS
shared_buffers = 25GB
work_mem = 32MB
maintenance_work_mem = 1GB
effective_cache_size = 100GB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here is an action shot, using &lt;code&gt;htop&lt;/code&gt;, with the yellow coloring denoting memory reserved for our cache:
&lt;center&gt;&lt;img alt="Database resource usage as seen by htop" src="/images/db-usage.png" /&gt;&lt;/center&gt;&lt;/p&gt;</summary><category term="postgres"></category><category term="how-to"></category></entry><entry><title>Onboarding at TrackMaven</title><link href="http://engineroom.trackmaven.com/blog/onboarding-at-trackmaven/" rel="alternate"></link><updated>2014-12-16T00:00:00+01:00</updated><author><name>Farhan Syed</name></author><id>tag:engineroom.trackmaven.com,2014-12-16:blog/onboarding-at-trackmaven/</id><summary type="html">&lt;p&gt;Today I will be talking about onboarding! We will cover what the heck onboarding means, why it is important, and then &lt;em&gt;gasp&lt;/em&gt; I'll attempt to grade how well my new coworkers onboarded me in my first month. Bear in mind that this will be focused on engineering only.&lt;/p&gt;
&lt;p&gt;With that, let us begin!&lt;/p&gt;
&lt;h2&gt;What is onboarding?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Onboarding is the mechanism with which you take new employees and turn them into &lt;strong&gt;autonomous&lt;/strong&gt;, &lt;strong&gt;confident&lt;/strong&gt;, and &lt;strong&gt;productive&lt;/strong&gt; members of the company.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Autonomy&lt;/h3&gt;
&lt;p&gt;Having autonomy goes a long way toward being professionally satisfied. Two critical measures of autonomy are how much supervision is necessary and whether one is able to choose which types of problems to work on.&lt;/p&gt;
&lt;h3&gt;Confidence&lt;/h3&gt;
&lt;p&gt;Is your onboarding process creating engineers who believe they are valuable and who feel that they can actually enact change? Confident engineers are more likely to learn and pick up new skills that are required for the job because they are willing to fail in the short term. Confidence is important not only for the individual but also for the entire team, as it helps to create the space for emergent leaders.&lt;/p&gt;
&lt;h3&gt;Productivity&lt;/h3&gt;
&lt;p&gt;How quickly can you take a stranger and turn them into a productive member of the team?&lt;/p&gt;
&lt;p&gt;Time to productivity can be measured by gauging how long it takes to set up a local development environment, how easy it is to deploy code and run tests, and any other ways in which an engineer can contribute to a codebase.&lt;/p&gt;
&lt;p&gt;At TrackMaven, I was impressed with the automation of these processes, the documentation not just on the codebase but on conventions, and how easy it is to access this information.&lt;/p&gt;
&lt;h2&gt;Why is it important?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Onboarding is important because it encourages &lt;strong&gt;team bonding&lt;/strong&gt; and &lt;strong&gt;knowledge transfer&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Team bonding!&lt;/h3&gt;
&lt;p&gt;The best software is not written by single person but by teams. Given that teams have been responsible for building great features throughout history, onboarding should be a team endeavor with the goal of disseminating the institutional knowledge of a company's engineers.&lt;/p&gt;
&lt;h3&gt;Knowledge transfer!&lt;/h3&gt;
&lt;p&gt;There are three primary areas of knowledge that should be conveyed when onboarding: technical knowledge, company knowledge, and personal development knowledge.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Technical knowledge: How is the application architected? How do the pieces of the application work? How is devops handled?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Company knowledge &amp;amp; process: What is the history of the company? What is the point of the company? How is the product ideation process handled? What process tools do we use (bug tracking, user stories, etc)?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Personal development knowledge: How should the new engineer figure out which capabilities they might be interested in pursuing, i.e. is there an area of expertise of the product they want to focus on?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those are the onboarding basics. While they may seem simple, because in today's technology landscape getting an engineer to be productive is not cheap and establishing a company culture is difficult, the basics should be taken seriously.&lt;/p&gt;
&lt;p&gt;With that, it is time to share my TrackMaven onboarding experience.&lt;/p&gt;
&lt;h2&gt;My experience at TrackMaven&lt;/h2&gt;
&lt;h3&gt;Productivity&lt;/h3&gt;
&lt;p&gt;I was completely blown away at the level of automation that I was introduced to during my first week at TrackMaven. Setting up my local development environment took only an hour and a half. So much of that is due to the awesome tooling we have: &lt;strong&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://www.orchardup.com/"&gt;Fig&lt;/a&gt;&lt;/strong&gt; make setting up isolated services a breeze and TrackMaven has a hand-rolled CLI for all stages of the application life cycle (start, update, destroy). I was also impressed by the amount of testing code that has been written for the application. Finally, our deployment strategy was straight-forward: we use &lt;strong&gt;&lt;a href="http://www.ansible.com/home"&gt;Ansible&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="http://www.fabfile.org/"&gt;Fabric&lt;/a&gt;&lt;/strong&gt; to deploy to our different environments. Yes, we love Python!&lt;/p&gt;
&lt;p&gt;Because of how well documented and automated our process is for shipping code, I was able to push code out on the second day, and it was great to feel that I was contributing to a team so quickly. While I did not immediately understand how the entire application worked, being able to operate within a streamlined and automated process helped me to feel confident.&lt;/p&gt;
&lt;h3&gt;Autonomy&lt;/h3&gt;
&lt;p&gt;One of the most helpful aspects of TrackMaven's onboarding was their onboarding checklist, which covers everything from local devops to scaling production boxes. Instead of having to wait passively for the next person with free time to come and show me something, I was able to play an active role and decide what I wanted to learn that day. Not only did this give me an outlet for my curousity, but it also gave me that warm fuzzy feeling that only self-directed learning can elicit. Also, there is just something magical about crossing things off a large list. By the end of the month I had only a few tasks left (one of them being to write a blog post).&lt;/p&gt;
&lt;h3&gt;Confidence&lt;/h3&gt;
&lt;p&gt;I was able to push code on day two, and by the end of my fourth day I had developed a feature, pushed it through all the steps of our process (git strategy, QA, PR, testing environment deploy), and merged into master! It was exciting to to feel like part of the team in less than 96 hours. I would not have been able to do this without:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pair programming&lt;/strong&gt;. In my first week I paired with five of the seven engineers on our team. This was a great opportunity not only to see many awesome tools (&lt;a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US"&gt;chrome extensions&lt;/a&gt;, keyboard shortcuts, scripts) that my co-workers were using but also to understand the codebase architecture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;. The tooling around testing (great use of mocks and separation of unit, API, and integration tests) at TrackMaven is impressive even to a testing nerd like me. In my opinion there is no way better way understand how "it" works than by reading well-written tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Monitoring&lt;/strong&gt;. We (unsurprisingly) use &lt;a href="https://getsentry.com/welcome/"&gt;Sentry&lt;/a&gt;, &lt;a href="http://newrelic.com/"&gt;New Relic&lt;/a&gt; and &lt;a href="https://www.librato.com/"&gt;Librato&lt;/a&gt; for the majority of our monitoring. Such extensive logs, combined with testing, enabled me to get the information I needed to solve problems that were happening anywhere in the stack.&lt;/p&gt;
&lt;h3&gt;TrackMaven culture&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Using data, we iterate and work to improve. In order to do that, we focus on opportunities to learn. This means learning internally and also externally through events and participation in our community. It also means being willing to try things that fail in order to succeed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After my firsthand experience, I will attest that is true. Our team's feedback mechanisms allow us to try things out, experiment, and fail quickly (in a good way). Our team structure is flat, and everyone is encouraged to improve the process and not shy away from open communication.&lt;/p&gt;
&lt;h3&gt;Great place to work&lt;/h3&gt;
&lt;p&gt;Overall, I was impressed with the TrackMaven onboarding. I have ideas of my own to make the onboarding process even better. So far it has been great, and I am looking forward to tackling even harder problems and improving an awesome product.&lt;/p&gt;
&lt;p&gt;Did I mention that we are &lt;a href="http://trackmaven.com/careers"&gt;hiring&lt;/a&gt;?&lt;/p&gt;</summary><category term="training"></category><category term="onboarding"></category><category term="docker"></category></entry><entry><title>Making a Mockery of Python</title><link href="http://engineroom.trackmaven.com/blog/making-a-mockery-of-python/" rel="alternate"></link><updated>2014-12-01T00:00:00+01:00</updated><author><name>Jon Evans</name></author><id>tag:engineroom.trackmaven.com,2014-12-01:blog/making-a-mockery-of-python/</id><summary type="html">&lt;p&gt;Today we will be talking about mocking. No, not the joke at someone else's expense kind. Mocking is a technique to temporarily replace &lt;strong&gt;real&lt;/strong&gt; parts of our code with &lt;strong&gt;fake&lt;/strong&gt;, simpler parts, so that we can check that the rest of the parts are working as we intend. Here we'll consider some simple use cases for mocking in Python tests, and try to show how this extremely useful technique can make us better at testing.&lt;/p&gt;
&lt;h2&gt;Why do we mock?&lt;/h2&gt;
&lt;p&gt;When we carry out unit testing, our goal is to test a small section of code - for example a function or class method - in isolation. In other words, we should only be testing the code that is contained in said function. If we rely on calls to other pieces of code in our test, then we find ourselves in an unfortunate situation where changes to the nested code can break the test, despite the code of the function being tested remaining the same. This is best illustrated by example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# function.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="c"&gt;# test.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

        &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python test.py
.
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;in 0.001s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the simple case above, we have a function that adds and multiplies two numbers, and returns both the sum and the multiple. The &lt;code&gt;add_and_multiply&lt;/code&gt; function calls a second function, &lt;code&gt;multiply&lt;/code&gt; to perform the multiplication operation.&lt;/p&gt;
&lt;p&gt;Suppose we decided that we wanted to dispense with 'traditional' mathematics, and redefine our multiply function to always add three to the numbers being multiplied.&lt;/p&gt;
&lt;p&gt;Our new 'multiplication' function looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we encounter a problem. Our test code hasn't changed. The function we are supposedly testing hasn't changed. However, the &lt;code&gt;test_add_and_multiply&lt;/code&gt; test will now fail:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python test.py
&lt;span class="nv"&gt;F&lt;/span&gt;
&lt;span class="o"&gt;======================================================================&lt;/span&gt;
FAIL: test_add_and_multiply &lt;span class="o"&gt;(&lt;/span&gt;__main__.MyTestCase&lt;span class="o"&gt;)&lt;/span&gt;
----------------------------------------------------------------------
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;, line 13, in test_add_and_multiply
    self.assertEqual&lt;span class="o"&gt;(&lt;/span&gt;15, multiple&lt;span class="o"&gt;)&lt;/span&gt;
AssertionError: &lt;span class="m"&gt;15&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; 18

----------------------------------------------------------------------
Ran &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;in 0.001s

FAILED &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;failures&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The issue here is that our original test was not a &lt;em&gt;true&lt;/em&gt; unit test. Despite intending only to test our outer function, we are implicitly testing the inner function as well, since our desired result depends on its behaviour. This may seem like a pointless distinction in the simple case above, but in a situation where we are testing a complex piece of logic - for example, a Django view function that calls various different inner functions based on certain conditionals - it becomes more important to separate the testing of the view logic from the results of the function calls.&lt;/p&gt;
&lt;p&gt;There are two ways to solve this problem. We either ignore it, call our unit test an integration test and move on, or we can turn to &lt;strong&gt;mocking&lt;/strong&gt;. The disadvantage of the first course of action is that an integration test only tells us something is broken somewhere along the line of function calls - it makes it much harder to identify where the issue lies. This is not to say that integration tests aren't useful, because they are. However, unit tests and integration tests solve different problems, and should be used in tandem. So if we want to be good testers, we choose the alternative: the &lt;code&gt;mock&lt;/code&gt; library.&lt;/p&gt;
&lt;h2&gt;What is mock?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mock&lt;/code&gt; is a Python package so awesome, it was added to the standard library in Python 3. For those of us peasants still toiling in the UnicodeError-strewn fields of Python 2.x, you can install it through pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install &lt;span class="nv"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;1.0.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are many different ways to use &lt;code&gt;mock&lt;/code&gt;. We can use it to monkey-patch functions, create fake objects, or even as a context manager. All of these implementations serve one overall purpose - replacing parts of our code with replicas that we can use to a) gather information and b) return contrived responses.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mock&lt;/code&gt;'s &lt;a href="http://www.voidspace.org.uk/python/mock/"&gt;documentation&lt;/a&gt; can be quite dense, and finding information on a particular use-case can be tricky. Here, we'll take a look at a common scenario - replacing a nested function to check its inputs and outputs.&lt;/p&gt;
&lt;h2&gt;We will mock you&lt;/h2&gt;
&lt;p&gt;Let's rewrite our unit test, using the power of mock. Then we'll discuss what's happening, and why it is useful from the perspective of testing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# test.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;multiply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

        &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;

        &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, we can change the multiply function to do whatever we want - it could return the multiple plus three, return None, or return your &lt;a href="https://www.youtube.com/watch?v=q-yxOFIkgxU&amp;amp;t=1m15s"&gt;favourite line from Monty Python and the Holy Grail&lt;/a&gt; - and our test above will still pass. This is because we are &lt;strong&gt;mocking&lt;/strong&gt; the multiply function. In true unit test fashion, we don't care about what happens inside the multiply function; from the perspective of our &lt;code&gt;add_and_multiply&lt;/code&gt; test, we only care that &lt;code&gt;multiply&lt;/code&gt; was called with the right arguments. We assume (hopefully, correctly) that what is going on &lt;em&gt;inside&lt;/em&gt; &lt;code&gt;multiply&lt;/code&gt; is itself being tested by another unit test.&lt;/p&gt;
&lt;h2&gt;What just happened?&lt;/h2&gt;
&lt;p&gt;The syntax used above may look confusing at first. Let's consider the relevant lines more closely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@mock.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;multiply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We've used the &lt;code&gt;mock.patch&lt;/code&gt; decorator to &lt;strong&gt;replace&lt;/strong&gt; &lt;code&gt;multiply&lt;/code&gt; with a mock object. We then insert this into our test by passing it as an argument, which we've called &lt;code&gt;mock_multiply&lt;/code&gt;. Within the context of the test, any call to &lt;code&gt;multiply&lt;/code&gt; will be redirected to our &lt;code&gt;mock_multiply&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Cries of terror - "How can we be replacing a function with an object!?" Don't worry! This is Python, so functions &lt;strong&gt;are&lt;/strong&gt; objects. Normally, when we call &lt;code&gt;multiply()&lt;/code&gt;, we are using the &lt;code&gt;__call__&lt;/code&gt; method of the &lt;code&gt;multiply&lt;/code&gt; function object. With our mock in place, however, our &lt;code&gt;multiply()&lt;/code&gt; call instead calls the &lt;code&gt;__call__&lt;/code&gt; method of our mock object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to get our mock function to return anything, we need to specify the &lt;code&gt;return_value&lt;/code&gt; attribute. This tells our mock object what to give back when it is called.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_and_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mock_multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the test, we then called our outer function, &lt;code&gt;add_and_multiply&lt;/code&gt;. This will call our nested &lt;code&gt;multiply&lt;/code&gt; function, and if we've mocked it correctly, the call will be received by our mock object instead. To check that this has happened, we can rely on a smart feature of mock objects - they store any arguments that they were called with. The &lt;code&gt;assert_called_once_with&lt;/code&gt; method of the mock object is a nice shortcut to check, as the name suggests, if the object was called once with a specific set of arguments. If it was, we are happy and the test passes. If it wasn't, &lt;code&gt;assert_called_once_with&lt;/code&gt; will let us know by raising an &lt;code&gt;AssertionError&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;What have we achieved?&lt;/h2&gt;
&lt;p&gt;Well, quite a lot actually. Firstly, we have &lt;strong&gt;isolated&lt;/strong&gt; the functionality of &lt;code&gt;add_and_multiply&lt;/code&gt; from the functionality of &lt;code&gt;multiply&lt;/code&gt; by mocking the nested function. This means that our unit test is only testing logic specifically inside &lt;code&gt;add_and_multiply&lt;/code&gt;. Only changes to the code of &lt;code&gt;add_and_multiply&lt;/code&gt; will affect the success or failure of the test.&lt;/p&gt;
&lt;p&gt;Secondly, we can now control the outputs of our nested function to make sure our outer function handles different cases. For example, our &lt;code&gt;add_and_multiply&lt;/code&gt; function might have conditional logic based on the result of &lt;code&gt;multiply&lt;/code&gt;: say, we only want to return a value if the multiple is greater than 10. We could easily test that our logic works by generating contrived outputs from &lt;code&gt;multiply&lt;/code&gt; to mimic the case where the multiple is less than 10, and the case where the multiple is greater. This feature of mock objects is great for testing control flow.&lt;/p&gt;
&lt;p&gt;Finally, we can now make sure that our mocked function is being called the correct number of times, with the correct arguments. Since our mock object is sitting where our &lt;code&gt;multiply&lt;/code&gt; function normally sits, we know that any calls made to it would normally go to &lt;code&gt;multiply&lt;/code&gt;. When testing a complex function, it is extremely reassuring to make sure that each step is being called correctly.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The example given above only scratches the surface of what &lt;code&gt;mock&lt;/code&gt; can do. In an upcoming post, we'll look at some more in-depth examples of using the library, as well as identifying some pitfalls to avoid. Meanwhile, questions are welcome in the comments, or on Twitter!&lt;/p&gt;</summary><category term="testing"></category><category term="mock"></category></entry><entry><title>Monthly Challenge: Natural Language Processing</title><link href="http://engineroom.trackmaven.com/blog/monthly-challenge-natural-language-processing/" rel="alternate"></link><updated>2014-11-24T00:00:00+01:00</updated><author><name>Fletcher Heisler</name></author><id>tag:engineroom.trackmaven.com,2014-11-24:blog/monthly-challenge-natural-language-processing/</id><summary type="html">&lt;p&gt;Our topic for this month's &lt;a href="http://www.meetup.com/TrackMaven-Monthly-Challenge/"&gt;Monthly Challenge meetup&lt;/a&gt; is NLP! In this post, we'll get you started with one possibility: using &lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt; and Python's &lt;a href="http://www.nltk.org/"&gt;Natural Language Toolkit&lt;/a&gt; to analyze the contents your own Gmail inbox. For those of you who are continuing projects from our last &lt;a href="www.meetup.com/TrackMaven-Monthly-Challenge/events/213296342/"&gt;monthly challenge on Elasticsearch&lt;/a&gt;, we'll also include some code to make use of &lt;a href="http://www.elasticsearch.org/guide/en/elasticsearch/client/python-api/master/"&gt;Elasticsearch&lt;/a&gt; as well at the end of the post.&lt;/p&gt;
&lt;p&gt;There are endless possibilities for an NLP-inspired project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Sentiment_analysis"&gt;Sentiment analysis&lt;/a&gt; to put a measure to the emotional content of online reviews, social media, etc. For instance, are tweets about a topic trending to positive or negative opinions? Does a news site cover certain topics using more positive/negative terms or frequently use words correlated with certain emotions? Is this "positive" Yelp review sarcastic? (Good luck with that last one!)&lt;/li&gt;
&lt;li&gt;Analyze the use of language in literature to measure trends in vocabulary or writing style over time/regions/authors.&lt;/li&gt;
&lt;li&gt;Flag content as spam by identifying key characteristics of the language used.&lt;/li&gt;
&lt;li&gt;Use &lt;a href="http://en.wikipedia.org/wiki/Topic_model"&gt;topic extraction&lt;/a&gt; to group reviews into similar categories based on what main topics they cover.&lt;/li&gt;
&lt;li&gt;Create a better real-time Twitter search by combining Elasticsearch with &lt;a href="http://wordnet.princeton.edu/"&gt;WordNet&lt;/a&gt; via &lt;a href="http://www.nltk.org/howto/wordnet.html"&gt;NLTK's corpus&lt;/a&gt; to measure term similarity on Twitter's streaming API&lt;/li&gt;
&lt;li&gt;Join &lt;a href="https://github.com/dariusk/NaNoGenMo-2014"&gt;NaNoGenMo&lt;/a&gt; and write some code that generates its own novel! There are plenty of ideas and resources &lt;a href="https://github.com/dariusk/NaNoGenMo-2014/issues/1"&gt;here&lt;/a&gt; to get started.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Load a Gmail inbox into pandas&lt;/h2&gt;
&lt;p&gt;Let's get started with the example project! First off, we'll need some data. Prepare an archive of &lt;em&gt;only&lt;/em&gt; your Gmail data (this will include what's currently in your spam and trash folders) here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.google.com/settings/takeout"&gt;https://www.google.com/settings/takeout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now go take a walk. With a 5.1G inbox, my 2.8G archive took a little over an hour to send.&lt;/p&gt;
&lt;p&gt;Once you've got the file and a local environment set up for the project, use the script below to read the data into pandas (I highly recommend using &lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt; for data analysis):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mailbox&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mbox&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;labels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X-Gmail-Labels&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;epilogue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epilogue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignore_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Create an empty DataFrame with the relevant columns&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;labels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;epilogue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# Import your downloaded mbox file&lt;/span&gt;
&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;All mail Including Spam and Trash.mbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_content_type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;store_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_multipart&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="c"&gt;# Grab any plaintext from multipart messages&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_content_type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;store_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Above, we used Python's &lt;a href="https://docs.python.org/2/library/mailbox.html"&gt;mailbox&lt;/a&gt; module to read and parse "mbox"-formatted messages. This could certainly be done more elegantly (for instance, the messages include a lot of extraneous, duplicated data such as inline messages with "&amp;gt;&amp;gt;&amp;gt;" in replies). Another issue is the inability to handle some special characters, which for simplicity we discard for now; check that you're not ignoring a significant proportion of your inbox here!&lt;/p&gt;
&lt;p&gt;Note that we're not actually going to make use of anything but the subject lines, but you could perform all sorts of interesting analysis on timestamps, message bodies, classify by tags, etc. Given that this is just a post to get you started (and happens to show results from my own inbox), I don't want to go into &lt;em&gt;too&lt;/em&gt; much detail :)&lt;/p&gt;
&lt;h2&gt;Finding common terms&lt;/h2&gt;
&lt;p&gt;Now that we've got some data, let's get the ten most common terms out of all subject lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Top 10 most common subject words&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="n"&gt;subject_word_bag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject_word_bag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;re:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8508&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1188&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;the&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;819&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fwd:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;572&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;530&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;your&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;528&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;498&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;463&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;course&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;452&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, that was underwhelming. Let's try limiting out some common terms:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk.corpus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stopwords&lt;/span&gt;
&lt;span class="n"&gt;stops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stopwords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;english&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;re:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;fwd:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;subject_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;subject_word_bag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stops&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject_words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;530&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;course&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;452&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;trackmaven&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;334&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;question&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;334&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;286&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;245&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;payment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;244&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;241&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;forum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;236&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Besides removing a couple of the least useful terms on our own, we used NLTK's stopwords corpus, which first needs to be install in a &lt;a href="http://www.nltk.org/data.html"&gt;rather goofy way&lt;/a&gt;. Now we can see some words that are typical to my inbox but not necessarily as typical to find in English text in general!&lt;/p&gt;
&lt;h2&gt;Bigrams and collocations&lt;/h2&gt;
&lt;p&gt;Another interesting measurement allowed by NLTK is the concept of &lt;a href="http://en.wikipedia.org/wiki/Collocation"&gt;collocations&lt;/a&gt;. First, let's take a look at common "bigrams" - i.e, which sets of two words frequently appear together in pairs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nltk&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;collocations&lt;/span&gt;
&lt;span class="n"&gt;bigram_measures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collocations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BigramAssocMeasures&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;bigram_finder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collocations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BigramCollocationFinder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject_words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Filter to top 20 results; otherwise this will take a LONG time to analyze&lt;/span&gt;
&lt;span class="n"&gt;bigram_finder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_freq_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bigram&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bigram_finder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score_ngrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bigram_measures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_freq&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;bigram&lt;/span&gt;

&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;forum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.005839453284373725&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;forum&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.005839453284373725&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.00538045695634435&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;domain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.004870461036311709&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.0028304773561811506&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;widget.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.0026519787841697267&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;purechat:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;question&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.0026519787841697267&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;using&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.0026519787841697267&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;third&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.002575479396164831&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;trackmaven&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;application&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.002524479804161567&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could repeat the same process for trigrams (or other ngrams) to find longer phrases; in this case, "new forum content" would appear as a top trigram, but in the case of the above list it ended up getting split into two pieces at the top of the bigram list.&lt;/p&gt;
&lt;p&gt;Another slightly different type of collocation measurement is based on &lt;a href="http://en.wikipedia.org/wiki/Pointwise_mutual_information"&gt;pointwise mutual information&lt;/a&gt;; essentially, this measures how likely one word is to appear given that we've seen the other word in a specific document &lt;em&gt;relative to&lt;/em&gt; their general individual frequencies throughout all documents. For instance, if my email subjects use the word "blog" and/or the word "post" a lot in general, then the bigram "blog post" is not as interesting of a signal since it's still likely that one word might appear &lt;em&gt;not&lt;/em&gt; paired with the other. Using this measure, we get a different set of bigrams:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bigram&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bigram_finder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nbest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bigram_measures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pmi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;bigram&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;4:30pm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;5pm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;motley&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;fool&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;60,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;900,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;population&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;goods&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, I don't get a lot of email subjects mentioning the words "motley" or "fool" - but when I see either one, it's probably something "Motley Fool"-related!&lt;/p&gt;
&lt;h2&gt;Sentiment analysis&lt;/h2&gt;
&lt;p&gt;Finally, let's try out some sentiment analysis. For a quick start, we can use the &lt;a href="http://textblob.readthedocs.org/en/dev/index.html"&gt;TextBlob&lt;/a&gt; library, which sits on top of NLTK to provide simple access to lots of common NLP tasks. We can use its built-in &lt;a href="http://textblob.readthedocs.org/en/dev/quickstart.html#sentiment-analysis"&gt;sentiment analysis&lt;/a&gt; (which relies on &lt;a href="http://www.clips.ua.ac.be/pages/pattern-en#sentiment"&gt;pattern&lt;/a&gt;) to calculate the "polarity" of subject lines, from -1.0 for highly negative sentiment up to 1.0 for positive, with 0 being neutral (lack of a clear signal):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textblob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TextBlob&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;feels&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TextBlob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sentiment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polarity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Output a few subject lines with their calculated sentiment scores&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feels&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="mi"&gt;0&lt;/span&gt;                                      &lt;span class="n"&gt;Fw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;    &lt;span class="mf"&gt;0.00000&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;                                             &lt;span class="n"&gt;Fw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;    &lt;span class="mf"&gt;0.00000&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;                          &lt;span class="n"&gt;Re&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Thanks&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;purchase&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;       &lt;span class="mf"&gt;0.25&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;            &lt;span class="n"&gt;Re&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Monte&lt;/span&gt; &lt;span class="n"&gt;Carlo&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;little&lt;/span&gt; &lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;confusing&lt;/span&gt; &lt;span class="err"&gt;!&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.28125&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;19481&lt;/span&gt;                              &lt;span class="n"&gt;Re&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Great&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;     &lt;span class="mf"&gt;1.0000&lt;/span&gt;
&lt;span class="mi"&gt;19482&lt;/span&gt;                                            &lt;span class="n"&gt;Re&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;API&lt;/span&gt;       &lt;span class="mf"&gt;0.00&lt;/span&gt;
&lt;span class="mi"&gt;19483&lt;/span&gt;                                           &lt;span class="n"&gt;Question&lt;/span&gt;       &lt;span class="mf"&gt;0.00&lt;/span&gt;
&lt;span class="mi"&gt;19484&lt;/span&gt;                              &lt;span class="n"&gt;Re&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HAPPY&lt;/span&gt; &lt;span class="n"&gt;BIRTHDAY&lt;/span&gt;&lt;span class="err"&gt;!!!&lt;/span&gt;    &lt;span class="mf"&gt;1.00000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using Elasticsearch&lt;/h2&gt;
&lt;p&gt;If you need a primer on using Elasticsearch in Python, check out our previous &lt;a href="http://engineroom.trackmaven.com/blog/first-monthly-challenge-elasticsearch/"&gt;monthly challenge blog post&lt;/a&gt; to get started. If you've already got a similar project going or want to try analyzing your mail in Elasticsearch, you can run the following (while your ES instance is running) to index your inbox:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mailbox&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mbox&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Elasticsearch&lt;/span&gt;

&lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;_timestamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;E, d MMM yyyy HH:mm:ss Z&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;E, d MMM yyyy HH:mm:ss Z&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;labels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;epilogue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Elasticsearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gmail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# When re-running with modifications, you&amp;#39;ll need to remove the current index:&lt;/span&gt;
&lt;span class="c"&gt;# es.indices.delete_mapping(index=&amp;quot;gmail&amp;quot;, doc_type=&amp;quot;message&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gmail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;labels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X-Gmail-Labels&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;epilogue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epilogue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gmail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;All mail Including Spam and Trash.mbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_content_type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;store_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_multipart&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_content_type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;store_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then quickly repeat a few of our pandas analyses in an Elasticsearch-friendly way. For instance, let's get the most common terms out of all subject lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl -XPOST &amp;#39;http://localhost:9200/gmail/_search?pretty=true&amp;amp;search_type=count&amp;#39; -d&amp;#39;
{
    &amp;quot;aggregations&amp;quot;: {
        &amp;quot;most_popular_term&amp;quot;: {
            &amp;quot;terms&amp;quot;: {
                &amp;quot;field&amp;quot;: &amp;quot;body&amp;quot;, 
                &amp;quot;size&amp;quot;: 15,
                &amp;quot;stopwords&amp;quot;: [&amp;quot;the&amp;quot;, &amp;quot;and&amp;quot;]
            }
        }
    }
}&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As before, the results are less than stunning by default:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
  &amp;quot;took&amp;quot; : 54,
  &amp;quot;timed_out&amp;quot; : false,
  &amp;quot;_shards&amp;quot; : {
    &amp;quot;total&amp;quot; : 5,
    &amp;quot;successful&amp;quot; : 5,
    &amp;quot;failed&amp;quot; : 0
  },
  &amp;quot;hits&amp;quot; : {
    &amp;quot;total&amp;quot; : 17466,
    &amp;quot;max_score&amp;quot; : 0.0,
    &amp;quot;hits&amp;quot; : [ ]
  },
  &amp;quot;aggregations&amp;quot; : {
    &amp;quot;most_popular_term&amp;quot; : {
      &amp;quot;buckets&amp;quot; : [ {
        &amp;quot;key&amp;quot; : &amp;quot;the&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 15330
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;to&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 15310
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;and&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 14303
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;you&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 14254
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;for&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 14081
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;a&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 13751
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;of&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 12552
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;is&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 11864
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;on&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 11091
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;i&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 10766
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;at&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 10653
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;fletcher&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 10571
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;your&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 10468
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;in&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 10343
      }, {
        &amp;quot;key&amp;quot; : &amp;quot;if&amp;quot;,
        &amp;quot;doc_count&amp;quot; : 10293
      } ]
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could in this case configure a &lt;a href="http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/custom-analyzers.html"&gt;custom analyzer&lt;/a&gt; that uses the &lt;a href="http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/using-stopwords.html"&gt;stopwords token filter&lt;/a&gt;. Of course, the same TextBlob/NLTK analyses could be used directly on Elasticsearch-indexed content just as well.&lt;/p&gt;
&lt;p&gt;Next steps: analyze your inbox over time; see if you can classify messages to determine sender/label/spam based attributes of the body text; use &lt;a href="http://en.wikipedia.org/wiki/Latent_semantic_indexing"&gt;latent semantic indexing&lt;/a&gt; to uncover the most common general topics covered; feed your sent folder into a Markov model combined with some part-of-speech tagging to generate seemingly coherent auto-replies...&lt;/p&gt;
&lt;p&gt;Please &lt;a href="mailto:engineroom@trackmaven.com"&gt;let us know&lt;/a&gt; if you try out any interesting side projects using NLP - bonus points if you include an open-source repo. You can see previous presentations at &lt;a href="http://challenge.hackpad.com"&gt;challenge.hackpad.com&lt;/a&gt; for more inspiration!&lt;/p&gt;</summary><category term="nlp"></category><category term="elasticsearch"></category></entry><entry><title>Monthly Challenge wrap-up: Elasticsearch</title><link href="http://engineroom.trackmaven.com/blog/monthly-challenge-wrap-up-elasticsearch/" rel="alternate"></link><updated>2014-11-13T00:00:00+01:00</updated><author><name>Fletcher Heisler</name></author><id>tag:engineroom.trackmaven.com,2014-11-13:blog/monthly-challenge-wrap-up-elasticsearch/</id><summary type="html">&lt;p&gt;Thanks to everyone who came out and presented at our inaugural &lt;a href="http://www.meetup.com/TrackMaven-Monthly-Challenge/"&gt;Monthly Challenge meetup&lt;/a&gt;! We had a great variety of Elasticsearch-related projects. Here's a quick rundown from the night:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our &lt;a href="http://engineroom.trackmaven.com/blog/first-monthly-challenge-elasticsearch/"&gt;jumpstart blog post&lt;/a&gt; introduced a basic analysis of top reddit IAMA posts using Python's &lt;a href="https://www.elasticsearch.org/guide/en/elasticsearch/client/python-api/current/"&gt;elasticsearch&lt;/a&gt; client, then visualized some trip history data from &lt;a href="http://www.capitalbikeshare.com/trip-history-data"&gt;Capital Bikeshare&lt;/a&gt; using &lt;a href="http://www.elasticsearch.org/overview/kibana/"&gt;Kibana&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/joshfinnie"&gt;Josh Finnie&lt;/a&gt; shows how to search and "recommend" beer selections with Elasticsearch. Check out the &lt;a href="https://github.com/joshfinnie/beer-rec"&gt;GitHub repo&lt;/a&gt; and &lt;a href="http://www.joshfinnie.com/talks/beer-search-and-recs-in-es/#/"&gt;slides&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TomPanning"&gt;Tom Panning&lt;/a&gt; analyzes NIH data available through the &lt;a href="http://report.nih.gov/"&gt;RePORT portal&lt;/a&gt;. Check out the &lt;a href="https://github.com/tpanning/nih-report"&gt;GitHub repo&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/mlcamilli"&gt;Matt Camilli&lt;/a&gt; enlightens us on how to use headless browsers to scrape Steam game reviews and put them in Elasticsearch. Check out the &lt;a href="https://github.com/mlcamilli/SteamReviewParser"&gt;GitHub repo&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/wsankey"&gt;Will Sankey&lt;/a&gt; explores hospital violations using public CMS data. Check out the &lt;a href="http://slides.com/williamsankey/trackmaven-meetup-deck-11-12-2014"&gt;presentation slides&lt;/a&gt; and the &lt;a href="https://github.com/wsankey/elastic_health"&gt;GitHub repo&lt;/a&gt; of Ruby code.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/cameronmaske"&gt;Cameron Maske&lt;/a&gt; shows off using Elasticsearch with geo spatial data! Take a look at the &lt;a href="https://github.com/cameronmaske/geo-dc"&gt;GitHub repo&lt;/a&gt; for grabbing geospatial data from DC.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next month's topic will be &lt;em&gt;natural language processing&lt;/em&gt;; &lt;a href="http://www.meetup.com/TrackMaven-Monthly-Challenge/events/218683569/"&gt;RSVP to the meetup&lt;/a&gt; and stay tuned for a blog post with some details to get you started. Some possible options...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sentiment analysis&lt;/li&gt;
&lt;li&gt;Topic extraction&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wordnet.princeton.edu/"&gt;WordNet&lt;/a&gt; relationships&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dariusk/NaNoGenMo-2014"&gt;NaNoGenMo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="elasticsearch"></category></entry><entry><title>3-2-1 Backup of Postgres on AWS to S3 and offsite server</title><link href="http://engineroom.trackmaven.com/blog/3-2-1-backup-of-postgres-on-aws-to-s3-and-offsite-server/" rel="alternate"></link><updated>2014-11-09T00:00:00+01:00</updated><author><name>Fred Battista</name></author><id>tag:engineroom.trackmaven.com,2014-11-09:blog/3-2-1-backup-of-postgres-on-aws-to-s3-and-offsite-server/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;3 copies, 2 different media types, 1 offsite, boom, good to go.&lt;/p&gt;
&lt;p&gt;--&lt;cite&gt; Abraham Lincoln&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Backups should be straightforward, automatic, have few moving parts, adhere to the &lt;a href="http://www.dpbestflow.org/backup/backup-overview#321"&gt;3-2-1 rule&lt;/a&gt;, and, most importantly, facilitate easy recovery.&lt;/p&gt;
&lt;p&gt;TrackMaven's applications run on AWS and we've always stored several backups on S3. However, best practices suggest thaht you keep a backup offsite if it is feasible to do so.&lt;/p&gt;
&lt;p&gt;This post details one way to keep multiple backup copies of your database both in S3 and on an offsite server.&lt;/p&gt;
&lt;h2&gt;Preparing your database machine for backup&lt;/h2&gt;
&lt;h3&gt;Create an additional mountpoint for your backup data&lt;/h3&gt;
&lt;p&gt;Unless you have a significant amount of extra space on your DB machines we suggest creating and mounting an additional EBS volume to handle your backup date.&lt;/p&gt;
&lt;p&gt;The instructions to &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html"&gt;create&lt;/a&gt;, &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html"&gt;attach&lt;/a&gt;, and &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html"&gt;mount&lt;/a&gt; another EBS volume (hereafter referrered to as &lt;code&gt;/YOUR_BACKUP_POINT&lt;/code&gt;) are covered by Amazon in the provided links.&lt;/p&gt;
&lt;h3&gt;Setting permissions on new volume&lt;/h3&gt;
&lt;p&gt;Because you created the mountpoint with &lt;code&gt;sudo&lt;/code&gt; it will be owned by &lt;code&gt;root&lt;/code&gt;; we need it to be readable/writeable by other users. Which other users should have access?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pg_dump&lt;/code&gt; is the process we will use to write the backup, and it should be run by the &lt;code&gt;postgres&lt;/code&gt; user so it does not have to authenticate database access (annoying and difficult to do securely within &lt;code&gt;crontab&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We created a new group &lt;code&gt;BACKUPUSERS&lt;/code&gt; and added our &lt;code&gt;ssh_user&lt;/code&gt; and &lt;code&gt;postgres&lt;/code&gt; to it with these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo groupadd BACKUPUSERS
sudo usermod -a -G BACKUPUSERS YOUR_SSH_USER
sudo usermod -a -G BACKUPUSERS postgres
sudo chgrp -R BACKUPUSERS /YOUR_BACKUP_POINT
sudo chmod -R 770 /YOUR_BACKUP_POINT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;H/T to &lt;a href="http://superuser.com/questions/280994/give-write-permissions-to-multiple-users-on-a-folder-in-ubuntu"&gt;this superuser answer&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Initial backup&lt;/h2&gt;
&lt;p&gt;If you haven't created an IAMS user with only S3 permissions, we suggest that you do that now because you'll need the keys for the next step.&lt;/p&gt;
&lt;p&gt;Give the backup S3 user both read and write permissions if you feel your local machine is secure enough to warrant it.&lt;/p&gt;
&lt;p&gt;Install and configure the S3 command line client on the DB machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install s3cmd
s3cmd --configure
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put the following script somewhere on your actual DB machine - uncomment the logging lines if you are running manually and want to debug the script behavior.&lt;/p&gt;
&lt;p&gt;This script will remove yesterday's backups, dump a current copy of the database, compress the current copy of the database, and ship it to S3.&lt;/p&gt;
&lt;h3&gt;DB backup cron script&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# Backup script to pg_dump&lt;/span&gt;
&lt;span class="c"&gt;# &amp;#39;YOUR_DATABASE&amp;#39; db. Assumes that&lt;/span&gt;
&lt;span class="c"&gt;# this is on the crontab of the&lt;/span&gt;
&lt;span class="c"&gt;# postgres user so no authentication&lt;/span&gt;
&lt;span class="c"&gt;# is necessary.&lt;/span&gt;


&lt;span class="nv"&gt;PGDUMP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/pg_dump
&lt;span class="nv"&gt;DATABASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YOUR_DATABASE
&lt;span class="nv"&gt;BACKUP_FOLDER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/YOUR_BACKUP_FOLDER
&lt;span class="nv"&gt;EXPORTFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$BACKUP_FOLDER&lt;/span&gt;/pg_dump_&lt;span class="sb"&gt;`&lt;/span&gt;date +%F&lt;span class="sb"&gt;`&lt;/span&gt;.sql
&lt;span class="nv"&gt;COMPRESSEDFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$EXPORTFILE&lt;/span&gt;.tgz
&lt;span class="nv"&gt;BUCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;s3://YOUR_S3_BUCKET/OPTIONAL_FOLDER/
&lt;span class="nv"&gt;S3CMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/s3cmd
&lt;span class="nv"&gt;LOG_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$BACKUP_FOLDER&lt;/span&gt;/backup_log_file.txt
&lt;span class="nv"&gt;DATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%F&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nv"&gt;REMOVE_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%T&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;Time: &lt;span class="nv"&gt;$REMOVE_TIME&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;Removing yesterdays...
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$DATE&lt;/span&gt;,RemovingOld,&lt;span class="nv"&gt;$REMOVE_TIME&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt;
rm &lt;span class="nv"&gt;$BACKUP_FOLDER&lt;/span&gt;/*.sql*

&lt;span class="nv"&gt;DUMP_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%T&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;Time: &lt;span class="nv"&gt;$DUMP_TIME&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;Dumping...
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$DATE&lt;/span&gt;,DumpBegan,&lt;span class="nv"&gt;$DUMP_TIME&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt;
&lt;span class="nv"&gt;$PGDUMP&lt;/span&gt; -c -f &lt;span class="nv"&gt;$EXPORTFILE&lt;/span&gt; &lt;span class="nv"&gt;$DATABASE&lt;/span&gt;

&lt;span class="nv"&gt;TAR_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%T&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;Time: &lt;span class="nv"&gt;$TAR_TIME&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;Taring...
&lt;span class="nv"&gt;$DATE&lt;/span&gt;,TarBegan,&lt;span class="nv"&gt;$TAR_TIME&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt;
tar -czf &lt;span class="nv"&gt;$COMPRESSEDFILE&lt;/span&gt; &lt;span class="nv"&gt;$EXPORTFILE&lt;/span&gt;

&lt;span class="nv"&gt;S3_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%T&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;Time: &lt;span class="nv"&gt;$S3_TIME&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;s3cmd PUTTING...
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$DATE&lt;/span&gt;,S3Began,&lt;span class="nv"&gt;$S3_TIME&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt;
&lt;span class="nv"&gt;$S3CMD&lt;/span&gt; put &lt;span class="nv"&gt;$COMPRESSEDFILE&lt;/span&gt; &lt;span class="nv"&gt;$BUCKET&lt;/span&gt;
&lt;span class="nv"&gt;$S3CMD&lt;/span&gt; put -f &lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt; &lt;span class="nv"&gt;$BUCKET&lt;/span&gt;

&lt;span class="nv"&gt;DONE_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%T&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$DATE&lt;/span&gt;,Done,&lt;span class="nv"&gt;$DONE_TIME&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="nv"&gt;$LOG_FILE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Set up the crontab&lt;/h3&gt;
&lt;p&gt;Become the &lt;code&gt;postgres&lt;/code&gt; user so you don't have to authenticate in your crontab to access the database:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;su - postgres&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Access your crontab to edit:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;crontab -e&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then add this line to your crontab, which will run your script at the path you specify at 1AM every night:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;`0 1 * * * /YOUR_BACKUP_POINT/YOUR_BACKUP_SCRIPT.sh&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Pull the backup to remote server&lt;/h2&gt;
&lt;p&gt;Install &lt;code&gt;s3cmd&lt;/code&gt; on your local/offsite box, configure it, and create a backup directory structure if you're game.&lt;/p&gt;
&lt;h3&gt;Get/ifnotthenwait/tryagain&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# Script to test if today&amp;#39;s backup HAS&lt;/span&gt;
&lt;span class="c"&gt;# occured, and has been pushed to the&lt;/span&gt;
&lt;span class="c"&gt;# specified S3 bucket - if it has, gets&lt;/span&gt;
&lt;span class="c"&gt;# the file. If not present, wait 30 min&lt;/span&gt;
&lt;span class="c"&gt;# and try again.&lt;/span&gt;
&lt;span class="c"&gt;# Assumptions/Notes:&lt;/span&gt;
&lt;span class="c"&gt;#  * Only checks 10 times after&lt;/span&gt;
&lt;span class="c"&gt;#    initial run&lt;/span&gt;
&lt;span class="c"&gt;#  * Assumes that s3cmd has been&lt;/span&gt;
&lt;span class="c"&gt;#    configured prior to cron init&lt;/span&gt;


&lt;span class="nv"&gt;BUCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;s3://YOUR_BUCKET
&lt;span class="nv"&gt;DATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%F&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pg_dump_&lt;span class="nv"&gt;$DATE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;.sql.tgz&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;FULLPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$BUCKET$FILE&lt;/span&gt;
&lt;span class="nv"&gt;EXISTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;WAIT_TIME_IN_SECONDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1800
&lt;span class="nv"&gt;RETRYS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="nv"&gt;LOCALPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yourlocalpathhere/&lt;span class="nv"&gt;$FILE&lt;/span&gt;

&lt;span class="nb"&gt;echo &lt;/span&gt;Checking &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;$FULLPATH&lt;/span&gt;

get_file_from_s3 &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;#echo getting $FULLPATH&lt;/span&gt;
  s3cmd get &lt;span class="nv"&gt;$FULLPATH&lt;/span&gt; &lt;span class="nv"&gt;$LOCALPATH&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

check_if_backup_complete &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  s3cmd info &lt;span class="nv"&gt;$FULLPATH&lt;/span&gt; &amp;gt;/dev/null 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;EXISTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;get_file_from_s3
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$RETRYS&lt;/span&gt; -lt &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  check_if_backup_complete
  &lt;span class="k"&gt;if&lt;/span&gt; ! &lt;span class="nv"&gt;$EXISTS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    sleep &lt;span class="nv"&gt;$WAIT_TIME_IN_SECONDS&lt;/span&gt;
    &lt;span class="o"&gt;((&lt;/span&gt; RETRYS++ &lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="c"&gt;# echo $RETRYS&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;break&lt;/span&gt;
&lt;span class="nb"&gt;  &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can run this script as any user which has been authed for S3.&lt;/p&gt;
&lt;h2&gt;Keep only 3 backups on S3&lt;/h2&gt;
&lt;p&gt;It is important to not let S3 balloon with tons of backups!&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;FILES&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
FILES+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;s3cmd ls s3://trackmaven-prod-db/pg_dump/ &lt;span class="p"&gt;|&lt;/span&gt; grep tgz &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $4}&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c"&gt;#echo $FILES&lt;/span&gt;

&lt;span class="nv"&gt;SORTEDFILES&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; el in &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$el&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -Vr &lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt; &lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;SORTEDFILES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; i++ &lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; -gt &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;#echo Removing ${SORTEDFILES[$i]}&lt;/span&gt;
    s3cmd del &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SORTEDFILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Keep only n backups on the remote machine&lt;/h2&gt;
&lt;p&gt;Then you need to delete the files on the local machine that you don't need anymore:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;FILES&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
&lt;span class="nv"&gt;FILES&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; /your_backup_location/* &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#echo $FILES&lt;/span&gt;

&lt;span class="nv"&gt;SORTEDFILES&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; el in &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$el&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -Vr &lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt; &lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;SORTEDFILES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; i++ &lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; -gt &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;#echo Removing ${SORTEDFILES[$i]}&lt;/span&gt;
    s3cmd del &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SORTEDFILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Add these scripts to your &lt;code&gt;crontab&lt;/code&gt; as well and you are good to go.&lt;/p&gt;</summary><category term="ops"></category><category term="backups"></category><category term="best-practices"></category></entry><entry><title>Using Bower</title><link href="http://engineroom.trackmaven.com/blog/using-bower/" rel="alternate"></link><updated>2014-11-03T00:00:00+01:00</updated><author><name>Josh Finnie</name></author><id>tag:engineroom.trackmaven.com,2014-11-03:blog/using-bower/</id><summary type="html">&lt;p&gt;Using &lt;a href="http://bower.io"&gt;Bower&lt;/a&gt; can save you a lot of time installing and keeping track of your third-party JavaScript libraries. It can be difficult to keep track of which version of what library you or your team uses, that's why we use it here at TrackMaven. Below I will go into how and why we use it.&lt;/p&gt;
&lt;h2&gt;What is Bower&lt;/h2&gt;
&lt;p&gt;So what is Bower? Bower is the "package manager for the web." It allows you to install and track third-party JavaScript libraries easily. At TrackMaven we use it to install and keep track of all the libraries we use. Below is just a small excerpt from our &lt;code&gt;bower.json&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;dependencies&amp;quot;: {
    &amp;quot;jquery&amp;quot;: &amp;quot;1.11.1&amp;quot;,
    &amp;quot;angular&amp;quot;: &amp;quot;1.2.26&amp;quot;,
    &amp;quot;angular-ui-router&amp;quot;: &amp;quot;0.2.11&amp;quot;,
    &amp;quot;d3&amp;quot;: &amp;quot;3.4.13&amp;quot;,
    ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bower allows for us to not only keep track of what third-party JavaScript libraries we are using, but it also allows us to pin these libraries to certain versions. The ability to pin the versions have become invaluable to us as we grow our engineering team; it allows us to keep our development environment consistent across all our engineers. Another great feature of Bower is that it allows us to install these libraries from many different sources:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Bower Install Examples from http://bower.io/" src="/images/bower-examples.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Initial Setup&lt;/h2&gt;
&lt;p&gt;Next we are going to talk about how to best set up Bower. Installing Bower is simple if you already have Node.js installed. (If you do not have Node.js installed, you can simply follow the directions &lt;a href="http://nodejs.org/download/"&gt;here&lt;/a&gt;.) Once Node.js is installed on your machine, the steps required to install Bower are as followed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm install -g bower
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! The above command installs Bower globally on your machine; this allows you to use Bower for all your projects. &lt;/p&gt;
&lt;p&gt;If you want to use Bower to install a JavaScript library, all you need to do is run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bower install angular
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install angular.js into your &lt;code&gt;bower_components&lt;/code&gt; folder. &lt;/p&gt;
&lt;h3&gt;Saving packages&lt;/h3&gt;
&lt;p&gt;This is great for a one-time installation of Angular, but if you want to create a repeatable workflow, it would be best to have a way to note this installation of Angular and it's version. You do this with your &lt;code&gt;bower.json&lt;/code&gt; file. The easiest way to create a &lt;code&gt;bower.json&lt;/code&gt; file is to run the command &lt;code&gt;bower init&lt;/code&gt;. This will prompt you with a few questions about your project and give you a way to save packages to your project.&lt;/p&gt;
&lt;p&gt;To save a library to your project, just append a &lt;code&gt;--save&lt;/code&gt; or &lt;code&gt;--save-dev&lt;/code&gt; when installing the library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Installs a package and add it to bower.json dependencies
$ bower install angular --save

# Install a package and add it to bower.json devDependencies
$ bower install jasmine --save-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Versioning packages&lt;/h3&gt;
&lt;p&gt;You can also determine what version of a package you want to install by preceding the package with a &lt;code&gt;#&lt;/code&gt; sign. For example, if we do not want Angular 1.2.26 but instead Angular 1.2.12, we could install that version with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bower install angularjs#1.2.12
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was very helpful for us at TrackMaven when starting off with Bower since we wanted to match our current setup as much as we could, and we were running some older versions of JavaScript libraries.&lt;/p&gt;
&lt;h3&gt;Customizations&lt;/h3&gt;
&lt;p&gt;The defaults that come with Bower are pretty sane, but I always feel like the default folder &lt;code&gt;bower_components&lt;/code&gt; is just a bit too clunky. Luckily Bower allows for an easy way to change some defaults. This is done via the &lt;code&gt;.bowerrc&lt;/code&gt; file. Here at TrackMaven, we have three lines to ease our time with Bower:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;directory&amp;quot;: &amp;quot;.bower-cache&amp;quot;,
    &amp;quot;json&amp;quot;: &amp;quot;bower.json&amp;quot;,
    &amp;quot;interactive&amp;quot;: false
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those three line do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;directory&lt;/strong&gt; - Changes the default directory in which Bower installs the libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;json&lt;/strong&gt; - Tells Bowser where your init file is. This allows you to rename it something other than &lt;code&gt;bower.json&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interactive&lt;/strong&gt; - Makes Bower interactive, prompting whenever necessary. We turn this off since we use &lt;a href="http://www.docker.com/"&gt;Docker&lt;/a&gt;, and interactions break our install. This defaults to &lt;code&gt;null&lt;/code&gt; which means &lt;code&gt;auto&lt;/code&gt;, and is likely what you'd want to keep unless you run into issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The entire &lt;code&gt;.bowerrc&lt;/code&gt; configuration options can be found &lt;a href="http://bower.io/docs/config/"&gt;here&lt;/a&gt;. There is a lot of configuration that can be done to Bower, so be sure to take a look.&lt;/p&gt;
&lt;h2&gt;Benefits&lt;/h2&gt;
&lt;p&gt;The benefits of Bower for TrackMaven were seen immediately. After setting up Bower we had a simple way to keep track of not only what third-party libraries we use for our application, but even what versions of those libraries. This has cut down the time it takes us to spin up our development environments and cut down on the bugs we see when using slightly different versions of third-party libraries. Bower also allowed us to easily integrate our third-party libraries into our build process which allowed us to concatenate and minify them all seamlessly.&lt;/p&gt;
&lt;h3&gt;Searching&lt;/h3&gt;
&lt;p&gt;Bower give you the ability to search for packages within its system. This is accomplished by using the &lt;code&gt;search&lt;/code&gt; parameter. Running this command, &lt;code&gt;bower search angularjs&lt;/code&gt; returns the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bower search angularjs
Search results:

angularjs-nvd3-directives git://github.com/cmaurer/angularjs-nvd3-directives.git
AngularJS-Toaster git://github.com/jirikavi/AngularJS-Toaster.git
angularjs git://github.com/angular/bower-angular.git
angular-facebook git://github.com/Ciul/Angularjs-Facebook.git
angularjs-file-upload git://github.com/danialfarid/angular-file-upload-bower.git
angularjs-rails-resource git://github.com/FineLinePrototyping/dist-angularjs-rails-resource
angularjs-geolocation git://github.com/arunisrael/angularjs-geolocation.git
angularjs-utilities git://github.com/realcrowd/angularjs-utilities.git
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These are all the packages that are available through Bower which contain the word "angularjs". The search ability is very useful especially when using third-party libraries like Angular.js which have a vast plugin ecosystem.&lt;/p&gt;
&lt;h2&gt;Drawbacks&lt;/h2&gt;
&lt;p&gt;The drawbacks of Bower are few and far between, but one of the major issues we had in using Bower was the lack of adoption with some third-party libraries. It takes a non-trivial effort to make your library compatible with Bower and some just haven't taken the time. Adding these libraries to our automated build process took quite the effort, but in the long run it was worth it.&lt;/p&gt;
&lt;h3&gt;Dealing with the drawbacks&lt;/h3&gt;
&lt;p&gt;One of the biggest headaches we ran into with using Bower was the lack of consistency within the bower packages themselves. This is okay if you are just using the third-party libraries directly in your HTML, but at TrackMaven we wanted to concatenate and minify our JavaScript libraries. At TrackMaven, we use &lt;a href="http://gulpjs.com/"&gt;Gulp.js&lt;/a&gt; as our build system, and after some research we found a Gulp package that allowed us to deal with our Bower packages. &lt;a href="https://www.npmjs.org/package/gulp-bower-files"&gt;Gulp-Bower-Files&lt;/a&gt; gives your Gulp process an ability to interact with your installed Bower packages. With a small addition to our &lt;code&gt;bower.json&lt;/code&gt; file we can tell Gulp-Bower-Files what file should be used for what Bower package. This removes a huge headache from using Bower. Below is an excerpt from our &lt;code&gt;bower.json&lt;/code&gt; file to show what I mean:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;overrides&amp;quot;: {
  &amp;quot;canvg&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;canvg.js&amp;quot;
  },
  &amp;quot;underscore&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;underscore.js&amp;quot;
  },
  &amp;quot;moment&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;moment.js&amp;quot;
  },
  &amp;quot;jspdf&amp;quot;: {
    &amp;quot;main&amp;quot;: &amp;quot;dist/jspdf.debug.js&amp;quot;
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those who use the other JavaScript build system &lt;a href="http://gruntjs.com/"&gt;Grunt.js&lt;/a&gt;, it looks like the creator of Gulp-Bower-Files has deprecated it in favor of its updated version &lt;a href="https://www.npmjs.org/package/main-bower-files"&gt;Main-Bower-Files&lt;/a&gt;. This should have Grunt support in the future.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, if you have not looked into using Bower, I highly recommend it. Integration into our workflow took a little bit of time, but the benefits we are seeing from it are quite amazing!&lt;/p&gt;</summary><category term="javascript"></category><category term="bower"></category><category term="how-to"></category></entry><entry><title>A Better Development Environment with Docker and Fig</title><link href="http://engineroom.trackmaven.com/blog/a-better-development-environment-with-docker-and-fig/" rel="alternate"></link><updated>2014-10-28T00:00:00+01:00</updated><author><name>Cameron Maske</name></author><id>tag:engineroom.trackmaven.com,2014-10-28:blog/a-better-development-environment-with-docker-and-fig/</id><summary type="html">&lt;p&gt;Local development environments can be a nightmare.
Have you ever run into a scenario where something works on your machine but not on your colleagues'?
Having to spend time debugging platform-specific problems is a frustrating productivity sink.&lt;/p&gt;
&lt;p&gt;Before we explore how to set up our stress free development environment, let's consider what key elements it should have.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Isolated. No other project should affect it and it shouldn't affect any other projects. For example, if one project uses Python 2.7, that shouldn't affect another project which uses Python 3.4.&lt;/li&gt;
&lt;li&gt;Repeatable. Write it once and have it work each time. I don't want to have to spend time tweaking it for each user.&lt;/li&gt;
&lt;li&gt;Be as close to production as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All that sounds great. But how do we achieve this?&lt;/p&gt;
&lt;p&gt;Enter Docker. If you are unfamiliar with what Docker is, Solomon Hykes (founder and CTO of Docker) gives a great &lt;a href="http://youtu.be/Q5POuMHxW-0?t=2m18s"&gt;introduction talk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Docker lends itself perfectly to our 3 requirements above. Docker was built to solve the problem of "run it once, run it everywhere". Docker containers are isolated, portable and repeatable.&lt;/p&gt;
&lt;p&gt;But building, booting and managing containers can take a fair few complex shell commands.&lt;/p&gt;
&lt;p&gt;The missing link is Fig. Fig describes itsself as a tool to create &lt;a href="https://github.com/docker/fig/"&gt;fast, isolated development environments&lt;/a&gt; using Docker.&lt;/p&gt;
&lt;p&gt;Fig moves all the configuration required to orchestra Docker into a simple clear &lt;code&gt;fig.yml&lt;/code&gt; file. It handles all the work of building and running containers, forwarding their ports, sharing volumes, and linking them.&lt;/p&gt;
&lt;p&gt;Let's explore Fig by example, and let's make it challenging.&lt;/p&gt;
&lt;p&gt;I want a project with TWO databases, &lt;code&gt;Postgres 9.1&lt;/code&gt; and &lt;code&gt;ElasticSearch 1.1&lt;/code&gt;. I want &lt;code&gt;Redis 2.8.3&lt;/code&gt; for caching, and I'll be running my main site through a Python-powered Flask app.&lt;/p&gt;
&lt;p&gt;Before we set this up in Fig, imagine setting this up locally. How long would it take?&lt;/p&gt;
&lt;p&gt;Thought experiment over; let's dive into an example. All code featured is available in this &lt;a href="https://github.com/TrackMaven/using-fig"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;An example&lt;/h3&gt;
&lt;p&gt;Let's start with the &lt;code&gt;fig.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;elasticsearch&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;elasticsearch&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9200:9200&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9300:9300&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;orchardup&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5432:5432&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;POSTGRESQL_DB&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;test_db&lt;/span&gt;
&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;trackmaven&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6379:6379&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In less then 30 lines of yaml, I've declared our stack.&lt;/p&gt;
&lt;p&gt;With &lt;a href="http://www.fig.sh/install.html"&gt;Fig installed&lt;/a&gt; we can start our stack by running &lt;code&gt;fig up&lt;/code&gt;.&lt;/p&gt;
&lt;iframe src="https://gfycat.com/ifr/SlightZestyGlassfrog" frameborder="0" scrolling="no" width="100%" &gt;&lt;/iframe&gt;

&lt;p&gt;Let's break down what our simple command above did into 2 stages.&lt;/p&gt;
&lt;h4&gt;Building stage.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull orchardup/postgres
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull trackmaven/redis
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull dockerfile/elasticsearch
&lt;span class="nv"&gt;$ &lt;/span&gt;docker build -t demo_web -rm&lt;span class="o"&gt;=&lt;/span&gt;True web
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Equivalent docker commands preformed by Fig&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fig goes through each service, then, if needed, builds an image.&lt;/p&gt;
&lt;p&gt;Building is based off a &lt;a href="http://docs.docker.com/reference/builder/"&gt;Dockerfile&lt;/a&gt; that contains all the required steps to produce our desired image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Our base image is Ubuntu 13.04
FROM stackbrew/ubuntu:raring
# Install any updates
RUN apt-get -y update
# Ensure python is installed and postgres drivers.
RUN apt-get install -y python python-pip python-psycopg2

WORKDIR /code
ADD requirements.txt requirements.txt
RUN pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our example project, our &lt;a href="https://github.com/TrackMaven/using-fig/blob/master/web/Dockerfile"&gt;Dockerfile&lt;/a&gt; builds on top of an Ubuntu base. It ensures Python and pip are installed before installing our project-specific Python packages from requirements.txt.&lt;/p&gt;
&lt;p&gt;Alternatively, you can point services towards a pre-built image.
This can exist either locally, and be referenced by a tag or a partial image ID, or remotely, on Docker's &lt;a href="https://registry.hub.docker.com/"&gt;public registry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Building a container off a Dockerfile works best for a  service that is dependent on code within your project. In this case, the core logic for our Python-powered app is in our source control. In contrast, images work best for services that don't rely as heavily on project-specific code (e.g. the datastores).&lt;/p&gt;
&lt;p&gt;Once Fig is satisfied all the required images are built or pulled, it's then time to run the services...&lt;/p&gt;
&lt;h4&gt;Running stage.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --rm --name demo_es_1 -v &lt;span class="s2"&gt;&amp;quot;elasticsearch:/data&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;9200:9200&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;9300:9300&amp;quot;&lt;/span&gt; dockerfile/elasticsearch
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --rm --name demo_db_1 -p &lt;span class="s2"&gt;&amp;quot;5432:5432&amp;quot;&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;POSTGRESQL_DB:test_db&amp;quot;&lt;/span&gt; orchardup/postgres
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --rm --name demo_redis_1 -p &lt;span class="s2"&gt;&amp;quot;6379:6379&amp;quot;&lt;/span&gt; trackmaven/redis
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --rm --name demo_web_1 -v &lt;span class="s2"&gt;&amp;quot;web:/code&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt; --link es:demo_es_1 --link db:demo_db_1 --link redis:demo_redis_1 demo_web python app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Equivalent docker commands preformed by Fig&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each service has a variety of run time options, including...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt;: Allows you to share folders between your host machine and the services' docker containers. In our example, the &lt;code&gt;web&lt;/code&gt; folder is shared, so any code changes to the contained files are immediately updated on the running container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt;: Exposes ports between the host (you) and the container (service).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt;: Allows you to set environment variables for containers. In our example, this allows us to configure the name of our database, &lt;a href="https://github.com/orchardup/docker-postgresql/blob/master/run"&gt;due to a clever run script&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;links&lt;/code&gt;: &lt;a href="http://www.fig.sh/env.html"&gt;Allows inter-service communication&lt;/a&gt;. In our example, &lt;code&gt;web&lt;/code&gt; needs to know the ip and ports for the &lt;code&gt;redis&lt;/code&gt;, &lt;code&gt;db&lt;/code&gt; and &lt;code&gt;es&lt;/code&gt; services. Fig ensures those boot up first and then injects a set of environment variables to &lt;code&gt;web&lt;/code&gt; which include the IP address and various ports of the linked services.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To stop the running services you kill them with &lt;code&gt;Ctrl+C&lt;/code&gt; or run &lt;code&gt;fig stop&lt;/code&gt; in another terminal window.&lt;/p&gt;
&lt;p&gt;Behind the scenes, Fig has used Docker to build and then run containers for each service. Running &lt;code&gt;fig up&lt;/code&gt; again will restart the previously created containers whose volume changes (files, folders, etc) persist between boots. This means that if you have added data to one of the data stores it will still be present between restarts. You can remove the containers associated with services, and thus any volume changes, by running &lt;code&gt;fig remove [SERVICE]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After a successful build of a service Fig won't attempt to rebuild that service on the next &lt;code&gt;up&lt;/code&gt;. That means if you want to make any changes to a built service's &lt;code&gt;Dockerfile&lt;/code&gt;, you'll need to tell Fig to &lt;code&gt;rebuild&lt;/code&gt; that image by using &lt;code&gt;fig build [SERVICE]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fig also gives you the ability to run one-off commands in services using &lt;code&gt;fig run [SERVICE] [COMMAND]&lt;/code&gt;, e.g. &lt;code&gt;fig run web python&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;That's it!&lt;/h3&gt;
&lt;p&gt;For more about what Fig can do, I'd suggest checking out the
&lt;a href="http://www.fig.sh/index.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Tips we've learnt along the way.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Try to use images when you can. Each layer is pulled in parallel, resulting in a quick download. An image is also frozen. Without careful version pinning, re-building images can change over time. Try to move as many non-project specific steps out of your Dockerfiles into new base images. For example, in our web service, the python and pip installation steps are good canditates to be contained in base images.&lt;/li&gt;
&lt;li&gt;Across teams, try to all use the same version of Docker and Fig. Both are moving fast and not insusceptible to version differences.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="docker"></category><category term="fig"></category><category term="how-to"></category></entry><entry><title>First Monthly Challenge: Elasticsearch!</title><link href="http://engineroom.trackmaven.com/blog/first-monthly-challenge-elasticsearch/" rel="alternate"></link><updated>2014-10-20T00:00:00+02:00</updated><author><name>Fletcher Heisler</name></author><id>tag:engineroom.trackmaven.com,2014-10-20:blog/first-monthly-challenge-elasticsearch/</id><summary type="html">&lt;p&gt;TrackMaven has begun hosting a &lt;a href="http://www.meetup.com/TrackMaven-Monthly-Challenge/"&gt;Monthly Challenge meetup&lt;/a&gt;! Each month, we will name a general topic, a new technology, or something in between. We'll collect a few resources and examples to get everyone started (hence this post), then we'll meet up in a month to share short presentations on everyone's new projects.&lt;/p&gt;
&lt;p&gt;Our first topic is &lt;strong&gt;Elasticsearch&lt;/strong&gt;, an incredibly powerful search and analytics engine. Go &lt;a href="http://www.elasticsearch.org/overview/elasticsearch"&gt;here&lt;/a&gt; for a high level, buzzword-heavy overview, or just jump into &lt;a href="http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/"&gt;the documentation&lt;/a&gt; if you're feeling bold.&lt;/p&gt;
&lt;p&gt;Built on top of &lt;a href="http://lucene.apache.org/core/"&gt;Lucene&lt;/a&gt;, Elasticsearch is most frequently used to add full text search functionality; it comes out of the box with a rich query language that supports fuzzy matching and advanced &lt;a href="http://lucene.apache.org/core/3_0_3/queryparsersyntax.html"&gt;parsing patterns&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'll go into the details of a sample project to get you started below. A few Elasticsearch-inspired possibilities for projects might be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide real-time text search over a large corpus (ie, some subset of &lt;a href="http://www.gutenberg.org/"&gt;Project Gutenburg&lt;/a&gt;, a bunch of product reviews, etc.)&lt;/li&gt;
&lt;li&gt;Beyond search, &lt;em&gt;analysis&lt;/em&gt; of a large set of text: determine similar authors based on vocabulary, compare word usage over time using Google Books data, or see what stands out in the language of spammy emails&lt;/li&gt;
&lt;li&gt;Task logging and visualization of results with &lt;a href="http://www.elasticsearch.org/overview/logstash/"&gt;Logstash&lt;/a&gt; and &lt;a href="http://www.elasticsearch.org/overview/kibana/"&gt;Kibana&lt;/a&gt;, the Elasticsearch &lt;a href="http://www.elasticsearch.org/webinars/introduction-elk-stack/"&gt;"ELK" stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data analyses using &lt;a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html"&gt;aggregations&lt;/a&gt; on any sort of tabular data: financial records, movie reviews, census results...&lt;/li&gt;
&lt;li&gt;Find unusual patterns in weather data or crime data by location&lt;/li&gt;
&lt;li&gt;Create a better real-time Twitter search by combining Elasticsearch with NLP on Twitter's streaming API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elasticsearch communicates over a RESTful API using JSON. There are a &lt;a href="http://www.elasticsearch.org/guide/en/elasticsearch/client/"&gt;large number of clients&lt;/a&gt; to get you started in many different languages. We will be using the &lt;a href="http://elasticsearch-py.readthedocs.org/en/master/"&gt;Python wrapper&lt;/a&gt; in our examples, but there is also &lt;a href="http://www.elasticsearch.org/guide/en/elasticsearch/client/javascript-api/current/quick-start.html"&gt;Elasticsearch.js&lt;/a&gt; if that's more your style. You can also cURL POST data directly into Elasticsearch manually, although that may not scale well...&lt;/p&gt;
&lt;p&gt;Let's get started! &lt;a href="http://www.elasticsearch.org/download/"&gt;Download ES&lt;/a&gt; and unpack it into a directory/project of your choice. You can then run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/bin/elasticsearch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;By default, Elasticsearch sits on port 9200. Once it's booted up, you can visit:
http://localhost:9200/&lt;/p&gt;
&lt;p&gt;in your browser and see something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
  &amp;quot;status&amp;quot; : 200,
  &amp;quot;name&amp;quot; : &amp;quot;Some Really Weird Name&amp;quot;,
  &amp;quot;version&amp;quot; : {
    &amp;quot;number&amp;quot; : &amp;quot;1.3.4&amp;quot;,
    &amp;quot;build_hash&amp;quot; : &amp;quot;a70f3ccb52200f8f2c87e9c370c6597448eb3e45&amp;quot;,
    &amp;quot;build_timestamp&amp;quot; : &amp;quot;2014-11-01T09:07:17Z&amp;quot;,
    &amp;quot;build_snapshot&amp;quot; : false,
    &amp;quot;lucene_version&amp;quot; : &amp;quot;4.9&amp;quot;
  },
  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's put some data in! Install the libraries &lt;code&gt;elasticsearch&lt;/code&gt; and &lt;code&gt;requests&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install elasticsearch requests
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then run this demo script to load in the top 100 Reddit "IAMA" posts (where a famous or otherwise interesting person makes a Reddit post to say "I Am A ___, Ask Me Anything"):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Elasticsearch&lt;/span&gt;

&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Elasticsearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# Return a response of the top 100 IAMA Reddit posts of all time&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://api.reddit.com/r/iama/top/?t=all&amp;amp;limit=100&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;TrackMaven&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;selftext&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="s"&gt;&amp;#39;ups&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;downs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;num_comments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Loop through results and add each data dictionary to the ES &amp;quot;reddit&amp;quot; index&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iama&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iama&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reddit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;iama&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Elasticsearch arranges everything by an &lt;strong&gt;indexes&lt;/strong&gt;, which can usually be thought of as the equivalent of a database in SQL terms, and &lt;strong&gt;document types&lt;/strong&gt;, which in SQL terms would be individual tables. Each document type can then hold chunks of JSON data (the &lt;strong&gt;body&lt;/strong&gt;), each labeled by an &lt;strong&gt;id&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In Elasticsearch, if an index does not already exist then it will be created automatically when you first try to add data to it. Note that if we had just tried to run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iama&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;children&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;reddit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;iama&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;iama&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and stored &lt;em&gt;all&lt;/em&gt; the returned fields, we would have run into a parsing error. This is because Elasticsearch tries to guess at the data types best suited for storing on the fly, but it doesn't always guess correctly. This is one reason why it's a good idea to create a new index using an explicit &lt;a href="http://www.elasticsearch.org/guide/reference/mapping/"&gt;mapping&lt;/a&gt; to define how you want each field stored ahead of time.&lt;/p&gt;
&lt;p&gt;Now that the index is populated with data, you can run search queries against Elasticsearch through cURL or directly in your browser. Try these out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http://localhost:9200/reddit/iama/_search?pretty=true&amp;amp;size=3
http://localhost:9200/reddit/iama/_search?pretty=true&amp;amp;q=title:almost
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Elasticsearch documentation &lt;a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html"&gt;here&lt;/a&gt; gives some more examples of the types of queries you can make.&lt;/p&gt;
&lt;p&gt;Let's use the Python wrapper to make some queries as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Elasticsearch&lt;/span&gt;

&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Elasticsearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# Fetch a specific result&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;reddit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;iama&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Update the index to be able to query against it&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reddit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Query for results: nothing will match this author&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reddit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;no results here!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="c"&gt;# Query for all results (no matching criteria)&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reddit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_all&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Query based on text appearing in the title&lt;/span&gt;
&lt;span class="c"&gt;# (by default matches across capitalization, pluralization, etc)&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reddit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;obama&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, you could build more functionality around the built-in search or use &lt;a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html"&gt;aggregations&lt;/a&gt; to perform broader analysis on the data.&lt;/p&gt;
&lt;p&gt;For now, let's try working with some time series data so that we can make some pretty charts. Download a CSV of some &lt;a href="http://www.capitalbikeshare.com/trip-history-data"&gt;trip history data&lt;/a&gt; from Capital Bikeshare.&lt;/p&gt;
&lt;p&gt;We'll create a mapping before storing our data this time. We can specify that certain string fields are "not_analyzed" as well, meaning that rather than try to parse out the text in "D St &amp;amp; Maryland Ave NE", Elasticsearch will treat it as a single string not to be broken up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;elasticsearch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Elasticsearch&lt;/span&gt;

&lt;span class="c"&gt;# Map the fields of a new &amp;quot;trip&amp;quot; doc_type&lt;/span&gt;
&lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;trip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;duration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;start_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;start_station&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;not_analyzed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;start_terminal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;end_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;end_station&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;not_analyzed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;end_terminal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;bike_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;subscriber&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Create a new &amp;quot;bikeshare&amp;quot; index that includes &amp;quot;trips&amp;quot; with the above mapping&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Elasticsearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bikeshare&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bikeshare&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Import a CSV file of trip data - this will take quite a while!&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;2014-Q2-Trips-History-Data.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# Skip header row&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;trip_seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;duration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;trip_seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;start_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;start_station&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;start_terminal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;end_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;end_station&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;end_terminal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;bike_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;subscriber&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bikeshare&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doc_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;trip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run a couple queries to make sure data stored as expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http://localhost:9200/bikeshare/trip/_search?size=3&amp;amp;pretty=true
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's graph some results with Kibana! A browser-based analytics dashboard built for adding visualization to Elasticsearch, Kibana is usually used for analyzing data over time (ie, tracking log events as a time series). In this case, we haven't collected timestamps, but &lt;/p&gt;
&lt;p&gt;Start by &lt;a href="http://www.elasticsearch.org/overview/kibana/installation/"&gt;downloading Kibana&lt;/a&gt;. While Elasticsearch is still up and running, you can separately visit Kibana's directory and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m SimpleHTTPServer 9201
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you now visit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http://localhost:9201/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you should be able to see Kibana's default interface. Click "Blank Dashboard" at the bottom to get started, or let Kibana fill in some default panels. Add a row of query results using a "table" panel and try searching for &lt;code&gt;subscriber:registered&lt;/code&gt; at the top instead of the default &lt;code&gt;*&lt;/code&gt; to see the results limit. (To add a panel to a new row, click the green "+" on the far left.)&lt;/p&gt;
&lt;p&gt;Let's see the proportion of registered users in a chart. Add a new row to the dashboard, then add a &lt;strong&gt;terms&lt;/strong&gt; type panel to that row. Give it a title "Subscriber types" and take the &lt;strong&gt;count&lt;/strong&gt; of the &lt;strong&gt;field&lt;/strong&gt; "subscribers" for a &lt;em&gt;style&lt;/em&gt;* of "bar" or "pie". This should create a chart of the registered versus casual bikeshare users:
&lt;center&gt;&lt;img alt="ElasticSearch Chart 1" src="/images/ESchart1.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Try taking a look at the distribution of top ending stations, &lt;code&gt;end_station&lt;/code&gt;, in a similar way:
&lt;center&gt;&lt;img alt="ElasticSearch Chart 2" src="/images/ESchart2.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Now we can run search queries and get real-time updates on these charts; try searching for &lt;code&gt;start_station:"Lincoln Memorial"&lt;/code&gt; to see where riders end their journey when they start at the Lincoln Memorial.&lt;/p&gt;
&lt;p&gt;Next steps: examine results across time, analyze the total duration of trips, add geocoding and map the results, find the bikes that have traveled the farthest total distance... Even if you aren't attending the meetup, please let us know if you try out any interesting side projects using Elasticsearch - bonus points if you include an open-source repo that we could share here!&lt;/p&gt;</summary><category term="elasticsearch"></category></entry><entry><title>So You Want Another PostgreSQL Database? (Part 2)</title><link href="http://engineroom.trackmaven.com/blog/so-you-want-another-postgresql-database-part-2/" rel="alternate"></link><updated>2014-10-18T00:00:00+02:00</updated><author><name>John Young</name></author><id>tag:engineroom.trackmaven.com,2014-10-18:blog/so-you-want-another-postgresql-database-part-2/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Read &lt;a href="/blog/so-you-want-another-postgresql-database-part-1/"&gt;Part 1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Automatic nightly base backups to Amazon S3 using WAL-E&lt;/h2&gt;
&lt;p&gt;In the first part of this series of posts, we set up streaming replication between a primary database and a replica database by shipping WAL files between them. While functional, it lacks the robustness and safety that a production database requires. To add an additional layer of protection to our process, we ship our WAL files to S3 so that our replica can ALWAYS bring itself up to date regardless of an enormous write load on the primary or a temporary network disruption preventing the primary and replica from communicating with each other. &lt;/p&gt;
&lt;p&gt;We also create a base backup of our database nightly and send that to S3 so that we can restore our database to any point in time we need in case of catastrophe. With a base backup and the WAL files written since that backup was taken, your database can very easily be recovered to any point in time you specify.&lt;/p&gt;
&lt;h3&gt;S3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;First things first, create a bucket on S3 to store our backups&lt;/li&gt;
&lt;li&gt;Turn on versioning as a safeguard against file manipulation&lt;/li&gt;
&lt;li&gt;Create a user in AWS IAM to have Put access to the S3 bucket&lt;/li&gt;
&lt;li&gt;Give the user read/put access, but NOT delete access. If, for some reason, our database server is compromised and an attacker gets our AWS credentials for this user, they will be able to overwrite our files but not delete them. Thanks to versioning, overwriting of our files is a non-issue. If the name of our bucket is db-backup, a policy like this will do:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2014-05-14&amp;quot;,
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1399394132000&amp;quot;,
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
      &amp;quot;Action&amp;quot;: [
        &amp;quot;s3:GetObject&amp;quot;,
        &amp;quot;s3:ListBucket&amp;quot;,
        &amp;quot;s3:PutObject&amp;quot;
      ],
      &amp;quot;Resource&amp;quot;: [
        &amp;quot;arn:aws:s3:::db-backup&amp;quot;,
        &amp;quot;arn:aws:s3:::db-backup/*&amp;quot;
      ]
    }
  ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create a new user, making sure to save their AWS credentials (access key AND secret key), and add them to the newly created group&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Master and Slave Database Servers&lt;/h3&gt;
&lt;p&gt;Install WAL-E and its dependencies, then set it up by saving your bucket name, AWS user's access key, and AWS user's secret key.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install daemontools python-dev lzop pv python-pip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I ran into problems with my older version of six, so just to be safe... &lt;code&gt;sudo pip install -U six&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo pip install wal-e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set up WAL-E:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;umask u=rwx,g=rx,o=
sudo mkdir -p /etc/wal-e.d/env
echo &amp;quot;&amp;lt;AWS SECRET KEY&amp;gt;&amp;quot; | sudo tee /etc/wal-e.d/env/AWS_SECRET_ACCESS_KEY
echo &amp;quot;&amp;lt;AWS ACCESS KEY&amp;gt;&amp;quot; | sudo tee /etc/wal-e.d/env/AWS_ACCESS_KEY_ID
echo &amp;#39;s3://db-backup/&amp;#39; | sudo tee /etc/wal-e.d/env/WALE_S3_PREFIX
sudo chown -R root:postgres /etc/wal-e.d
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;That's all there is to it when it comes to setting up WAL-E. Ensure that the following options are set correctly in /etc/postgresql/9.3/main/postgresql.conf:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wal_level = &amp;#39;hot_standby&amp;#39;
archive_mode = on
archive_command = &amp;#39;envdir /etc/wal-e.d/env /usr/local/bin/wal-e wal-push %p&amp;#39;
archive_timeout = 60
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Become the postgres user: &lt;code&gt;su - postgres&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set up a cron job: &lt;/li&gt;
&lt;li&gt;&lt;code&gt;crontab -e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 2 * * * /usr/bin/envdir /etc/wal-e.d/env /usr/local/bin/wal-e backup-push /data/trackmaven&lt;/code&gt; will push a base backup of the master database to S3 at 2am nightly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also need to clean up our S3 bucket by deleting old base backups. This can be done manually, but can also be done with WAL-E. You will need to add Delete permissions to the bucket before WAL-E can do it, so understand the risks that are associated with that. The following command will keep the 5 most recent base backups and delete all others at 2:30am nightly. We could schedule it to run after the nightly backup like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;crontab -e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;30 2 * * * /usr/bin/envdir /etc/wal-e.d/env /usr/local/bin/wal-e delete --confirm retain 5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Continue onto &lt;a href="/blog/so-you-want-another-postgresql-database-part-3/"&gt;Part 3&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary><category term="postgres"></category><category term="double-database"></category><category term="how-to"></category></entry><entry><title>Building a Testable D3 Charting Application Within Angular.js</title><link href="http://engineroom.trackmaven.com/blog/building-a-testable-d3-charting-application-within-angularjs/" rel="alternate"></link><updated>2014-10-04T00:00:00+02:00</updated><author><name>Fred Battista</name></author><id>tag:engineroom.trackmaven.com,2014-10-04:blog/building-a-testable-d3-charting-application-within-angularjs/</id><summary type="html">&lt;h2&gt;Why this post?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Most of the examples on d3js.org are much smaller, proof of concept applications which funcion well as a single page app but not necessarily in the reuseable context of a larger, more complex app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This post assumes familiarity with Angular.js' concepts of Controllers, Directives, and Services, Jasmine's testing framework, and d3 concepts like axis, scale, and path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d3.js' customizeability can rapidly lead to a fragile codebase within larger applications. We provide some suggestions on how to modularize and then test a charting application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;nb: At TrackMaven, we use Coffeescript+Angular to manage our frontend.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Graphing is a core feature of TrackMaven's application. As we added more graph types, it became obvious that a monolithic hunk of coffeescript was not an ideal foundation.&lt;/p&gt;
&lt;p&gt;Our solution was to separate the graphing bloc into separate factories, services, and directories to enable code reuse and testing along the lines of the actual components of the SVG itself.&lt;/p&gt;
&lt;p&gt;We think that everything that was previously a section of chained definitions (e.g &lt;code&gt;element.attr('','')..&lt;/code&gt;) could be promoted to its own function within a service.&lt;/p&gt;
&lt;p&gt;This means that our graph's many layers and variables which were all previously defined within a single directive like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;svg = d3.select(element[0])
y = d3.scale.linear()
x = d3.time.scale()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;angular.module(&amp;#39;graphing.directives.visualizer&amp;#39;)

.service(&amp;#39;graphBase&amp;#39;, (dateFilter) -&amp;gt;
    class GraphBase
        generate: (element) -&amp;gt;
            @generateSvg(element)
            @generateAxises()
            ...

        generateSvg: (element) -&amp;gt;
            @svg = d3.select(element[0])
            ...

        generateAxises: -&amp;gt;
            @yAxis = d3.svg.axis()
            @xAxis = d3.svg.axis()
            ...

        svgContainer: -&amp;gt;
            @svgContainer = @svg.append(&amp;quot;svg:g&amp;quot;)
                .attr(&amp;quot;class&amp;quot;, &amp;quot;svg-container&amp;quot;)
                .attr(&amp;quot;transform&amp;quot;, &amp;quot;translate(#{@sidePadding})&amp;quot;)

            return @svgContainer

        graphContainer: -&amp;gt;
            @graphContainer = @svgContainer.append(&amp;quot;svg:g&amp;quot;)
                .attr(&amp;quot;class&amp;quot;, &amp;quot;graph-canvas&amp;quot;)
                .attr(&amp;quot;id&amp;quot;, &amp;quot;graph-svg&amp;quot;)

            @graphContainer.append(&amp;quot;svg:rect&amp;quot;)
                .attr(&amp;quot;width&amp;quot;, @width)
                .attr(&amp;quot;height&amp;quot;, @height)
                .style(&amp;quot;fill&amp;quot;, &amp;#39;white&amp;#39;)

            return @graphContainer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The advantages of this approach may not be immediately obvious (extra work! why?) but within the context of d3 and enterprise software they are important.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Separate definition of container from its initialization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Firstly, the defenition/creation of graphical layers has been separated from their initialization. This can be somewhat confusing but is a consequence of the &lt;a href="http://www.w3.org/TR/SVG/"&gt;SVG spec&lt;/a&gt; having no support for a z-index. There is no way to change the 'stacked' order of elements on an SVG except by manually redrawing the elements again in the correct order.&lt;/p&gt;
&lt;p&gt;By separating the container definition from the initialization it becomes much easier to correctly draw and test the order of SVG elements. This is of especial importance when clipping masks are in play - untangling long code blocks is annoying.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Easily change and re-initialize graph types&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With the returned values on the graphBase object it becomes trivial to alter the properties as needed. If I need to give the svgContainer a green background it is as simple as: &lt;code&gt;@svgContainer.style('background-color','green')&lt;/code&gt; WHEREVER I need to make the change. I do not need to hunt for the block where the &lt;code&gt;svgContainer&lt;/code&gt; is created.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Testing is easier/feasible&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Testing is easier with this approach. Previously, any change in the monolithic code block had the potential ta affect every test. With the modular approach, your integration tests may fail but you unit tests have a much higher chance of survival.&lt;/p&gt;
&lt;p&gt;With the above setup it is possible to mock and test the creation of elements with specific ids on any given SVG. This is very difficult to do with a giant block of code.&lt;/p&gt;
&lt;p&gt;For instance, this is the first test of our graph tooltips:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    it &amp;#39;should correctly render tooltips&amp;#39;, -&amp;gt;
        tooltips.redraw(mockData)
        tips = d3.select(element[0]).selectAll(&amp;#39;.graph-tooltip&amp;#39;)[0]
        expect(tips.length).toEqual(1)
        expect(tips[0].style[&amp;#39;left&amp;#39;]).toEqual(&amp;#39;32px&amp;#39;)
        expect(tips[0].style[&amp;#39;top&amp;#39;]).toEqual(&amp;#39;10px&amp;#39;)
        expect(element[0].innerText).toContain(&amp;#39;100&amp;#39;)
        expect(element[0].innerText).toContain(&amp;#39;XXXXXX-BBBBB&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;None of the above is revolutionary&lt;/h3&gt;
&lt;p&gt;Nothing above is news: modularizing and re-factoring for code reuse is good practice generally. However, client side graphing code can be difficult to unravel and we think that our approach of service modularization is helpful.&lt;/p&gt;
&lt;h3&gt;Next steps&lt;/h3&gt;
&lt;p&gt;We expect to go deeper with this modularization as we add graph types. Specifically, we want to modularize the &lt;code&gt;brush&lt;/code&gt; interaction to flex and activate across different SVG elements. Creating a separate &lt;code&gt;graphBrush&lt;/code&gt; service is likely.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Additional resources which cover similar material:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://misoproject.com/d3-chart/"&gt;d3.chart: a framework for building reusable charts with d3.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bost.ocks.org/mike/chart/"&gt;Mike Bostok's 'Towards Reuseable Charts'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pivotallabs.com/d3-test-driven-development/"&gt;d3 and Test-Driven-Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stevenalexander/d3-testing"&gt;Great set of example code in vanilla JS on Jasmine-driven testing of D3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="charting"></category><category term="d3"></category><category term="best-practices"></category><category term="testing"></category></entry><entry><title>Using Hub and Fish to Turn GitHub Issues into Pull Requests</title><link href="http://engineroom.trackmaven.com/blog/using-hub-and-fish-to-turn-github-issues-into-pull-requests/" rel="alternate"></link><updated>2014-09-27T00:00:00+02:00</updated><author><name>Fletcher Heisler</name></author><id>tag:engineroom.trackmaven.com,2014-09-27:blog/using-hub-and-fish-to-turn-github-issues-into-pull-requests/</id><summary type="html">&lt;h2&gt;Or: How I Learned to Stop Worrying and Love ZenHub&lt;/h2&gt;
&lt;p&gt;Lately we've been making use of &lt;a href="https://www.zenhub.io/"&gt;ZenHub&lt;/a&gt; here at TrackMaven for tracking our engineering tasks as GitHub issues move from the backlog into our current cycle, become WIP, enter QC and eventually get merged in. Although ZenHub has certainly had its growing pains (they're still in open beta), it's been great to get GitHub issues organized in one place.&lt;/p&gt;
&lt;p&gt;One issue we've had in tracking our GitHub work, however, has been the inherent duplication between issues and pull requests. ZenHub, &lt;a href="https://huboard.com/"&gt;HuBoard&lt;/a&gt; and other tools have no ability to filter to &lt;em&gt;only&lt;/em&gt; issues or &lt;em&gt;only&lt;/em&gt; pull requests - and in fact, most of the time we wouldn't want to do so, since individual issues sometimes lead to multiple separate pull requests needed to tackle them.&lt;/p&gt;
&lt;p&gt;What we really needed was a way to &lt;em&gt;turn issues into pull requests&lt;/em&gt; on demand, thus avoiding a lot of potential for duplication, noise and confusion when pull requests didn't directly reference their respective issues, commentary got split across issue/pull request, or things fell through our process when only one item of the pair had the correct WIP/QC status in ZenHub.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href="https://github.com/github/hub"&gt;hub&lt;/a&gt;. hub, available via Homebrew or as a RubyGem, has a ton of useful features and shortcuts for turbocharging your git, but the one we use most is the &lt;code&gt;pull-request&lt;/code&gt; command. This uses the GitHub API's &lt;a href="https://developer.github.com/v3/pulls/#alternative-input"&gt;"alternative input"&lt;/a&gt; to automagically &lt;strong&gt;turn an existing issue into a pull request.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The syntax can be annoyingly verbose, though, especially if you don't have upstream tracking on your git. Simple enough if you tend to work on a single project: set up an alias! Most of us here use the &lt;a href="http://fishshell.com/"&gt;fish&lt;/a&gt; shell, where &lt;code&gt;alias&lt;/code&gt; is actually just a wrapper for &lt;a href="http://ridiculousfish.com/shell/user_doc/html/commands.html#function"&gt;function&lt;/a&gt;. The easiest way to set up a &lt;code&gt;pull-request&lt;/code&gt; shortcut would then be the following two functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hubpr&lt;/span&gt;
        &lt;span class="nx"&gt;hub&lt;/span&gt; &lt;span class="nx"&gt;pull&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;GitHubName&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;master&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;GitHubName&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$argv&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;$argv&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pr&lt;/span&gt;
        &lt;span class="nx"&gt;hubpr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;abbrev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="nx"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;$argv&lt;/span&gt;
    &lt;span class="nx"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll then need to save these functions to use them again later in other terminal sessions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    funcsave hubpr
    funcsave pr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(You can also use &lt;code&gt;funced&lt;/code&gt; to edit the function corresponding to the passed-in name interactively if you need to make changes.)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;pr&lt;/code&gt; function above will return the current git branch name, which gets passed into the &lt;code&gt;hubpr&lt;/code&gt; function as the first argument. &lt;code&gt;hubpr&lt;/code&gt; then sets the base and head branches based on the GitHub organization or username you've entered. You could of course replace &lt;code&gt;master&lt;/code&gt; with &lt;code&gt;staging&lt;/code&gt; or, depending on your workflow, include a separate argument to specify for determining the base branch, although this starts to undo some of the point of creating a shortcut.&lt;/p&gt;
&lt;p&gt;The second argument, the actual issue number, is supplied when actually using the function; for instance, to make a pull request out of the newly pushed current branch &lt;code&gt;fix-everything&lt;/code&gt; that will close out issue number 123, you can now do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pr 123
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, if you want to create a pull request based off of any arbitrary branch, rather than just your current branch, this simple addition to the args should do the trick: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hubpr&lt;/span&gt;
    &lt;span class="nx"&gt;hub&lt;/span&gt; &lt;span class="nx"&gt;pull&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;GitHubName&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$argv&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;GitHubName&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$argv&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;$argv&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;end&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pr&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
       &lt;span class="nx"&gt;hubpr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;abbrev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="nx"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;$argv&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;$argv&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
       &lt;span class="nx"&gt;hubpr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;abbrev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="nx"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;$argv&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;master&lt;/span&gt;
    &lt;span class="nx"&gt;end&lt;/span&gt;
&lt;span class="nx"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! No more unnecessary issue/pull request duplication.&lt;/p&gt;</summary><category term="Github"></category><category term="Hub"></category><category term="Zenhub"></category><category term="Fish"></category></entry><entry><title>So You Want Another PostgreSQL Database? (Part 1)</title><link href="http://engineroom.trackmaven.com/blog/so-you-want-another-postgresql-database-part-1/" rel="alternate"></link><updated>2014-09-20T00:00:00+02:00</updated><author><name>John Young</name></author><id>tag:engineroom.trackmaven.com,2014-09-20:blog/so-you-want-another-postgresql-database-part-1/</id><summary type="html">&lt;h2&gt;Streaming replication with PostgreSQL 9.3 on Amazon EC2&lt;/h2&gt;
&lt;p&gt;They grow up so fast, don't they? It seems like just yesterday you were setting up your PostgreSQL server and tweaking settings you barely understood to try to get the most out of your database. But now, you've got a lot more data and your traffic continues to rise, and you've decided it's time your database had a few companions to help it out. Fortunately, PostgreSQL 9 makes it rather simple to set up a primary database that can handle writes, and any number of replica databases which are read-only, stay in sync with the primary, and can be promoted to the primary in the event of failure on your primary database.&lt;/p&gt;
&lt;p&gt;There are a lot of factors that come into play when you decide to scale your database infrastructure and they vary wildly from project to project. These are outside the scope of this post, and I'm is going to assume you have already decided on a primary/replica database setup. &lt;/p&gt;
&lt;h2&gt;So what are we going to do?&lt;/h2&gt;
&lt;p&gt;We are going to take our current single-database setup and turn it into a primary database with a single replica following the primary using streaming replication and WAL archiving. We will perform all read operations from the replica and all write operations to the primary. The replica will be able to take over the role of primary at any moment we need it to, and is thus known as a &lt;strong&gt;&lt;em&gt;hot standby&lt;/em&gt;&lt;/strong&gt; server.&lt;/p&gt;
&lt;h2&gt;How it all works: understanding streaming replication&lt;/h2&gt;
&lt;p&gt;Everything you do to your database (inserts, updates, deletes, alter table, etc.) is first recorded on disk in what is called a Write-Ahead Log, or WAL for short. Only once the WAL has been updated will any change be made to the database. In the event of a crash, you are able to recover to the exact moment of the crash by replaying the WAL files and reconstructing all changes that have been made to the database. This is the core of streaming replication.&lt;/p&gt;
&lt;p&gt;On every write made to the primary, a WAL file is written to. The WAL file is then forwarded along to the replica. Our replica server, which operates in a kind of permanent recovery mode, is continuously listening to the primary and will reconstruct all changes made by reading the primary's WAL. By doing so, our replica database stays in sync with the primary nearly instantaneously.&lt;/p&gt;
&lt;p&gt;It is important to note that the forwarding of WAL files is done only after a transaction has been committed to the primary and thus there will be a small period, generally less than one second, where a change has been made to the primary and is not yet reflected on the replica.&lt;/p&gt;
&lt;h2&gt;Setting it all up&lt;/h2&gt;
&lt;p&gt;We use &lt;a href="https://github.com/wal-e/wal-e"&gt;WAL-E&lt;/a&gt; to store backups of our database and WAL files in S3 for additional security against failure. Its setup warrants its own writeup, and is not necessary for streaming replication. I have left the WAL-E commands in the instructions below, since there is no "right" answer for how and where you store your WAL files. For instance, you can certainly store them locally on the primary and rsync them to the replica. It's incredibly easy to set up, but if your primary goes down and you can't access that server, you may not be able to have a fully current replica to promote. All that changes is the &lt;code&gt;archive_command&lt;/code&gt; on the primary and the &lt;code&gt;restore_command&lt;/code&gt; on the replica. These can be set to anything you need, so long as the primary is shipping its WALs to a place where the replica can fetch them.&lt;/p&gt;
&lt;p&gt;Alright, let's get started.&lt;/p&gt;
&lt;h3&gt;Perform on both primary and replica&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Launch two EC2 instances running Ubuntu Server 14.04 and install PostgreSQL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When installed, PostgreSQL will create a user named postgres from which all further commands need to be run from. To take over the postgres user, we must first give it a password: &lt;code&gt;sudo passwd postgres&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Become the postgres user: &lt;code&gt;su - postgres&lt;/code&gt; and enter the password from the previous step&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Perform on both primary and replica&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If you aren't using WAL-E or sending the WAL files to a third-party server, you're going to need the two servers to be able to communicate with each other via ssh without passwords for WAL files to be received by the replica (and sent, in the case of the replica being promoted to primary if primary goes down). &lt;strong&gt;This must all be done as the postgres user.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh-keygen -t rsa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval $('ssh-agent')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh-add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;authorized_keys&lt;/code&gt; file in ~/.ssh/&lt;/li&gt;
&lt;li&gt;Copy other server's id_rsa.pub into &lt;code&gt;authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test correct functionality: &lt;code&gt;ssh &amp;lt;IP_ADDRESS_OF_OTHER_SERVER&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;It's important that ssh works from postgres user to postgres user with no parameters given. If my primary server's IP is 1.2.3.4 and my replica's is 5.6.7.8, then I should be able to do this with no problems: &lt;code&gt;postgres@ip-1-2-3-4:~$ ssh 5.6.7.8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Perform only on primary&lt;/h3&gt;
&lt;p&gt;We need a user with replication privileges so that we can ship our WAL files. This only needs to be done on the primary, as all changes made to it will be automatically re-created on the replica. We also need to tune specific settings in the config files to tell PostgreSQL what we want it to do. Most importantly, the &lt;code&gt;archive_command&lt;/code&gt; setting is what actually ships WAL files, and here we use WAL-E to send ours to S3 for an external backup. The others tell the server that we want our server to archive detailed WAL files, with more detailed documentation on the behavior and other choices for each available from &lt;a href="http://www.postgresql.org/docs/9.3/static/runtime-config-wal.html"&gt;the Postgres docs&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a user with superuser and replication privileges: 
&lt;code&gt;psql -c "CREATE USER replicator SUPERUSER REPLICATION LOGIN CONNECTION LIMIT 1 ENCRYPTED PASSWORD '&amp;lt;PASSWORD&amp;gt;';"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the event that the psql command says that authentication failed, edit /etc/postgresql/9.3/main/pg_hba.conf and edit the line (likely top line) that says 
&lt;code&gt;local all postgres md5&lt;/code&gt; to say &lt;code&gt;local all postgres peer&lt;/code&gt; and restart the server with 
&lt;code&gt;service postgresql restart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit /etc/postgresql/9.3/main/pg_hba.conf: Add &lt;code&gt;host replication replicator &amp;lt;IP_OF_REPLICA&amp;gt;/32 md5&lt;/code&gt; to the bottom of the file.&lt;/li&gt;
&lt;li&gt;Edit /etc/postgresql/9.3/main/postgresql.conf and add the following options &lt;strong&gt;(ensure they are not set anywhere else in the config file already)&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hot_standby = &amp;#39;on&amp;#39;
max_wal_senders = 5
wal_level = &amp;#39;hot_standby&amp;#39;
archive_mode = &amp;#39;on&amp;#39;
archive_command = &amp;#39;envdir /etc/wal-e.d/env /usr/local/bin/wal-e wal-push %p&amp;#39;
archive_timeout = 60
listen_addresses = &amp;#39;*&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Restart the server: &lt;code&gt;service postgresql restart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Perform only on replica&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Become the postgres user: &lt;code&gt;su - postgres&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stop the server: &lt;code&gt;service postgresql stop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit /etc/postgresql/9.3/main/postgresql.conf and add the following options &lt;strong&gt;(ensure they are not set anywhere else in the config file already)&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hot_standby = &amp;#39;on&amp;#39;
max_wal_senders = 5
wal_level = &amp;#39;hot_standby&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Next, we want to create a base backup of the primary and write a recovery.conf file to tell PostgreSQL how read from our WALs. In our case, that means pulling WAL files from S3 using WAL-E. Create a new script file: &lt;code&gt;vim replication_setup&lt;/code&gt; and place the following commands in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;echo Stopping PostgreSQL
service postgresql stop

echo Cleaning up old cluster directory
rm -rf /var/lib/postgresql/9.3/main

echo Starting base backup as replicator
pg_basebackup -h &amp;lt;IP_OF_PRIMARY&amp;gt; -D /var/lib/postgresql/9.3/main -U replicator -v -P

echo Writing recovery.conf file
bash -c &amp;quot;cat &amp;gt; /var/lib/postgresql/9.3/main/recovery.conf &amp;lt;&amp;lt;- EOF
  standby_mode = &amp;#39;on&amp;#39;
  primary_conninfo = &amp;#39;host=&amp;lt;IP_OF_PRIMARY&amp;gt; port=5432 user=replicator password=&amp;lt;PASSWORD&amp;gt;&amp;#39;
  trigger_file = &amp;#39;/tmp/postgresql.trigger&amp;#39;
  restore_command = &amp;#39;envdir /etc/wal-e.d/env /usr/local/bin/wal-e wal-fetch &amp;quot;%f&amp;quot; &amp;quot;%p&amp;quot;&amp;#39;
EOF
&amp;quot;

echo Starting PostgreSQL
service postgresql start
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Allow execution of that script: &lt;code&gt;chmod +x replication_setup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the script: &lt;code&gt;./replication_setup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Verify that your replica is working. Check the log at /var/log/postgresql/postgresql-9.3-main.log. You should see output similar to the following.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;2014-05-02 21:12:25 UTC LOG:  consistent recovery state reached at 0/450006C8
2014-05-02 21:12:25 UTC LOG:  database system is ready to accept read only connections
2014-05-02 21:12:25 UTC LOG:  started streaming WAL from primary at 0/45000000 on timeline 1
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You can also check that the WAL send/receive processes are running:&lt;/li&gt;
&lt;li&gt;primary: &lt;code&gt;ps -ef | grep sender&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;replica: &lt;code&gt;ps -ef | grep receiver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Both primary and replica&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Finally, add the IP addresses of your EC2 instances so that they can see your fancy new databases: &lt;code&gt;vim /etc/postgresql/9.3/main/pg_hba.conf&lt;/code&gt; and add this line to the bottom.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;host    &amp;lt;user_name&amp;gt;       &amp;lt;db_name&amp;gt;     &amp;lt;IP_ADDRESS&amp;gt;/32           md5
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Restart both servers: &lt;code&gt;service postgresql restart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Celebrate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; Continue onto &lt;a href="/blog/so-you-want-another-postgresql-database-part-2/"&gt;Part 2&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary><category term="postgres"></category><category term="double-database"></category><category term="how-to"></category></entry><entry><title>Setting Up HTTPS Security</title><link href="http://engineroom.trackmaven.com/blog/setting-up-https-security/" rel="alternate"></link><updated>2014-09-13T00:00:00+02:00</updated><author><name>Josh Finnie</name></author><id>tag:engineroom.trackmaven.com,2014-09-13:blog/setting-up-https-security/</id><summary type="html">&lt;p&gt;Here at &lt;a href="http://trackmaven.com"&gt;TrackMaven&lt;/a&gt;, we have made it our goal to provide our customers with the most secure access to our application as possible. And in light of the recent news emerging in web security, most concerning &lt;a href="http://heartbleed.com/"&gt;Heartbleed&lt;/a&gt;, we rethought our best practices and now limit access to our application to only secured HTTPS and making sure that we have the full range of coverage based off of SSL Lab's standards for security. It is often thought that securing your site through TSL/SSL is hard, but hopefully this post will show you just how easy it can be.&lt;/p&gt;
&lt;h2&gt;What is HTTPS?&lt;/h2&gt;
&lt;p&gt;Hypertext Transfer Protocol Secure (HTTPS) is a way in which computers can securely communicate over the internet. The secure communication is done either the through the newer  Transport Layer Security (TLS) encryption protocol or its predecessor the SSL Secure Sockets Layer (SLS) encryption protocol. Each uses asymmetric cryptography involving private and public certificates to make sure the communication is secure; the creation of these certificates is commonly believed to be the difficult part of implementing HTTPS on your own servers.&lt;/p&gt;
&lt;h2&gt;Setting up HTTPS on your server&lt;/h2&gt;
&lt;p&gt;The first thing you will want to do is to secure your certificates. A certificate will consist of the owner's name, a identification number, expiration date, a public key for encryption and a private key for decryption. The certification creation process asks you for this information automatically, so don't worry about knowing how to input all the information.&lt;/p&gt;
&lt;p&gt;You could, of course, create a certificate yourself (self-sign) without the help of any &lt;a href="http://www.sslshopper.com/certificate-authority-reviews.html"&gt;Certificate Authorities (CA)&lt;/a&gt;, but you will lose the ability to be validated by them. For better or worse the CAs exist to make sure the public key given to you is true and unadulterated. Going through a CA will make sure that modern web browsers recognize your certificate as valid and trusted.&lt;/p&gt;
&lt;p&gt;There are a few different versions of certificates. It is best to read up on them and find which one best fits your needs. Here at TrackMaven, we went with a Wildcard SSL which allows us to use it on multiple subdomains (i.e. &lt;a href="https://app.trackmaven.com"&gt;app.trackmaven.com&lt;/a&gt; and &lt;a href="http://blog.trackmaven.com"&gt;blog.trackmaven.com&lt;/a&gt;). For example, &lt;a href="https://www.digicert.com/"&gt;DigiCert&lt;/a&gt; offers 5 different types of certificates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/wildcard-ssl-certificates.htm"&gt;WildCard SSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/ssl-certificate.htm"&gt;Single Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/unified-communications-ssl-tls.htm"&gt;Unified Communications Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digicert.com/ev-ssl-certification.htm"&gt;Extended Validation Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.digicert.com/ev-multi-domain-ssl.htm"&gt;DigiCert Extended Validation Multi-Domain Certificate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To continue with the process of securing your web application, you will need to purchase a SSL certificate from a reputable vendor. Shop around; prices do vary. Once you have purchased an SSL certificate you will need to create a Certificate Signing Request (CSR). The below command will generate both a server key and CSR:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;openssl req -new -newkey rsa:2048 -keyout your_server_name.key -out your_server_name.csr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You then take the newly created CSR file to the certificate provider of your choice and purchase a SSL Certificate. This process can take anywhere from a few minutes to a few weeks depending on the level of certification you purchased. Once your provider has generated the certificates you should receive them via the email address which you used to sign the CSR.&lt;/p&gt;
&lt;p&gt;I would recommend you follow the instructions of your certificate provider closely as all providers do things slightly differently. Once you have successfully received the email with your certificates all that is left to do is to put them on the server and tell your http server (either NGINX, Apache, etc.) to start hosting content through HTTPS.&lt;/p&gt;
&lt;p&gt;Setting up your server is the easier of these processes; you only need to save the key you created above and the output of the directions your CA provided you to your server. I'd recommend putting it under &lt;code&gt;/etc/{apache2,nginx}/ssl/&lt;/code&gt; for safe keeping.&lt;/p&gt;
&lt;h3&gt;Setting up Apache&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You first want to enable the SSL module in Apache: &lt;code&gt;a2enmod ssl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Secondly, you'll need to turn on port 443 listening by editing the &lt;code&gt;/etc/apache2/ports.conf&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update your &lt;code&gt;VirtualHost&lt;/code&gt; file to listen on port 443 and have the following configurations:&lt;/p&gt;
&lt;p&gt;SSLEngine on
SSLCertificateFile /etc/apache2/ssl/your_server_name.crt
SSLCertificateKeyFile /etc/apache2/ssl/your_server_name.key
SSLCertificateChainFile /etc/apache2/ssl/DigiCertCA.crt&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should give you a working secure connection through TSL using Apache.&lt;/p&gt;
&lt;h3&gt;Setting up Nginx&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You first want to bundle your CRT with the CA's cert: &lt;code&gt;cat your_server_name.crt DigiCertCA.crt &amp;gt;&amp;gt; bundle.crt&lt;/code&gt; and move that to your &lt;code&gt;/etc/nginx/ssl/&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second edit your &lt;code&gt;server&lt;/code&gt; virtual host to include the following configurations:&lt;/p&gt;
&lt;p&gt;listen 443;
ssl on;
ssl_certificate /etc/nginx/ssl/bundle.crt
ssl_certificate_key /etc/ngin/ssl/your_server_name.key&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should give you a working secure connection through TSL using Nginx. At this point, I would suggest finding the best way for you to forward all traffic hitting HTTP to HTTPS. There is no real reason that, with HTTPS now set up, you should be serving insecure content.&lt;/p&gt;
&lt;h2&gt;Hardening your HTTPS connection&lt;/h2&gt;
&lt;p&gt;Now that we have set up a secure connection on your server of choice, it is important to make sure that you are using HTTPS to the best of its abilities. There are a few steps that one should take to make sure their server is hardened as best as possible when using HTTPS.&lt;/p&gt;
&lt;h3&gt;Hardening Apache&lt;/h3&gt;
&lt;p&gt;Adding the below lines to your &lt;code&gt;VirtualHost&lt;/code&gt; will give you all the benefits of the most up-to-date ciphers while disallowing some of the known-to-be-weaker ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SSLProtocol ALL -SSLv2
SSLHonorCipherOrder On
SSLCipherSuite ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
SSLCompression Off
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Hardening Nginx&lt;/h3&gt;
&lt;p&gt;Adding the below lines to your &lt;code&gt;server&lt;/code&gt; virtual host will give you all the benefits of the most up-to-date ciphers while disallowing some of the known-to-be-weaker ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_protocols&lt;/span&gt; &lt;span class="nt"&gt;SSLv3&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="nc"&gt;.1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="nc"&gt;.2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="nt"&gt;ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AESGCM&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AESGCM&lt;/span&gt;&lt;span class="nd"&gt;:ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES256&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES256&lt;/span&gt;&lt;span class="nd"&gt;:ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES128&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES&lt;/span&gt;&lt;span class="nd"&gt;:ECDH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;3DES&lt;/span&gt;&lt;span class="nd"&gt;:DH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;3DES&lt;/span&gt;&lt;span class="nd"&gt;:RSA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AESGCM&lt;/span&gt;&lt;span class="nd"&gt;:RSA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;AES&lt;/span&gt;&lt;span class="nd"&gt;:RSA&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;3DES&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;aNULL&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;MD5&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;DSS&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="nt"&gt;AES256&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="nt"&gt;shared&lt;/span&gt;&lt;span class="nd"&gt;:SSL:10m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="nt"&gt;10m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;ssl_stapling&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With this article, I hope I cleared some of the air around setting up HTTPS on your server. Setting up HTTPS isn't too scary, for a small time investment you'll gain a huge security boost for your application and your users.&lt;/p&gt;
&lt;h2&gt;Further Reading and Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/HTTP_Secure"&gt;HTTPS&lt;/a&gt;
&lt;a href="http://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS/SSL&lt;/a&gt;&lt;/p&gt;</summary><category term="security"></category><category term="how-to"></category></entry></feed>