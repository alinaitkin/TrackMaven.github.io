<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Engine Room - TrackMaven</title><link href="http://engineroom.trackmaven.com/" rel="alternate"></link><link href="http://engineroom.trackmaven.com/feeds/cameron-maske.atom.xml" rel="self"></link><id>http://engineroom.trackmaven.com/</id><updated>2015-12-08T00:00:00+01:00</updated><entry><title>Using pytest with Django</title><link href="http://engineroom.trackmaven.com/blog/using-pytest-with-django/" rel="alternate"></link><updated>2015-12-08T00:00:00+01:00</updated><author><name>Cameron Maske</name></author><id>tag:engineroom.trackmaven.com,2015-12-08:blog/using-pytest-with-django/</id><summary type="html">&lt;p&gt;When it comes to testing in python &lt;a href="http://pytest.org/latest/"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; is my favorite testing tool. &lt;code&gt;pytest&lt;/code&gt; is a testing framework that strips out boilerplate and adds a whole bunch of sensible utilities to make your tests more pythonic. In this post we'll cover how to add that awesomeness to a Django project.&lt;/p&gt;
&lt;h3&gt;Comparing &lt;code&gt;unitest&lt;/code&gt; to &lt;code&gt;pytest&lt;/code&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def test_hello_world():
    assert &amp;quot;hello_world&amp;quot; == &amp;quot;hello_world&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our newer Django projects we've been using &lt;code&gt;pytest&lt;/code&gt; instead of the default test runner. Django's prefer testing is built on top of &lt;a href="https://github.com/django/django/blob/2ab244ff3a799b1a49550a7e7582c4b46e402197/django/test/testcases.py#L155"&gt;unittest&lt;/a&gt;. Luckily for any &lt;code&gt;pytest&lt;/code&gt; fans, this makes it easy to have &lt;code&gt;pytest&lt;/code&gt; be a drop in &lt;a href="https://pytest.org/latest/unittest.html"&gt;replacement&lt;/a&gt; without having to change a single test.&lt;/p&gt;
&lt;h1&gt;How?&lt;/h1&gt;
&lt;p&gt;Let's dive into how you can setup &lt;code&gt;pytest&lt;/code&gt; on your Django projects. For this post, I've created an repo with a dummy Django 1.8 &lt;a href="https://github.com/TrackMaven/using-pytest-with-django"&gt;project&lt;/a&gt;.  It's local development environment is managed by &lt;a href="http://engineroom.trackmaven.com/blog/a-better-development-environment-with-docker-and-fig/"&gt;Docker + Docker Compose.&lt;/a&gt;. All code examples are pulled from there.&lt;/p&gt;
&lt;p&gt;We'll need one more library in addition to &lt;code&gt;pytest&lt;/code&gt;  to get everything working smoothly with Django. &lt;a href="https://pytest-django.readthedocs.org"&gt;&lt;code&gt;pytest-django&lt;/code&gt;&lt;/a&gt; takes care of replicating &lt;a href="https://docs.djangoproject.com/en/1.8/topics/testing/tools/#transactiontestcase"&gt;Django's existing testing functionality&lt;/a&gt; into &lt;code&gt;pytest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our &lt;a href="https://github.com/TrackMaven/using-pytest-with-django/blob/master/requirements-dev.txt"&gt;&lt;code&gt;requirements-dev.txt&lt;/code&gt;&lt;/a&gt; we've can add in the two packages to be installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pytest==2.7.2
pytest-django==2.8.0
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;These were the latest versions when this post was written, be sure to check pypi if either &lt;a href="https://pypi.python.org/pypi/pytest"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://pypi.python.org/pypi/pytest-django"&gt;&lt;code&gt;pytest-django&lt;/code&gt;&lt;/a&gt; have been updated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We need to bootstrap &lt;code&gt;pytest&lt;/code&gt; with our Django project &lt;a href="https://docs.djangoproject.com/en/1.8/topics/settings/"&gt;settings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pytest-django&lt;/code&gt;'s documentation &lt;a href="https://pytest-django.readthedocs.org/en/latest/configuring_django.html"&gt;recommends&lt;/a&gt; a few different ways to achieve this. I'd advocate loading them in through a global &lt;code&gt;conftest.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;pytest&lt;/code&gt; any &lt;code&gt;conftest.py&lt;/code&gt; files are invoked before any tests are run. They provide a convenient method to setup hooks or configure any settings for our tests.
Where the &lt;code&gt;conftest.py&lt;/code&gt; lives dictates the scope of where it applies. If present in the root test folder, hooks declared will apply to all tests. If present in a specific module, hooks will only apply to tests in that module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;tests/
├── conftest.py # Applies to all tests
└── example/
    ├── conftest.py # Applies only to tests in this module/folder.
    ├── test_foo.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our case, we want the &lt;a href="https://github.com/TrackMaven/using-pytest-with-django/blob/master/tests/conftest.py"&gt;&lt;code&gt;conftest.py&lt;/code&gt;&lt;/a&gt; to apply to all tests therefore we place it in our tests root directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="c"&gt;# We manually designate which settings we will be using in an environment variable&lt;/span&gt;
&lt;span class="c"&gt;# This is similar to what occurs in the `manage.py`&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;app.config.settings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c"&gt;# `pytest` automatically calls this function once when tests are run.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pytest_configure&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="c"&gt;# If you have any test specific settings, you can declare them here,&lt;/span&gt;
    &lt;span class="c"&gt;# e.g.&lt;/span&gt;
    &lt;span class="c"&gt;# settings.PASSWORD_HASHERS = (&lt;/span&gt;
    &lt;span class="c"&gt;#     &amp;#39;django.contrib.auth.hashers.MD5PasswordHasher&amp;#39;,&lt;/span&gt;
    &lt;span class="c"&gt;# )&lt;/span&gt;
    &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;# Note: In Django =&amp;lt; 1.6 you&amp;#39;ll need to run this instead&lt;/span&gt;
    &lt;span class="c"&gt;# settings.configure()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If setup correctly, you should now be able to run the test suite. Instead of running tests through &lt;code&gt;manage.py&lt;/code&gt; you run them through the &lt;code&gt;py.test&lt;/code&gt; command directly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose run web py.test
&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
platform linux -- Python 3.3.6 -- py-1.4.30 -- pytest-2.7.2
rootdir: /code, inifile:
plugins: django
collected &lt;span class="m"&gt;3&lt;/span&gt; items

tests/integration_tests/example/test_models.py ..
tests/unit_tests/example/test_helpers.py .

&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; passed in 2.95 &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To run a specific test in a module/file, you just include the path after the command, like so &lt;code&gt;py.test &amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;docker-compose run web py.test tests/integration_tests/example/test_models.py
=== test session starts ===
platform linux -- Python 3.3.6 -- py-1.4.30 -- pytest-2.7.2
rootdir: /code/tests/integration_tests/example, inifile:
plugins: django
collected 2 items

tests/integration_tests/example/test_models.py ..

=== 2 passed in 2.92 seconds ===
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To run a specific test, point &lt;code&gt;py.test&lt;/code&gt; to a specific file and test name, like so &lt;code&gt;py.test &amp;lt;path_to_file&amp;gt;::&amp;lt;name_of_test&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose run web py.test tests/integration_tests/example/test_models.py::test_save
&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;test &lt;/span&gt;session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
platform linux -- Python 3.3.6 -- py-1.4.30 -- pytest-2.7.2
rootdir: /code/tests/integration_tests/example, inifile:
plugins: django
collected &lt;span class="m"&gt;2&lt;/span&gt; items

tests/integration_tests/example/test_models.py .

&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; passed in 2.94 &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Existing tests.&lt;/h3&gt;
&lt;p&gt;As mentioned previously, any existing Django &lt;code&gt;unittest&lt;/code&gt; style tests will work out of the box. Here is an &lt;a href="https://github.com/TrackMaven/using-pytest-with-django/blob/master/tests/integration_tests/example/test_models.py"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Any existing `unittest` style tests still work without any changes needed.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Maven&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;corgi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Maven&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# You can mix in pytest&amp;#39;s `assert` approach!&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breed&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;corgi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Database testing&lt;/h4&gt;
&lt;p&gt;One key difference to watch out for is running &lt;code&gt;pytest&lt;/code&gt; style tests against the database.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;pytest-django&lt;/code&gt; takes a conservative approach to enabling database access in tests.  Any &lt;code&gt;pytest&lt;/code&gt; style tests will fail if they try to access the database.
In order to allow database access to a test, you need add a &lt;a href="http://pytest.org/latest/mark.html"&gt;&lt;code&gt;py.test mark&lt;/code&gt;&lt;/a&gt; decorator like so...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;example.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;


&lt;span class="c"&gt;# If your tests need to use the database and want to use pytest&lt;/span&gt;
&lt;span class="c"&gt;# function test approach, you need to `mark` it.&lt;/span&gt;
&lt;span class="nd"&gt;@pytest.mark.django_db&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_save&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;maven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Maven&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;corgi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Maven&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;maven&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breed&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;corgi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! You can now take full advantage of &lt;code&gt;pytest&lt;/code&gt; in your Django project.&lt;/p&gt;</summary><category term="django"></category><category term="pytest"></category></entry><entry><title>Announcing Celery Once</title><link href="http://engineroom.trackmaven.com/blog/announcing-celery-once/" rel="alternate"></link><updated>2015-02-03T00:00:00+01:00</updated><author><name>Cameron Maske</name></author><id>tag:engineroom.trackmaven.com,2015-02-03:blog/announcing-celery-once/</id><summary type="html">&lt;p&gt;At TrackMaven we are big users of &lt;a href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt;, an asynchronous task queue written in Python. Today we're happy to release a useful package we have been using internally called &lt;a href="https://pypi.python.org/pypi/celery_once/"&gt;Celery Once!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Celery Once allows you to specify and run unique tasks across your distributed Celery cluster. It can be used to prevent workers performing the same task when scheduled multiple times.&lt;/p&gt;
&lt;h2&gt;Example usage&lt;/h2&gt;
&lt;p&gt;Imagine the scenario of generating and send a PDF report to a user.
On our web app, a user could kick off this task by submitting a form to a web server, which then triggers our Celery task.&lt;/p&gt;
&lt;p&gt;If generating the report is slow and our user hits submit multiple times, we don't want to queue up additional repeated tasks that end up spamming the user's inbox.&lt;/p&gt;
&lt;p&gt;Here is how we could solve the scenario using Celery Once!
After &lt;a href="https://github.com/TrackMaven/celery-once#usage"&gt;setting up&lt;/a&gt; &lt;code&gt;celery&lt;/code&gt; with &lt;code&gt;celery_once&lt;/code&gt; installed, we can write a mutually exclusive task, like so...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# tasks.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;reports&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generate_report&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery_once&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QueueOnce&lt;/span&gt;

&lt;span class="nd"&gt;@celery.task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;QueueOnce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_pdf_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_report&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Behind the scenes, &lt;code&gt;QueueOnce&lt;/code&gt; uses &lt;a href="http://redis.io"&gt;Redis&lt;/a&gt; to &lt;a href="https://github.com/TrackMaven/celery-once/blob/c7b8902a52ee727e4e68392887d905f1e436f7ef/celery_once/tasks.py#L98"&gt;check against or set a lock&lt;/a&gt; based on the task's name and its arguments.&lt;/p&gt;
&lt;p&gt;If we try to run the same task, while it's already queued, an &lt;code&gt;AlreadyQueued&lt;/code&gt; exception is raised.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Run the initial task, not yet queued up...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send_pdf_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alice@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Duplicate task run before previous one completes..&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;send_pdf_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alice@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="n"&gt;AlreadyQueued&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# Running for a different user has its own lock&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;send_pdf_report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bob@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's Celery Once in a nutshell! More documentation on how to install, set up and tweak it to your needs can be found &lt;a href="https://github.com/TrackMaven/celery-once"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="celery"></category><category term="redis"></category><category term="open source"></category></entry><entry><title>A Better Development Environment with Docker and Fig</title><link href="http://engineroom.trackmaven.com/blog/a-better-development-environment-with-docker-and-fig/" rel="alternate"></link><updated>2014-10-28T00:00:00+01:00</updated><author><name>Cameron Maske</name></author><id>tag:engineroom.trackmaven.com,2014-10-28:blog/a-better-development-environment-with-docker-and-fig/</id><summary type="html">&lt;p&gt;Local development environments can be a nightmare.
Have you ever run into a scenario where something works on your machine but not on your colleagues'?
Having to spend time debugging platform-specific problems is a frustrating productivity sink.&lt;/p&gt;
&lt;p&gt;Before we explore how to set up our stress free development environment, let's consider what key elements it should have.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Isolated. No other project should affect it and it shouldn't affect any other projects. For example, if one project uses Python 2.7, that shouldn't affect another project which uses Python 3.4.&lt;/li&gt;
&lt;li&gt;Repeatable. Write it once and have it work each time. I don't want to have to spend time tweaking it for each user.&lt;/li&gt;
&lt;li&gt;Be as close to production as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All that sounds great. But how do we achieve this?&lt;/p&gt;
&lt;p&gt;Enter Docker. If you are unfamiliar with what Docker is, Solomon Hykes (founder and CTO of Docker) gives a great &lt;a href="http://youtu.be/Q5POuMHxW-0?t=2m18s"&gt;introduction talk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Docker lends itself perfectly to our 3 requirements above. Docker was built to solve the problem of "run it once, run it everywhere". Docker containers are isolated, portable and repeatable.&lt;/p&gt;
&lt;p&gt;But building, booting and managing containers can take a fair few complex shell commands.&lt;/p&gt;
&lt;p&gt;The missing link is Fig. Fig describes itsself as a tool to create &lt;a href="https://github.com/docker/fig/"&gt;fast, isolated development environments&lt;/a&gt; using Docker.&lt;/p&gt;
&lt;p&gt;Fig moves all the configuration required to orchestra Docker into a simple clear &lt;code&gt;fig.yml&lt;/code&gt; file. It handles all the work of building and running containers, forwarding their ports, sharing volumes, and linking them.&lt;/p&gt;
&lt;p&gt;Let's explore Fig by example, and let's make it challenging.&lt;/p&gt;
&lt;p&gt;I want a project with TWO databases, &lt;code&gt;Postgres 9.1&lt;/code&gt; and &lt;code&gt;ElasticSearch 1.1&lt;/code&gt;. I want &lt;code&gt;Redis 2.8.3&lt;/code&gt; for caching, and I'll be running my main site through a Python-powered Flask app.&lt;/p&gt;
&lt;p&gt;Before we set this up in Fig, imagine setting this up locally. How long would it take?&lt;/p&gt;
&lt;p&gt;Thought experiment over; let's dive into an example. All code featured is available in this &lt;a href="https://github.com/TrackMaven/using-fig"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;An example&lt;/h3&gt;
&lt;p&gt;Let's start with the &lt;code&gt;fig.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;elasticsearch&lt;/span&gt;
    &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;elasticsearch&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9200:9200&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9300:9300&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;orchardup&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5432:5432&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;POSTGRESQL_DB&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;test_db&lt;/span&gt;
&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;trackmaven&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;
    &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6379:6379&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In less then 30 lines of yaml, I've declared our stack.&lt;/p&gt;
&lt;p&gt;With &lt;a href="http://www.fig.sh/install.html"&gt;Fig installed&lt;/a&gt; we can start our stack by running &lt;code&gt;fig up&lt;/code&gt;.&lt;/p&gt;
&lt;iframe src="https://gfycat.com/ifr/SlightZestyGlassfrog" frameborder="0" scrolling="no" width="100%" &gt;&lt;/iframe&gt;

&lt;p&gt;Let's break down what our simple command above did into 2 stages.&lt;/p&gt;
&lt;h4&gt;Building stage.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull orchardup/postgres
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull trackmaven/redis
&lt;span class="nv"&gt;$ &lt;/span&gt;docker pull dockerfile/elasticsearch
&lt;span class="nv"&gt;$ &lt;/span&gt;docker build -t demo_web -rm&lt;span class="o"&gt;=&lt;/span&gt;True web
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Equivalent docker commands preformed by Fig&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fig goes through each service, then, if needed, builds an image.&lt;/p&gt;
&lt;p&gt;Building is based off a &lt;a href="http://docs.docker.com/reference/builder/"&gt;Dockerfile&lt;/a&gt; that contains all the required steps to produce our desired image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Our base image is Ubuntu 13.04
FROM stackbrew/ubuntu:raring
# Install any updates
RUN apt-get -y update
# Ensure python is installed and postgres drivers.
RUN apt-get install -y python python-pip python-psycopg2

WORKDIR /code
ADD requirements.txt requirements.txt
RUN pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our example project, our &lt;a href="https://github.com/TrackMaven/using-fig/blob/master/web/Dockerfile"&gt;Dockerfile&lt;/a&gt; builds on top of an Ubuntu base. It ensures Python and pip are installed before installing our project-specific Python packages from requirements.txt.&lt;/p&gt;
&lt;p&gt;Alternatively, you can point services towards a pre-built image.
This can exist either locally, and be referenced by a tag or a partial image ID, or remotely, on Docker's &lt;a href="https://registry.hub.docker.com/"&gt;public registry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Building a container off a Dockerfile works best for a  service that is dependent on code within your project. In this case, the core logic for our Python-powered app is in our source control. In contrast, images work best for services that don't rely as heavily on project-specific code (e.g. the datastores).&lt;/p&gt;
&lt;p&gt;Once Fig is satisfied all the required images are built or pulled, it's then time to run the services...&lt;/p&gt;
&lt;h4&gt;Running stage.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --rm --name demo_es_1 -v &lt;span class="s2"&gt;&amp;quot;elasticsearch:/data&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;9200:9200&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;9300:9300&amp;quot;&lt;/span&gt; dockerfile/elasticsearch
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --rm --name demo_db_1 -p &lt;span class="s2"&gt;&amp;quot;5432:5432&amp;quot;&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;POSTGRESQL_DB:test_db&amp;quot;&lt;/span&gt; orchardup/postgres
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --rm --name demo_redis_1 -p &lt;span class="s2"&gt;&amp;quot;6379:6379&amp;quot;&lt;/span&gt; trackmaven/redis
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run --rm --name demo_web_1 -v &lt;span class="s2"&gt;&amp;quot;web:/code&amp;quot;&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt; --link es:demo_es_1 --link db:demo_db_1 --link redis:demo_redis_1 demo_web python app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Equivalent docker commands preformed by Fig&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each service has a variety of run time options, including...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt;: Allows you to share folders between your host machine and the services' docker containers. In our example, the &lt;code&gt;web&lt;/code&gt; folder is shared, so any code changes to the contained files are immediately updated on the running container.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports&lt;/code&gt;: Exposes ports between the host (you) and the container (service).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;environment&lt;/code&gt;: Allows you to set environment variables for containers. In our example, this allows us to configure the name of our database, &lt;a href="https://github.com/orchardup/docker-postgresql/blob/master/run"&gt;due to a clever run script&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;links&lt;/code&gt;: &lt;a href="http://www.fig.sh/env.html"&gt;Allows inter-service communication&lt;/a&gt;. In our example, &lt;code&gt;web&lt;/code&gt; needs to know the ip and ports for the &lt;code&gt;redis&lt;/code&gt;, &lt;code&gt;db&lt;/code&gt; and &lt;code&gt;es&lt;/code&gt; services. Fig ensures those boot up first and then injects a set of environment variables to &lt;code&gt;web&lt;/code&gt; which include the IP address and various ports of the linked services.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To stop the running services you kill them with &lt;code&gt;Ctrl+C&lt;/code&gt; or run &lt;code&gt;fig stop&lt;/code&gt; in another terminal window.&lt;/p&gt;
&lt;p&gt;Behind the scenes, Fig has used Docker to build and then run containers for each service. Running &lt;code&gt;fig up&lt;/code&gt; again will restart the previously created containers whose volume changes (files, folders, etc) persist between boots. This means that if you have added data to one of the data stores it will still be present between restarts. You can remove the containers associated with services, and thus any volume changes, by running &lt;code&gt;fig remove [SERVICE]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After a successful build of a service Fig won't attempt to rebuild that service on the next &lt;code&gt;up&lt;/code&gt;. That means if you want to make any changes to a built service's &lt;code&gt;Dockerfile&lt;/code&gt;, you'll need to tell Fig to &lt;code&gt;rebuild&lt;/code&gt; that image by using &lt;code&gt;fig build [SERVICE]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fig also gives you the ability to run one-off commands in services using &lt;code&gt;fig run [SERVICE] [COMMAND]&lt;/code&gt;, e.g. &lt;code&gt;fig run web python&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;That's it!&lt;/h3&gt;
&lt;p&gt;For more about what Fig can do, I'd suggest checking out the
&lt;a href="http://www.fig.sh/index.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Tips we've learnt along the way.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Try to use images when you can. Each layer is pulled in parallel, resulting in a quick download. An image is also frozen. Without careful version pinning, re-building images can change over time. Try to move as many non-project specific steps out of your Dockerfiles into new base images. For example, in our web service, the python and pip installation steps are good canditates to be contained in base images.&lt;/li&gt;
&lt;li&gt;Across teams, try to all use the same version of Docker and Fig. Both are moving fast and not insusceptible to version differences.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="docker"></category><category term="fig"></category><category term="how-to"></category></entry></feed>